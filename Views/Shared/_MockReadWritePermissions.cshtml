@using IDB.Presentation.MVC4.Models.Mock
@using IDB.MW.Infrastructure.Configuration;

@model MockReadWritePermissionsViewModel

@if (ConfigurationServiceFactory.Current.GetApplicationSettings().IsDevelopmentMode)
{
    <div class="row row-body-50">
        <div class="col-md-12">
            @if (Model.ReadPermission != null)
            {
                @Confluence.ButtonBlue("Read Permission", name: "ReadPermision", action: "setReadPermission")
            }
            @if (Model.WritePermission != null)
            {
                @Confluence.ButtonOrange("Write Permission", name: "WritePermision", action: "setWriteBasicAccess")
            }
            @Confluence.ButtonBlue("Remove/Refresh Permission", name: "RemovePermision", action: "removePermission")
        </div>
    </div>



    <script>
         @if (Model.ReadPermission != null) {
           @: function setReadPermission(source) {
           @: var response = postUrlWithOptions("@Url.Action( "ChangePermission" , "Mock" , new { area = "Mock" , permission = Model.ReadPermission } )",
           @: { dataType: 'json' });
           @:    showMessage(response.responseJSON.ErrorMessage, true);
           @: }
         }

        @if (Model.WritePermission != null) {
            @:function setWriteBasicAccess(source) {
            @: var response = postUrlWithOptions("@Url.Action("ChangePermission", "Mock", new { area = "Mock", permission = Model.WritePermission })", 
            @:{ dataType: 'json' });
            @:showMessage(response.responseJSON.ErrorMessage, true);
            @:}
        }

        function removePermission(source) {
            var response = postUrlWithOptions("@Url.Action("ChangePermission", "Mock", new { area = "Mock" })", { dataType: 'json' });
            showMessage(response.responseJSON.ErrorMessage, true);
        }
    </script>
}