@using System.Web.Mvc.Html
@using System.Web.Script.Serialization
@using IDB.Architecture
@using IDB.MW.Application.AdministrationModule.Services.MasterDataService
@using IDB.MW.Application.AttributesModule.Services
@using IDB.MW.Application.AttributesModule.ViewModels.AttributesService.Layouts
@using IDB.MW.Application.Core.Services.CatalogService
@using IDB.MW.Application.MrBlueModule.Enums
@using IDB.MW.Domain.Contracts.ModelRepositories.Security
@using IDB.MW.Domain.EntityHelpers
@using IDB.MW.Domain.Session
@using IDB.MW.Infrastructure.Data.Optima.Repositories.Models
@model IDB.MW.Application.Core.ViewModels.FormRendering.FormDataViewModel
@{
    if (ViewData["pageName"] == null)
    {
        throw new Exception("'pageName' key is not found in ViewData");
    }
    string pageName = ViewData["pageName"].ToString();
    ISecurityModelRepository objSecurityModelRepository = new SecurityModelRepository();
    var operationNumber = IDBContext.Current.Operation ?? string.Empty;
    var arrPermissions = IDBContext.Current.Permissions ?? new List<string>();
    Model.SecurityFieldAccess = objSecurityModelRepository.GetFieldBehaviorByPermissions(operationNumber, pageName, arrPermissions, 0, 0);
    JavaScriptSerializer j = new JavaScriptSerializer();
    Formulary formulary = (Formulary)j.Deserialize(Model.Layout, typeof(Formulary));
}
    @if (Model != null)
    {
        <div class="row">
            @foreach (var section in formulary.Sections)
            {
                    foreach (var layout in section.Layouts)
                    {
                            foreach (var cell in layout.Cells)
                            {
                                    foreach (var element in cell.Elements)
                                    {
                                        switch (element.Type)
                                        {
                                            case "Attribute":

                                                var field = Model.Fields.FirstOrDefault(o => o.Name == element.Code);

                                                if (field != null && field.Name.Equals("ApprovalAuth"))
                                                {
                                                    var securityItem = Model.SecurityFieldAccess.SingleOrDefault(a => a.FieldName == field.Name);
                                                    field.IsVisible = securityItem == null || securityItem.IsVisible;
                                                    field.HasReadPermission = securityItem == null || (field.IsVisible);
                                                    field.HasWritePermission = securityItem == null || (!securityItem.IsReadOnly && field.IsVisible);

                                                    if (field.IsVisible)
                                                    {
                                                        <div class="col-md-3">
                                                            @Html.Partial("FormRendering/FieldRenderer", field)
                                                        </div>
                                                    }
                                                    break;
                                                }
                                                break;

                                        }
                                    }

                                    foreach (var element in cell.Elements)
                                    {
                                        switch (element.Type)
                                        {
                                            case "Attribute":

                                                var field = Model.Fields.FirstOrDefault(o => o.Name == element.Code);
                                                if (field != null && field.Name.Equals("ApprovalProcess"))
                                                {
                                                    var securityItem = Model.SecurityFieldAccess.SingleOrDefault(a => a.FieldName == field.Name);
                                                    field.IsVisible = securityItem == null || securityItem.IsVisible;
                                                    field.HasReadPermission = securityItem == null || (field.IsVisible);
                                                    field.HasWritePermission = securityItem == null || (!securityItem.IsReadOnly && field.IsVisible);

                                                    if (field.IsVisible)
                                                    {
                                                        <div class="col-md-3 ml30">
                                                            
                                                            @Html.Partial("FormRendering/FormRendererApprovalProcess", field)
                                                        </div>
                                                    }
                                                    break;
                                                }
                                                break;

                                        }
                                    }


                                    foreach (var element in cell.Elements)
                                    {
                                        switch (element.Type)
                                        {
                                            case "Attribute":

                                                var field = Model.Fields.FirstOrDefault(o => o.Name == element.Code);

                                                if (field != null && field.Name.Equals("Justification") && field.IsIgrLon)
                                                {
                                                    var securityItem = Model.SecurityFieldAccess.SingleOrDefault(a => a.FieldName == field.Name);
                                                    field.IsVisible = securityItem == null || securityItem.IsVisible;
                                                    field.HasReadPermission = securityItem == null || (field.IsVisible);
                                                    field.HasWritePermission = securityItem == null || (!securityItem.IsReadOnly && field.IsVisible);

                                                    <div class="col-md-3 ml15" style="display:none" id="justificationField">
                                                        @Html.Partial("FormRendering/FormRendererJustification", field)
                                                    </div>
                                                    break;
                                                }
                                                break;

                                        }
                                    }

                            }
                    }
            }
        </div>
    }
<br />