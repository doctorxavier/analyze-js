@using Newtonsoft.Json
@using IDB.Architecture.Language
@model List<IDB.MW.Domain.Models.Documents.SearchDocumentModel>
@{
    var i = 0;
}
<script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Document/modalDocument.js")"></script>

<script type="text/javascript">
    //$("#tabla01Pag").sortableConfluense();

    //$('[data-id-selector=selectableDocument]').off('click');
    //$('[data-id-selector=selectableDocument').click(function (e) {
    //    console.log("selected");
    //    var source = $(this);
    //    source.siblings("tr").removeClass("selected").removeClass("row-selected");
    //    source.toggleClass("selected").toggleClass("row-selected");
    //});

    $('[data-id=clearFilters]').off('click');
    $('[data-id=clearFilters').click(function (e) {
        SelectedTabAction("SearchDocClauses");
    });
    $("#tabla01Pag").sortableConfluence();

    function afterOrder() {
        tableSetting();
    }

    tableSetting();

    function tableSetting() {
        $("#tabla01Pag").selectableConfluence();
    }

    function afterSelect(row) {
        if ($("#errorDocumentSelectedSearch").css('display') == 'block') {
            $("#errorDocumentSelectedSearch").css('display', 'none');
        }
        var tbody = row.closest('tbody');
        tbody.find('tr.selected').removeClass("selected").removeClass("row-selected");
        row.addClass("selected").addClass("row-selected");
    }
</script>
<div style="display: block;" class="tab2 k-content k-state-active container" id="undefined-2" role="tabpanel" aria-expanded="true">

    <div class="row">
        <div class="col-md-3 resultsContainer searchFilterET">
            @Confluence.Label(Model.Count.ToString() + " documents")
        </div>
        <div id="errorDocumentSelectedSearch" class="col-md-4 alert alert-danger alert-dangerET" hidden>
            @Localization.GetText("DM.Error.Selected.Document")
        </div>
        <div class="col-md-3 text-right searchcClearET">
            @Confluence.LabelLink(Localization.GetText("Common.ClearAll"), dataAttributes: new Dictionary<string, string> { { "id", "clearFilters" } })
        </div>
    </div>
    <div data-id-selector="result-container-main" class="overflowContainer">
        <table id="tabla01Pag" class="tableNormal idbDocumentSearchResult">
            <thead>
                <tr>
                    @* replace de width with class *@
                    <th width="40px"></th>
                    <th class="sort">@Localization.GetText("Document.Box.IDBDocNumber")</th>
                    <th class="sort">@Localization.GetText("Document.Filter.DocumentName")</th>
                    <th class="sort" order-type="date">@Localization.GetText("Created")</th>
                    <th class="sort">@Localization.GetText("Document.Filter.IDBAuthorId")</th>
                    @*<th class="w110">@Localization.GetText("Action")</th>*@
                </tr>
            </thead>
            <tbody>
                @foreach(var document in Model)
                {
                    //clean missing document number from response, remove it when service be stable
                    if(string.IsNullOrEmpty(document.DocNum))
                    {
                        continue;
                    }
                    i++;
                    <tr data-id="@i" data-id-selector="selectableDocument" data-json="@JsonConvert.SerializeObject(document, Formatting.None)">
                        <td><span class="dm-selectedRow"></span></td>
                        @{
                            var secureUrl = IDB.MW.Domain.EntityHelpers.DownloadDocumentHelper.GetDocumentLink(document.DocNum);
                        }
                        <td><a href=@secureUrl target="_blank">@document.DocNum</a></td>
                        <td title="@document.DocName">
                            <div class="w230 text-break-points">
                                @document.DocName
                            </div>
                        </td>
                        <td>@Confluence.LabelGetDate(document.CreationDate.AsDateTime())</td>
                        <td title="@document.FullName">
                            <div class="w170 text-break-points">
                                @document.AuthorId
                            </div>
                        </td>
                    </tr>
                }
            </tbody>

        </table>
    </div>
</div>