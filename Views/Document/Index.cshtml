@using Microsoft.Ajax.Utilities
@using IDB.Presentation.MVC4.Helpers
@using IDB.Architecture.Language
@using IDB.MW.Domain.Models.Global
@using IDB.MVCControls.General.Helpers

@model IDB.Presentation.MVC4.Models.Documents.OperationLevelDocumentViewModel

@{

    var activeLocal = string.Empty;
    var activeKeyDoc = string.Empty;
    var activePubDocs = string.Empty;
    var activeVerMyDocs = string.Empty;
    switch (Model.TabId)
    {
        case "pubdocs":
            activePubDocs = "active";
            break;
        case "vermydocs":
            activeVerMyDocs = "active";
            break;
        case "keydocs":
            activeKeyDoc = "active";
            break;
        case "localdocs":
        default:
            activeLocal = "active";
            break;
    }
}

@section CSS {
    @Styles.Render("~/Content/Confluence")
    @Styles.Render("~/Content/GeneralDocument")
    @Styles.Render("~/Content/DocumentManagement")
}

@section JavaScript {
    @Scripts.Render("~/bundles/scripts")
    @Scripts.Render("~/bundles/document")
    @Scripts.Render("~/bundles/DocumentManagement")
    @Scripts.Render("~/signalr/hubs")

    <script type="text/javascript">
        var publishConfirmMessage = '@Localization.GetText("DM.Publish.Msg.Confirmation")';
        var keyDocumentConfirmMessage = '@Localization.GetText("TCM.DO.DeleteOutcomeStatement.UndoneActionMessage")';
        var pageSize = 50;
        $(document).ready(function () {
            showErrorMsg();
        });

        function showErrorMsg(){
            @if (!string.IsNullOrEmpty(Model.ErrorMessage))
            {
                 <text>
            errorBar('@Model.ErrorMessage', 60, true);
            </text>
            }
        }

        function renderizeRow(documentList, sourceType, description) {
            var msgOK = '@Localization.GetText("TCM.SaveSuccessfulMessage")';
            successBar(msgOK, 60, true);
            window.location.reload();
        }
    </script>
}
<div class="container-fluid">
    @if (Model.TabId != "myDocs")
    {
        using (Html.BeginForm("Index", "Document", FormMethod.Get, new { id = "tabForm", area = "" }))
        {
            @Html.Hidden("tabId", Model.TabId)
            @Html.Hidden("operationNumber", Model.OperationNumber)
            <div class="row">
                <ul class="tabs">
                    <li class="@activeLocal tabSelector" onclick="tabs(this)" id="localDocs">
                        @Localization.GetText("DM.ConvergenceDocuments.Title")
                    </li>
                    <li class="@activeKeyDoc tabSelector" onclick="tabs(this)" id="keyDocs">
                        @Localization.GetText("DM.KeyDocuments.Title")
                    </li>
                    <li class="@activeVerMyDocs tabSelector" onclick="tabs(this)" id="verMyDocs">
                        @Localization.GetText("VER.MD.VirtualEditingRoom.Title")
                    </li>
                    @if (Model.DisplayPublishTab)
                    {
                        <li class="@activePubDocs tabSelector" onclick="tabs(this)" id="pubDocs">
                            @Localization.GetText("DM.Publish.Title")
                        </li>
                    }
                </ul>
            </div>
        }
    }

    <div class="container-fluid">
        @{
            Html.RenderAction(Model.Action, "Document", new { tabId = Model.TabId, operationNumber = Model.OperationNumber, action = Model.Action });
        }
    </div>
</div>