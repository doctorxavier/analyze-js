@using IDB.Architecture.Language
@using IDB.Presentation.MVC4.Helpers
@using IDB.Presentation.MVC4.Models.DocumentManagement;
@model IDB.MW.Domain.Models.Documents.DocumentsViewModel
@{
    var selectedFunction = string.Empty;
}
<script  type="text/javascript" src="@Url.Content("~/Scripts/NewConfluence/Extract/Loader.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/NewConfluence/Input.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/NewConfluence/Other.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/bootstrap/bootstrap.min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/NewConfluence/Pluging.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/NewConfluence/Table.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/NewConfluence/General.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Document/documentModal.js")"></script>
<script type="text/javascript">
    $(document).ready(function () {
        hideLoader();
    });
</script>
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/basesite.css")" />
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/bootstrap.css")" />
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/Risks/esmartGeneral.css")" />
@* with this class modal style looks fine *@
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/NewConfluence/Button.css")" />
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/NewConfluence/Generic.css")" />
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/NewConfluence/Icon.css")" />
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/NewConfluence/Input.css")" />
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/NewConfluence/Label.css")" />
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/NewConfluence/Legacy.css")" />
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/NewConfluence/Other.css")" />
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/NewConfluence/Table.css")" />
@Html.Hidden("isFirstTime", (object)ViewBag.isFirstTime)

@using(Html.BeginForm("IndexDocumentRelationship", "Document", FormMethod.Post, new { area = string.Empty, id = "targetDoc", enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(x => x.OperationId, new Dictionary<string, Object> { { "id", "operationId" } })
    @Html.HiddenFor(x => x.MainOperationNumber, new Dictionary<string, Object> { { "id", "mainOperationNumber" } })
    @Html.HiddenFor(x => x.ParentEntityId, new Dictionary<string, Object> { { "id", "parentEntityId" } })
    @Html.HiddenFor(x => x.SubParentEntityId, new Dictionary<string, Object> { { "id", "subParentEntityId" } })
    @Html.HiddenFor(x => x.SubsubParentEntityId, new Dictionary<string, Object> { { "id", "subsubParentEntityId" } })

    @Html.HiddenFor(x => x.EntityRelated, new Dictionary<string, Object> { { "id", "entityRelated" } })
    @Html.HiddenFor(x => x.EntityRegisterId, new Dictionary<string, Object> { { "id", "entityRegisterId" } })

    @Html.HiddenFor(x => x.TaskId, new Dictionary<string, Object> { { "id", "TaskId" } })

    @Html.HiddenFor(x => x.DocumentEvaluationTrackingId, new Dictionary<string, Object> { { "id", "DocumentEvaluationTrackingId" } })
    @Html.HiddenFor(x => x.StageId, new Dictionary<string, Object> { { "id", "Stage" } })
    @Html.HiddenFor(x => x.TypeOfDocumentId, new Dictionary<string, Object> { { "id", "TypeOfDocument" } })
    @Html.HiddenFor(x => x.DocumentPermissionsId, new Dictionary<string, Object> { { "id", "DocumentPermissions" } })
    @Html.HiddenFor(x => x.DocumentDate, new Dictionary<string, Object> { { "id", "DocumentDate" } })
    @Html.HiddenFor(x => x.Description, new Dictionary<string, Object> { { "id", "Description" } })
    @Html.HiddenFor(x => x.BusinessAreaCode, new Dictionary<string, object> { { "id", "BusinessAreaCode" } })
    @Html.HiddenFor(x => x.Library, new Dictionary<string, object> { { "id", "Library" } })
    @Html.HiddenFor(x => x.LibrarySubFolder, new Dictionary<string, object> { { "id", "LibrarySubFolder" } })
    @Html.HiddenFor(x => x.Function, new Dictionary<string, object> { { "id", "Function" } })
    @Html.HiddenFor(x => x.DocumentName, new Dictionary<string, object> { { "id", "DocumentName" } })
    @Html.HiddenFor(x => x.IDBDocNumber, new Dictionary<string, object> { { "id", "IDBDocNumber" } })
    @Html.HiddenFor(x => x.DocumentContent, new Dictionary<string, object> { { "id", "DocumentContent" } })
    @Html.HiddenFor(x => x.IDBAuthorName, new Dictionary<string, object> { { "id", "IDBAuthorName" } })
    @Html.HiddenFor(x => x.DocumentDate, new Dictionary<string, object> { { "id", "DocumentDate" } })
    @Html.Hidden("ErrorArchivo", @Localization.GetText("Is not selected any file to be added"))
    @Html.Hidden("ErrorExtension", @Localization.GetText("The file extensions type is not allowed."))
    @Html.HiddenFor(x => x.DocumentID, new Dictionary<string, object> { { "id", "DocumentID" } })

    <p class="hide headerWindow">Navegation document</p>
    <div class="tabstrip k-widget k-header k-tabstrip clauses_add_doc " tabindex="0">
        <ul id="ItemsAddDoc" class="k-tabstrip-items k-reset">
            <li id="AddDocClauses" class="k-state-active k-item k-tab-on-top k-state-default k-first" onclick="SelectedTabAction(this.id)">
                <a title="@Localization.GetText("Document.Tabs.AddDocto")" href="#" class="k-link">@Localization.GetText("Document.Tabs.AddDocto")</a>
            </li>
            <li id="SearchDocClauses" class="k-item k-state-default k-last" onclick="SelectedTabAction(this.id)">
                <a title="@Localization.GetText("Document.Tabs.SearchDocto")" href="#" class="k-link">@Localization.GetText("Document.Tabs.SearchDocto")</a>
            </li>
        </ul>

        @*Upload Section*@
        <div class="tab1 k-content k-state-active" style="display: block;" id="undefined-1" role="tabpanel" aria-expanded="true">
            <div class="contenido mod_operationTeamMember addDocument">
                <div class="docBrowser">
                    <p class="preguntaDelete"> @Localization.GetText("Select files from your computer or drop files anywhere on this screen")</p>
                    <p class="preguntaDelete"> @Localization.GetText("The  file extensions types that are allowed are pdf, xls, xlsx, pst, ppt, pptx, mpp, pub, vsd, vss, vst, vdx, vsx, vtx, doc, docx, wpd, msg, do, dta, sps")</p>
                    <div class="botones">
                        <input type="file" name="file" id="upload" multiple />
                        @if (ViewBag.errorMessage != null)
                        {

                        <p>@ViewBag.errorMessage</p>
                        }
                    </div>
                    <div class="row">
                        <div class="col-md-3 resultsContainer searchFilterET">
                        </div>
                        <div id="errorDocumentSelectedAdd" class="col-md-4 alert alert-danger alert-dangerET" hidden>
                            @Localization.GetText("DM.Error.Selected.Document")
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @*Search Section*@
        <div style="display:none;" class="tab2 k-content" id="undefined-2" role="tabpanel" aria-hidden="true" aria-expanded="false">
            <div id="dmSearchForm" class="contenido mod_operationTeamMember addDocument">

                <div class="newDocument">
                    <fieldset>
                        <legend class="hide"> @Localization.GetText("Document search filter")</legend>

                        <label class="inputNormal">
                            <input class="inputEntry" name="Input Normal" id="operationNumber" placeholder="@Localization.GetText("Operation number")" value="@Model.MainOperationNumber">
                        </label>
                        <label class="inputNormal">
                            <input class="inputEntry" name="Input Normal" id="contractNumber" placeholder="@Localization.GetText("Contract number")">
                        </label>
                        <label class="inputNormal">
                            <input class="inputEntry" name="Input Normal" id="idbdocsNumber" placeholder="@Localization.GetText("IDBDocs number")">
                        </label>
                        <label class="inputNormal">
                            <input class="inputEntry" name="Input Normal" id="documentName" placeholder="@Localization.GetText("Document name")">
                        </label>
                        <label class="inputNormal">
                            <input class="inputEntry" name="Input Normal" id="documentID" placeholder="@Localization.GetText("Document ID")">
                        </label>
                        <label class="inputNormal">
                            <input class="inputEntry" name="Input Normal" id="idbAuthorUserId" placeholder="@Localization.GetText("IDB Author User ID")">
                        </label>
                        <label class="inputNormal">
                            <input class="inputEntry" name="Input Normal" id="documentContent" placeholder="@Localization.GetText("Document content")">
                        </label>
                        <div class="custom">
                            <label class="editLabel paddingTop_label" for="inputCorrespondence" onclick="getOptionValueInput(this);">
                                <input name="inputCorrespondence" type="checkbox" id="inputCorrespondence" class="hidden-field">
                                <span class="custom checkbox">@Localization.GetText("Document.Filter.SiscorCorrespondence")</span>
                            </label>
                        </div>

                        @*Agregar codigo*@
                        <div class="small conteinerleftET conteinerReferencesET">
                            <div class="inputEntryDocumentOptionText searchFilterET searchConteinerFilterET" id="muestratodoInput">
                                <div class="filterAreaDivET">
                                    <input class="inputEntryDocumentOption1 ReferencesInput" name="Input Normal" id="documentNumberInput" placeholder="@Localization.GetText("DM.Filter.Number")">
                                </div>

                                <div class="filterAreaDivET heightboxYear">
                                    <select class="inputEntryDocumentOption heightboxYearSelect" id="inputCorrespondenceYear" name="InputCorrespondenceYear"></select>
                                </div>
                            </div>
                        </div>

                        @*Termina codigo*@

                    </fieldset>
                </div>
            </div>
            <div id="dmSearchResult" hidden>

            </div>
        </div>
    </div>
    <div class="pie" style="margin-bottom: 15px;">
            <div class="documentSelected">
                <p class="typo"></p>
            </div>

            <div class="botones pb20">
                @if(Model.EntityRelated.Equals("VISUAL_OUTPUT_DOCUMENT") || Model.EntityRelated.Equals("VISUAL_PROJECT_DOCUMENT"))
                {
                <input type="button" class="button white click-action" title="@Localization.GetText("Cancel")" value="@Localization.GetText("Cancel")" id="cancel" data-route="javascript:idbCloseKendoWindow(true)">
                }
                else
                {
                <a class="link right" title="@Localization.GetText("Cancel")" href="javascript:void(0);downConteinerModal()" id="cancel">@Localization.GetText("Cancel")</a>
                }
                <label for="add_addDoc">
                    <input type="submit" value="@Localization.GetText("Add")" id="UploadButton" title="@Localization.GetText("Add")" class="btn-primary AddDoc" data-route="@Url.Action("IndexDocumentRelationship", "Document", new { area = string.Empty, operationId = Model.OperationId, mainOperationNumber = Model.MainOperationNumber, entityRelated = Model.EntityRelated, parentEntityId = Model.ParentEntityId, subParentEntityId = Model.SubParentEntityId, subsubParentEntityId = Model.SubsubParentEntityId, isFirstTime= ViewBag.isFirstTime, entityRegisterId = ViewBag.entityRegisterId, businessAreaCode = Model.BusinessAreaCode })" />

                    <input type="button" title="@Localization.GetText("Add")" class="btn-primary" value="@Localization.GetText("Add")" id="AddDocRelationship" data-route="@Url.Action("CreateDocumentRelationshipWithIDBDocs", "Document", new { area = string.Empty})" hidden>

                    <input type="button" title="@Localization.GetText("Search")" class="btn-primary" value="@Localization.GetText("Search")" id="SearchButton" data-route="@Url.Action("SearchIDBDocument", "Document", new { area = string.Empty, operationId = Model.OperationId, mainOperationNumber = Model.MainOperationNumber, entityRelated = Model.EntityRelated, parentEntityId = Model.ParentEntityId, subParentEntityId = Model.SubParentEntityId, subsubParentEntityId = Model.SubsubParentEntityId, isFirstTime= ViewBag.isFirstTime, entityRegisterId = ViewBag.entityRegisterId, businessAreaCode = Model.BusinessAreaCode })">
                </label>
            </div>
        </div>
}
