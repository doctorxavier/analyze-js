@using IDB.MVCControls.General.Helpers
@model IDB.Presentation.MVC4.Areas.DocumentTemplate.Models.TemplateViewModel
@{
    ViewBag.showLoader = true;
    ViewBag.fixLoad = true;
    ViewBag.Title = Localization.GetText("OP.DTG.TemplateGen.Title").HtmlEncode();
}

<div class="header">
    <div class="row">
        <div class="col-md-12">
            @Html.Partial("Partials/buttons")
        </div>
    </div>
</div>

<div id="PageContent"
     data-parsley-validate="data-parsley-validate"
     data-parsley-excluded="[disabled]"
     data-url="@Url.Action("SaveTemplate", "TemplateGenerator", new { area = "DocumentTemplate" })">
    <input type="hidden" id="hidViewModel" value="@ViewBag.SerializedViewModel" />
    <form id="form" method="POST" enctype="multipart/form-data">
        <div class="row mb10">
            <div class="col-lg-12">
                @Confluence.LabelMainTitle(Localization.GetText("OP.DTG.TemplateGen.Title"))
            </div>
        </div>

        <div class="row mb15">
            <div data-idb-fieldname="tbDocument">
                <div class="col-lg-12 mb10 lblcontent">
                    @Confluence.Label(Localization.GetText("OP.DTG.TemplateGen.Document"))
                </div>
                <div class="lblvalue">
                    <div class="col-lg-12">
                        <span data-pagemode="read">
                            @Confluence.LabelBold(Model.FileName)
                        </span>
                    </div>
                    <div data-pagemode="edit">
                        @if (Model.DocumentTemplateId > 0)
                        {
                            <div class="col-lg-12">
                                @Confluence.InputHidden(Model.SourceDocumentNumber, "templateDocumentNumber")
                                @Confluence.InputHidden(Model.FullPathDownloadFolder, "templateDocumentUrl")
                                @Confluence.LabelBold(Model.FileName)
                            </div>
                        }
                        else
                        {
                            <div class="col-lg-10" style="margin-bottom: -35px;">
                                @Confluence.InputFile("templateFile", "100%",
                                     acceptFormats: "application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                    dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "tbDocument" } })
                            </div>
                            <div class="col-lg-2 pl30">
                                @Confluence.ButtonBlue(Localization.GetText("OP.DTG.TemplateGen.Button.UploadFile"), "btnLoadDocument",
                                    width: "100%", dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "btnLoadDocument" } })
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="row mb15">
            <div data-idb-fieldname="tbDescription">
                <div class="col-lg-12 mb10 lblcontent">
                    @Confluence.Label(Localization.GetText("OP.DTG.TemplateGen.Description"))
                </div>
                <div class="col-lg-12 lblvalue">
                    <span data-pagemode="read">
                        @Confluence.InputTextArea(Model.Description, null, isReadOnly: true, required: false,
                            htmlClass: "noborder nopadding", width: "100%")
                    </span>
                    <span data-pagemode="edit">
                        @Confluence.InputTextArea(Model.Description, "templateDescription", width: "100%", height: "75px", maxLength: 250,
                            dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "tbDescription" } })
                    </span>
                </div>
            </div>
        </div>
        <div class="row mb15">
            <div class="col-xs-6 col-sm-2 lblcontent">
                @Confluence.Label(Localization.GetText("OP.DTG.TemplateGen.DateCreated"))
            </div>
            <div class="col-xs-6 col-sm-2 lblcontent">
                @Confluence.Label(Localization.GetText("OP.DTG.TemplateGen.DateExpired"))
            </div>
            <div class="col-xs-6 col-sm-2 lblcontent">
                @Confluence.Label(Localization.GetText("OP.DTG.TemplateGen.DocumentType"))
            </div>
            <div class="col-xs-6 col-sm-2 lblcontent">
                @Confluence.Label(Localization.GetText("OP.DTG.TemplateGen.Parameters"))
            </div>
            <div class="col-xs-6 col-sm-2 lblcontent">
                @Confluence.Label("Test Parameter")
            </div>
        </div>
        <div class="row mb15">
            <div data-idb-fieldname="tbDateCreated">
                <div class="col-xs-6 col-sm-2 lblvalue">
                    <span data-pagemode="read">
                        @Confluence.LabelGetDate(Model.DateCreated, true)
                    </span>
                    <span data-pagemode="edit">
                        @Confluence.InputDatePicker(Model.DateCreated, "templateDateCreated", lessThanNameDate: "templateDateExpired",
                            dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "tbDateCreated" } })
                    </span>
                </div>
            </div>
            <div data-idb-fieldname="tbDateExpired">
                <div class="col-xs-6 col-sm-2 lblvalue">
                    <span data-pagemode="read">
                        @Confluence.LabelGetDate(Model.DateExpired, true)
                    </span>
                    <span data-pagemode="edit">
                        @Confluence.InputDatePicker(Model.DateExpired, "templateDateExpired", greaterThanNameDate: "templateDateCreated",
                            dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "tbDateExpired" } })
                    </span>
                </div>
            </div>
            <div data-idb-fieldname="tbDocumentType">
                <div class="col-xs-6 col-sm-2 lblvalue">
                    <span data-pagemode="read">
                        @Confluence.LabelBold(Model.DocumentTypeName)
                    </span>
                    <span data-pagemode="edit">
                        @Confluence.InputDropDown(Model.DocumentTypeId.ToString(), "templateDocumentType",
                            (List<SelectListItem>)ViewBag.DocumentTypeList,
                            dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "tbDocumentType" } })
                    </span>
                </div>
            </div>
            <div data-idb-fieldname="tbParameters">
                <div class="col-xs-6 col-sm-2 lblvalue">
                    <span data-pagemode="read">
                        @Confluence.LabelBold(Model.Parameters)
                    </span>
                    <span data-pagemode="edit">
                        @Confluence.LabelBold("@OperationNumber")
                        @Confluence.InputHidden("@OperationNumber", "templateParameters")
                    </span>
                </div>
            </div>
            <div data-idb-fieldname="tbDocumentType">
                <div class="col-xs-6 col-sm-2 lblvalue">
                    <span data-pagemode="edit">
                        @Confluence.InputText("AR0001", "testParameter", required: false)
                    </span>
                </div>
            </div>
        </div>

        <div class="panel panel-primary @Html.Raw(string.IsNullOrEmpty(Model.FileName) ? "hide" : Path.GetExtension(Model.FileName).Contains("xls") ? "hide" : "")">
            <div class="panel-heading">
                <div class="hide" data-pagemode="edit">
                    @Confluence.InputHidden(Model.DocumentTemplateId.ToString(), "templateId")
                </div>
                @if (string.IsNullOrEmpty(Model.Code))
                {
                    @Confluence.LabelBold("OP.DTG.TemplateGen.NewTemplate", htmlClass: "templateIdLabel")
                }
                else
                {
                    @Confluence.LabelBold(string.Format("{0}: {1}", Localization.GetText("OP.DTG.TemplateGen.TemplateCode"), Model.Code),
                         htmlClass: "templateIdLabel")
                }
            </div>
            <div class="panel-body">
                @if (!string.IsNullOrEmpty(Model.FileName))
                {
                    Html.RenderPartial("Partials/Template", Model);
                }
            </div>
        </div>
    </form>
</div>

<div class="footer">
    <div class="row">
        <div class="col-md-12">
            @Html.Partial("Partials/buttons")
        </div>
    </div>
</div>

@section scripts {
    <script type="text/javascript">
    registerCallback(function() {});

    $(document).on("ready", function() {
        var paramTemplate = window.location.search.substring(1).split('&')[0].split("=")[0];
        if (paramTemplate === "") {
            if (enterEditMode(false, $('#PageContent'), false)) {
                enterEditMode(false, $('[data-id=headerButtons]'), false);
                $("[data-action=saveTemplate]").prop("disabled", true);
            }
        }

        $(document).on("change", '[name*="isManualField"]', function() {
            var idField = $(this).attr("data-idb-fieldid");
            var textSql = $('textarea[name="Query[' + idField + ']"]');
            var iconSql = $('a[id=refreshQuery' + idField + ']');
            if ($(this).is(":checked")) {
                $('button[id="id-DataType[' + idField + ']"]').prop("disabled", true);
                textSql.prop("disabled", true).attr("data-force-parsley-validation", "false").attr("data-parsley-required", "false");
                textSql.next().removeClass("filled");
                iconSql.attr("disabled", "disabled").css({ "cursor": "default" });
                $('input[id="FieldManual[' + idField + ']"]').val("1");
                    $('input[id="FieldType[' + idField + ']"]').val("2");
                if (iconSql.hasClass("glyphicon-refresh")) {
                    iconSql.removeClass("glyphicon-refresh");
                }
                if (iconSql.hasClass("glyphicon-remove")) {
                    iconSql.removeClass("glyphicon-remove");
                }
                iconSql.addClass("glyphicon-ok");
            } else {
                $('button[id="id-DataType[' + idField + ']"]').prop("disabled", false);
                textSql.prop("disabled", false).attr("data-force-parsley-validation", "true").attr("data-parsley-required", "true");
                iconSql.removeAttr("disabled").css({ "cursor": "pointer" });
                if (textSql.val() === "") {
                    textSql.next().addClass("filled");
                }
                if (iconSql.hasClass("glyphicon-ok")) {
                    iconSql.removeClass("glyphicon-ok");
                    iconSql.addClass("glyphicon-refresh");
                }
                $('input[id="FieldManual[' + idField + ']"]').val("0");
                    $('input[id="FieldType[' + idField + ']"]').val("1");
            }
        });

        $("[name=btnLoadDocument]").click(function() {
            $("#form").submit(function(e) {
                var file = $("input.oculto").get(0).files;
                e.preventDefault();
                if (file.length > 0) {
                    var data = new FormData();
                    data.append("file", file[0]);
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("LoadDocumentResult", "TemplateGenerator", new {area = "DocumentTemplate"})",
                        contentType: false,
                        processData: false,
                        data: data
                    }).done(function(response) {
                        if (typeof response === "string") {
                            if (file[0].type === "application/vnd.openxmlformats-officedocument.wordprocessingml.document") {
                                $(".panel-body").html(response);
                                enterEditMode(false, $('.panel-body'), false);
                                $(".panel-primary").removeClass("hide");
                                ReadQueryTextarea();
                                $("[data-action=saveTemplate]").prop("disabled", false);
                            } else {
                                $(".panel-body").html(response);
                                $(".panel-primary").addClass("hide");
                                $("[data-action=saveTemplate]").prop("disabled", false);

                                var dataFile = new FormData();
                                dataFile.append("file", file[0]);

                                var resp = saveContainer($('#PageContent'), '#hidViewModel', true, $('#headerButtons'));
                                resp.done(function(dataresp) {
                                    if (!dataresp.IsValid && dataresp.ErrorMessage != null && dataresp.ErrorMessage !== '') {
                                        showMessage(dataresp.ErrorMessage);
                                    } else {
                                        exitEditMode(false, $('#PageContent'), true, true);
                                        exitEditMode(false, $('[data-id=headerButtons]'), false, true);
                                        showMessage("Your register was successful.", true,
                                            '@Url.Action("Index", "TemplateGenerator", new {area = "DocumentTemplate"})');
                                    }
                                }).fail(function(jqXhr, textStatus, errorThrown) {
                                    if ($(".vex-theme-default").html() == null) {
                                        showMessage("Error occurred:" + errorThrown, false);
                                    }
                                });
                            }
                        } else {
                            if ($(".vex-theme-default").html() == null) {
                                $(".panel-body").html("");
                                $(".panel-primary").addClass("hide");
                                $("[data-action=saveTemplate]").prop("disabled", true);
                                if (!response.IsValid) {
                                    showMessage(response.ErrorMessage, false);
                                } else {
                                    showMessage("Unknown error", false);
                                }
                            }
                        }
                    }).fail(function(jqXhr, textStatus, errorThrown) {
                        if ($(".vex-theme-default").html() == null) {
                            showMessage("Error occurred:" + errorThrown, false);
                        }
                    });
                }
            });
        });

        ReadQueryTextarea();
    });

    function editTemplate() {
        var success = enterEditMode(false, $('#PageContent'), false);
        if (success) {
            enterEditMode(false, $('[data-id=headerButtons]'), false);
        }
    }

    function saveTemplate() {
        if ($(".vex-theme-warning").html() == null) {
            if ($("[id^=refreshQuery]").hasClass("glyphicon-refresh") || $("[id^=refreshQuery]").hasClass("glyphicon-remove")) {
                showMessage("Need validate all Querys", false);
                return false;
            }

            var file;
            if ($("input.oculto").length) {
                if ($("input.oculto").get(0).files.length === 0) {
                    showMessage("No file selected", false);
                    return false;
                } else {
                    file = $("input.oculto").get(0).files;
                    if (file.length > 0) {
                        var dataFile = new FormData();
                        dataFile.append("file", file[0]);
                    }
                }
            }

            confirmAction("@Localization.GetText("OP.DTG.TemplateGen.Message.Accept")").done(function(pressOk) {
                if (pressOk) {
                    var response = saveContainer($('#PageContent'), '#hidViewModel', true, $('#headerButtons'));
                    response.done(function(data) {
                        if (!data.IsValid && data.ErrorMessage != null && data.ErrorMessage !== '') {
                            showMessage(data.ErrorMessage);
                        } else {
                            exitEditMode(false, $('#PageContent'), true, true);
                            exitEditMode(false, $('[data-id=headerButtons]'), false, true);
                            showMessage("Your register was successful.", true,
                                '@Url.Action("Index", "TemplateGenerator", new {area = "DocumentTemplate"})');
                        }
                    }).fail(function(jqXhr, textStatus, errorThrown) {
                        if ($(".vex-theme-default").html() == null) {
                            showMessage("Error occurred:" + errorThrown, false,
                                '@Url.Action("Index", "TemplateGenerator", new {area = "DocumentTemplate"})');
                        }
                    });
                }
            });
        }

        return false;
    }

    function cancel() {
        if ($(".vex-theme-warning").html() == null) {
            confirmAction("@Localization.GetText("OP.DTG.TemplateGen.Message.Cancel")").done(function(pressOk) {
                if (pressOk) {
                    exitEditMode(false, $('#PageContent'), true, true);
                    exitEditMode(false, $('[data-id=headerButtons]'), false, false);
                    window.location.href = "@Url.Action("Index", "TemplateGenerator", new {area = "DocumentTemplate"})";
                }
            });
        }
    }

    function ValidateQuery(idField) {
        var sqlQuery = $("[Name='Query[" + idField + "]']").val();
        var validate = $("#refreshQuery" + idField);
        var opNumber = $("[Name='testParameter']").val();
        validate.removeClass('glyphicon-refresh');
        validate.removeClass('glyphicon-ok');
        validate.removeClass('glyphicon-remove');
        $.ajax({
            type: "POST",
            url: "@Url.Action("ValidateSqlScript", "TemplateGenerator", new {area = "DocumentTemplate"})",
            data: { 'sqlQuery': sqlQuery, 'opNumber': opNumber }
        }).done(function(response) {
            if (response === "") {
                validate.addClass('glyphicon-ok');
            } else {
                if ($(".vex-theme-default").html() == null) {
                    validate.addClass('glyphicon-remove');
                    showMessage(response, false);
                }
            }
        }).fail(function(jqXhr, textStatus, errorThrown) {
            if ($(".vex-theme-default").html() == null) {
                validate.addClass('glyphicon-remove');
                showMessage("Error occurred:" + errorThrown, false);
            }
        });
    }

    function ReadQueryTextarea() {
        $("textarea[name*=Query]").change(function() {
            var validate = $("#refreshQuery" + $(this).attr("name").replace(/\D/g, ""));
            validate.removeClass('glyphicon-refresh');
            validate.removeClass('glyphicon-ok');
            validate.removeClass('glyphicon-remove');
            validate.addClass('glyphicon-refresh');
        });
    }
    </script>
}
