@using System.Globalization
@using IDB.MVCControls.DataTable.Helpers
@model List<IDB.MW.Business.DocumentTemplate.DTOs.DocumentTemplateDTO>
@helper IconLink(int itemId, bool disabledEdit = false, bool disabledClone = false)
{
    if (!disabledClone)
    {
        <a id="templateClone@(itemId)" class="glyphicon btn glyphicon-duplicate"
           @(new MvcHtmlString(string.Format("{0}=\"{1}\"", "name", "templateClone" + itemId)))
           @(new MvcHtmlString(string.Format("{0}=\"{1}\"", "data-navigate",
                 Url.Action("TemplateGenerator", "TemplateGenerator", new {area = "DocumentTemplate", templateId = itemId, clone = true}))))>
        </a>
    }
    
    if (!disabledEdit)
    {
        <a id="templateEdit@(itemId)" class="glyphicon btn glyphicon-edit"
           @(new MvcHtmlString(string.Format("{0}=\"{1}\"", "name", "templateEdit" + itemId)))
           @(new MvcHtmlString(string.Format("{0}=\"{1}\"", "data-navigate",
                Url.Action("TemplateGenerator", "TemplateGenerator", new { area = "DocumentTemplate", templateId = itemId }))))>
        </a>
    }
}
@{
    var templatesTableName = "templateListTable";
    var config = Html.RenderDataTable(Model);
    config.Name(templatesTableName)
        .PrimaryKey(m => m.DocumentTemplateId.ToString(CultureInfo.InvariantCulture))
        .AddPrimaryKeyToName(false)
        .Columns(column =>
        {
            column.Bound(c => c.Code).Header(Localization.GetText("OP.DTG.Homepage.Table.TemplateCode")).Persistent();
            column.Bound(c => c.Description).Header(Localization.GetText("OP.DTG.Homepage.Table.Description")).Persistent();
            column.Bound(c => c.DocumentTypeName).Header(Localization.GetText("OP.DTG.Homepage.Table.DocumentType")).Persistent();
            column.Template(c => Confluence.LabelGetDate(c.DateCreated != DateTime.MinValue ? c.DateCreated : (DateTime?)null))
                .Header(Localization.GetText("OP.DTG.Homepage.Table.DataCreated"));
            column.Template(c => Confluence.LabelGetDate(c.DateExpired != DateTime.MinValue ? c.DateExpired : (DateTime?)null))
                .Header(Localization.GetText("OP.DTG.Homepage.Table.DataExpired"));
            column.Bound(c => c.IsValid ? Localization.GetText("OP.DTG.Homepage.Status.Active") :
                Localization.GetText("OP.DTG.Homepage.Status.Inactive"))
                .Header(Localization.GetText("OP.DTG.Homepage.Table.Status"));
            column.Template(t => IconLink(t.DocumentTemplateId, !t.IsValid, true))
                .Header(Localization.GetText("OP.DTG.Homepage.Table.Actions")).Persistent();
        });

    config.TableClass = "tableNormal endSpacing";
    config.useCusomRowClass = false;
    config.Paginable();
}
@Html.Partial("Controls/DataTable", config)