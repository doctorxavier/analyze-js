@using System.Globalization

@using IDB.MW.Infrastructure.Configuration
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Application.IndicatorsModuleNew.ViewModels.Core.EditIndicators
@using IDB.MW.Application.IndicatorsModuleNew.ViewModels.StandardizedOutput
@using IDB.Presentation.MVC4.Areas.Indicators.Models

@model EditIndicatorPageViewModel<StandardizedBasicDataViewModel>

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDate = appSettings.FormatDate;
    var expRegDate = appSettings.ValidationDataPickerExpReg;

    bool hasExpired = ( Model.Indicator.Common.ExpirationDate.HasValue && ( Model.Indicator.Common.ExpirationDate.Value < DateTime.Today ) );
}

@if (Model.Indicator.Common.IndicatorId == 0)
{
    <div class="row mb16">
        <div class="col-md-12">
            @Confluence.LabelTitleGroup(Localization.GetText("IM.EditReadIndicator.BasicData.ChooseTemplate"))
        </div>
    </div>

    <div class="row mb20 font-body">
        <div class="col-md-4">
            @Confluence.InputDropDown(Model.Indicator.Common.TemplateVersionId.ToString(), name : "indicatorTemplate", elements : ViewBag.indicatorTemplateList, showEmptyOption : true, required : true, htmlClassElement : "dropDownContent")
        </div>
    </div>
}
else
{
    <div class="row mb16">
        <div class="col-md-12">
            @Confluence.LabelTitleGroup(Localization.GetText("IM.EditReadIndicator.BasicData.TemplateVersion"))
        </div>
    </div>

    <div class="row mb20 font-body">
        <div class="col-md-4">
            @Confluence.LabelGetDropDown(Model.Indicator.Common.TemplateVersionId, ViewBag.indicatorTemplateList, bold : false)
        </div>
    </div>
}


<div class="row mb20">
    <div class="col-md-12">
        @Confluence.LabelTitleGroup(Localization.GetText("IM.EditReadIndicator.BasicData.Relationship.Title"))
    </div>
</div>

<div class="row mb20">
    <div class="col-md-3 mb16">
        <div class="row mb16">
            <div class="col-md-12">
                @Confluence.InputCheckbox((hasExpired ? false : Model.Indicator.Specific.IsActive), "isActive", label : Localization.GetText("IM.EditReadIndicator.BasicData.Acitive"))
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Confluence.Label(Localization.GetText("IM.EditReadIndicator.BasicData.AcitiveInstructionsCheckedOutput"))
            </div>
        </div>
    </div>

    <div class="col-md-3 mb16">
        <div class="row mb16">
            <div class="col-md-12">
                @{
                    var dictionary = new Dictionary<string, string>();
                    dictionary.Add("parsley-required", "true");
                    dictionary.Add("parsley-required-message", Localization.GetText("IM.EditReadIndicator.BasicData.Contribution.Required"));
                }
                @Confluence.InputCheckbox(Model.Indicator.Specific.IsContribution, "isContribution",
                    label : Localization.GetText("IM.EditReadIndicator.BasicData.Relationship.Contribution"),
                             dataAttributes : dictionary)
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Confluence.Label(Localization.GetText("IM.EditReadIndicator.BasicData.Relationship.InsturctionsContribution"))
            </div>
        </div>
    </div>
</div>

<div class="row mb20">
    <div class="col-md-12">
        @Confluence.LabelTitleGroup(Localization.GetText("IM.EditReadIndicator.OutputProfile.Title"))
    </div>
</div>

<div class="grouping-section">
    <div class="col-md-6_5">

        <div class="col-md-12">
            <label class="lgTit">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.IndicatorName")</label>
        </div>

        <div class="col-md-12 lblcontent">
            <label class="labelNormal">@Localization.GetText("Common.Languaje.English")</label>
            <span class="asteriskColor">*</span>
        </div>

        <div class="col-md-12 lblvalue">
            @Confluence.InputText(Model.Indicator.Common.IndicatorNameEn, "indicatorNameEn", maxLength : 300, required : true)
        </div>

        <div class="col-md-12 lblcontent">
            <label class="labelNormal">@Localization.GetText("Common.Languaje.Spanish")</label>
            <span class="asteriskColor">*</span>
        </div>
        <div class="col-md-12 lblvalue">
            @Confluence.InputText(Model.Indicator.Common.IndicatorNameEs, "indicatorNameEs", maxLength : 300, required : true)
        </div>
        <div class="col-md-12 lblcontent">
            <label class="labelNormal">@Localization.GetText("Common.Languaje.French")</label>
        </div>
        <div class="col-md-12 lblvalue">
            @Confluence.InputText(Model.Indicator.Common.IndicatorNameFr, "indicatorNameFr", maxLength : 300, required : false)
        </div>
        <div class="col-md-12 lblcontent">
            <label class="labelNormal">@Localization.GetText("Common.Languaje.Portuguese")</label>
        </div>
        <div class="col-md-12 lblvalue">
            @Confluence.InputText(Model.Indicator.Common.IndicatorNamePt, "indicatorNamePt", maxLength : 300, required : false)
        </div>

    </div>
</div>

<div class="grouping-section">
    <div class="col-md-3 lineGrayRight">
        <div class="row1">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.Standardized.BusinessLine")</label>
                <span class="asteriskColor">*</span>
            </div>

            <div class="col-md-12 lblvalue" data-section="businessLine">
                @Confluence.InputDropDown(Model.Indicator.Specific.BusinessLineId.ToString(), name : "businessLineId", elements : ViewBag.BusinessLineList, showEmptyOption : true, required : true)
            </div>
        </div>

        <div class="row2">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.Standardized.OutputGroup")</label>
                <span class="asteriskColor">*</span>
            </div>

            <div class="col-md-12 lblvalue" data-section="outputGroup">
                @Confluence.InputDropDown(Model.Indicator.Specific.OutputGroupId.ToString(), name : "outputGroupId", elements : ViewBag.OutputGroupList, showEmptyOption : true, required : true)
            </div>
        </div>

        <div class="row3">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.UnitMeasure")</label>
                <span class="asteriskColor">*</span>
            </div>

            <div class="col-md-12 lblvalue">
                @Confluence.InputDropDown(Model.Indicator.Common.UnitMeasureId.ToString(), name : "unitMeasure", elements : ViewBag.UnitMeasureList, showEmptyOption : true, required : true)
            </div>
        </div>
    </div>

    <div class="col-md-3 ml16">
        <div class="row1">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.IndicatorNumber")</label>
                <span class="asteriskColor">*</span>
            </div>
            @{
                var indicatorNumberPrefix = string.Empty;
                var indicatorNumber = string.Empty;

                if (Model.Indicator.Common.IndicatorNumber != null)
                {
                    var start = Model.Indicator.Common.IndicatorNumber.IndexOf('.');
                    if (start >= 0)
                    {
                        indicatorNumberPrefix = Model.Indicator.Common.IndicatorNumber.Substring(0, start);
                        indicatorNumber = Model.Indicator.Common.IndicatorNumber.Substring(start + 1);
                    }
                    else
                    {
                        indicatorNumber = Model.Indicator.Common.IndicatorNumber;
                    }
                }
            }
            <div class="col-md-2 lblvalue" data-section="indicatorNumber-prefix" style="margin-top:8px;">
                @indicatorNumberPrefix.
            </div>
            <div class="col-md-10 lblvalue">
                @Confluence.InputText(indicatorNumberPrefix, "indicatorNumberPrefix", required : false, htmlClass : "hide")
                @Confluence.InputText(indicatorNumber, "indicatorNumber", required : true)
            </div>
        </div>

        <div class="row2">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.EffectiveDate")</label>
                <span class="asteriskColor">*</span>
            </div>
            <div class="col-md-12 lblvalue">

                @Confluence.InputDatePicker(Model.Indicator.Common.EffectiveDate, "effectiveDate", expReg : expRegDate, format : formatDate, required : true,
                                                                      dataAttributes : new Dictionary<string, string> { { "parsley-lessOrEqualDate", "[name=expirationDate]" }, { "parsley-lessOrEqualDate-message", @Localization.GetText("IM.EditReadIndicator.IndicatorProfile.EffectiveDate.RangeValidation") } })
            </div>
        </div>

        <div class="row3">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.ExpirationDate")</label>
                <span class="asteriskColor">*</span>
            </div>
            <div class="col-md-12 lblvalue">
                @{
                    var parsleyConstraint = new Dictionary<string, string> { { "parsley-greaterOrEqualDate", "[name=effectiveDate]" },
                                                         { "parsley-greaterOrEqualDate-message", Localization.GetText("IM.EditReadIndicator.IndicatorProfile.ExpirationDate.RangeValidation") },
                                                         { "parsley-onOrAfterDate", "true" },
                                                         { "parsley-onOrAfterDate-message", Localization.GetText("IM.EditReadIndicator.IndicatorProfile.ExpirationDate.ExpiredCreation") }};
                    if(hasExpired)
                    {
                        parsleyConstraint.Remove("parsley-onOrAfterDate");
                        parsleyConstraint.Remove("parsley-onOrAfterDate-message");
                    }
                }

                @Confluence.InputDatePicker(Model.Indicator.Common.ExpirationDate, "expirationDate", expReg : expRegDate, format : formatDate, required : true,
                                            dataAttributes : parsleyConstraint)
            </div>
        </div>

    </div>
</div>


<div class="grouping-section">

    <div class="col-md-12" data-section="theme">
        @Html.Partial("ThemePartial", new ThemePartialModel()
                {
                    ThemeList = ViewBag.ThemeList,
                    FundsIndByTheme = ViewBag.FundsIndByTheme,
                    ThemeIds = Model.Indicator.Specific.ThemeIds,
                    FundIdsByTheme = Model.Indicator.Specific.FundIdsByTheme,
                    IsReadMode = false
                })
    </div>

</div>