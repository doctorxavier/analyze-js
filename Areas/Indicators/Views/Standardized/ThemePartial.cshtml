@using IDB.MW.Infrastructure.Configuration
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Application.IndicatorsModuleNew.ViewModels.Core.EditIndicators
@using IDB.MW.Application.IndicatorsModuleNew.ViewModels.StandardizedOutput
@using IDB.Presentation.MVC4.Areas.Indicators.Models

@model ThemePartialModel


<div class="col-md-3 lineGrayRight">


    @if(Model.IsReadMode)
    {
        <div class="col-md-12 lblcontent">
            <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.Standardized.Theme")</label>
            <span class="asteriskColor">*</span>
        </div>





    }
    else
    {
        <div class="row1">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.Standardized.Theme")</label>
                <span class="asteriskColor">*</span>
            </div>
            <div class="col-md-12 lblvalue">
                @(Html.MultiDropDown("theme")
                   .AddAttributes("required", "required")
                   .Items(Model.ThemeList)
                    .SelectedItems(Model.ThemeIds))

            </div>
        </div>
    }





    @if(( Model.ThemeList != null ) && Model.ThemeList.Any())
    {
        foreach(var theme in Model.ThemeList)
        {
            var themeId = int.Parse(theme.Value);
            var isThemeSelected = Model.ThemeIds.Contains(themeId);
            var containerClass = "";
            var order = 0;
            if(!isThemeSelected)
            {
                containerClass += " hide";
            }

            var fundsAnIndicatorByTheme = new List<Tuple<string, List<MultiDropDownItem>>>();
            if(Model.FundsIndByTheme.ContainsKey(themeId))
            {
                fundsAnIndicatorByTheme = Model.FundsIndByTheme[themeId];
            }

            var selectedValues = new List<int>();
            if(Model.FundIdsByTheme.ContainsKey(themeId))
            {
                selectedValues = Model.FundIdsByTheme[themeId];
            }

            if(Model.IsReadMode)
            {
                <div data-fund-container-by-theme="@themeId" class="@containerClass">

                    <div class="standardized-title-theme">
                        @TitleTheme(theme.Text)
                    </div>
                    <div class="mb16 standardized-fund">
                        @foreach(var fundAndIndicator in fundsAnIndicatorByTheme)
                        {
                            order++;
                            var selectedIndicators = selectedValues.Select(x => x.ToString()).ToList();
                            var nameIndicators = fundAndIndicator.Item2.GetSelectedText(selectedIndicators);
                            if(( nameIndicators != null ) && ( nameIndicators.Any() ))
                            {
                                <div class="col-md-12 lblcontent">
                                    @Confluence.Label(fundAndIndicator.Item1
                                                  + ( " " )
                                                  + Localization.GetText("IM.EditReadIndicator.IndicatorProfile.Standardized.PrefixIndicators"))
                                </div>

                                foreach(var nameIndicator in nameIndicators)
                                {
                                    var orderClass = "nonLast";
                                    if(nameIndicator == nameIndicators[nameIndicators.Count() - 1])
                                    {
                                        orderClass = "last";
                                    }
                                    <div class="col-md-12 lblvalue bold @orderClass">
                                        @nameIndicator
                                    </div>
                                }
                            }
                        }
                    </div>

                </div>
            }
            else
            {
                <div data-fund-container-by-theme="@themeId" class="@containerClass col-md-12">

                    <div class="standardized-title-theme">
                        @TitleTheme(theme.Text)
                    </div>

                    <div class="mb16 standardized-fund">

                        @foreach(var fundAndIndicator in fundsAnIndicatorByTheme)
                        {
                            order++;
                            <div class="col-md-12 lblcontent">
                                @Confluence.Label(fundAndIndicator.Item1
                                                  + ( " " )
                                                  + Localization.GetText("IM.EditReadIndicator.IndicatorProfile.Standardized.PrefixIndicators"))
                            </div>
                            <div class="standardized-select-fund col-md-12">
                                @IndicatorCommon.MultiSelectTheme(themeId, order, fundAndIndicator.Item2, selectedValues, false)
                            </div>
                        }
                    </div>

                </div>

            }
        }
    }


</div>


@helper TitleTheme(string theme)
{
    @theme
    @(new MvcHtmlString("&nbsp;"))
    @Localization.GetText("IM.EditReadIndicator.IndicatorProfile.Standardized.PrefixTheme")
}

@helper TitleFund(string fund)
{
    @fund
    @(new MvcHtmlString("&nbsp;"))
    @Localization.GetText("IM.EditReadIndicator.IndicatorProfile.Standardized.PrefixIndicators")
}


