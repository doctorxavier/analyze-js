@using System.Globalization

@using IDB.MVCControls.General.Helpers
@using IDB.Presentation.MVC4.Helpers
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.Presentation.MVC4.Areas.Indicators.Models
@using IDB.MW.Application.IndicatorsModuleNew.ViewModels.Core

@model MVCSubindicatorViewModel


@{
    var config = Html.RenderDataTable(Model.Subindicators);
    config.Name(Model.Name)
    .PrimaryKey(x => x.SubindicatorId.ToString(CultureInfo.InvariantCulture))
    .AddPrimaryKeyToName(false)
    .UsePageMode(false)
    .UseDataTableNet(false)
    .Columns(c =>
    {
        c.Template(x => Confluence.InputText(x.NameEn, Model.Name + "-nameEn", maxLength : 140, required : Model.LanguageEnRequired)).Persistent().HeaderTemplate(LabelRequered("Common.Languaje.English", Model.LanguageEnRequired));
        c.Template(x => Confluence.InputText(x.NameEs, Model.Name + "-nameEs", maxLength : 140, required : Model.LanguageEsRequired)).Persistent().HeaderTemplate(LabelRequered("Common.Languaje.Spanish", Model.LanguageEsRequired));
        c.Template(x => Confluence.InputText(x.NameFr, Model.Name + "-nameFr", maxLength : 140, required : Model.LanguageFrRequired)).Persistent().HeaderTemplate(LabelRequered("Common.Languaje.French", Model.LanguageFrRequired));
        c.Template(x => Confluence.InputText(x.NamePt, Model.Name + "-namePt", maxLength : 140, required : Model.LanguagePtRequired)).Persistent().HeaderTemplate(LabelRequered("Common.Languaje.Portuguese", Model.LanguagePtRequired));
        c.Template(x => DrawActions(x)).Persistent();
    })
    .RowTemplates(x =>
    {
        x.Create(RowTemplateType.FirstRow, DrawCategoryTemplate);
    });

    config.TableClass = "tableNormal";
}


@helper DrawCategoryTemplate(SubindicatorViewModel model)
{
    <tr class="template">
        <td>@Confluence.InputText("", Model.Name + "-nameEn", maxLength : 140, disabled : true, required : Model.LanguageEnRequired)</td>
        <td>@Confluence.InputText("", Model.Name + "-nameEs", maxLength : 140, disabled : true, required : Model.LanguageEsRequired)</td>
        <td>@Confluence.InputText("", Model.Name + "-nameFr", maxLength : 140, disabled : true, required : Model.LanguageFrRequired)</td>
        <td>@Confluence.InputText("", Model.Name + "-namePt", maxLength : 140, disabled : true, required : Model.LanguagePtRequired)</td>
        <td>
            @DrawActions(null)
        </td>
    </tr>
}

@helper DrawActions(SubindicatorViewModel model)
{
    <span class="button-trash-CategoryOneLevel">
        @Confluence.ButtonTrash("", name : Model.Name + "-removeSubindicator")
    </span>
}

@helper LabelRequered(string label, bool languageRequired)
{
    @Localization.GetText(label)
    if(languageRequired)
    {
        @Confluence.LabelAsterisk()
    }
}






<div class="row mb16">
    <div class="col-md-12">

        @if(Model.SubTitle)
        {
            @Confluence.LabelSubTitleGroup(Localization.GetText(Model.TitleKey))
        }
        else
        {
            @Confluence.LabelTitleGroup(Localization.GetText(Model.TitleKey))
        }


        @if(!string.IsNullOrWhiteSpace(Model.DescriptionKey))
        {
            @Confluence.Label(Localization.GetText(Model.DescriptionKey))
        }
    </div>
</div>

<div class="row">
    <div class="col-md-12">

        @Html.Partial("Controls/DataTable", config)

    </div>
</div>

<div class="row mb20">
    <div class="col-md-12 mt20 text-center">
        @Confluence.ButtonAddNewRows(Localization.GetText(Model.NewButtonKey), Model.Name, name : Model.Name + "-newSubindicator")
    </div>
</div>

@Html.ScriptBlock(
    @<script type="text/javascript">
        registerCallback(function () {

            function customEnableContainer(container) {
                var inputs = container.find('input, select, textarea');

                inputs.removeAttr('disabled');

                destroyParsley();
                initParsley();
                destroyParsley();
                initParsley();
            }

            function addAttributesToInputs(container, attributeName, attributeValue) {
                var inputs = container.find('input, select, textarea');
                inputs.attr(attributeName, attributeValue);
            }

            $(document).on('click', '[name="@(Model.Name + "-newSubindicator")"]', function (e) {
                var source = $(this);
                var newId = source.GenerateNewId();
                var table = $('#@Model.Name');
                var trToClone = table.find('tbody tr:first');
                var newTr = trToClone.clone(false);

                newTr.appendTo(table.find('tbody'));
                newTr.removeClass('template');
                newTr.removeClass('hide');
                newTr.attr('data-id', String.format('new-{0}', newId));

                customEnableContainer(newTr);
            });

            $(document).on('click', '[name="@(Model.Name + "-removeSubindicator")"]', function (e) {
                var source = $(this);
                var tr = source.closest('tr');
                tr.remove();
            });
        });
    </script>
                            )
