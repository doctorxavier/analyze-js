@using IDB.MVCControls.General.Helpers
@using IDB.Presentation.MVC4.Models.Repeater
@using IDB.MW.Application.IndicatorsModuleNew.ViewModels.Core
@using IDB.Presentation.MVC4.General
@using IDB.MW.Application.IndicatorsModuleNew.Enums

@model TechnicalFieldViewModel
@{
    var options = new List<SelectListItem>()
    {
        new SelectListItem()
        {
            Text = Localization.GetText("IM.Yes"),
            Value = "true"
        },
        new SelectListItem()
        {
            Text = Localization.GetText("IM.No"),
            Value = "false"
        }
    };


}

@if(Model.TechnicalFieldTemplateId == 0)
{
    <div class="row mb20">

        <div class="col-md-4">
            @Confluence.LabelsGroup(Localization.GetText("IM.EditReadTemplates.IndicatorTemplate.TechnicalFields.FieldName"),
             Confluence.InputText(Model.Name, "technicalFieldName", maxLength : 140, required : true, dataAttributes : new Dictionary<string, string>() { { "id", Model.TechnicalFieldTemplateId.ToString() } }, width : "100%"),
             false)

        </div>

        <div class="col-md-1 trashButtonExtension">
            @IndicatorCommon.LabelsGroup(new HtmlString("&nbsp;"), Confluence.ButtonTrash(null, name : "deleteTF"), asterisk : false, styleContent : false)
        </div>

        <div class="col-md-2 disableExtension">

            @IndicatorCommon.LabelsGroup(new HtmlString("&nbsp;"), Confluence.InputCheckbox(false, name : "IsActive", label : Localization.GetText("Common.Disabled")), asterisk : false, styleContent : false)

        </div>
        <div class="col-md-2 typeExtension" data-typetf-container="true">

            @IndicatorCommon.LabelsGroup(new HtmlString("&nbsp;"), GetRadioTextDropDown(), asterisk : false, styleContent : false)

        </div>


    </div>
}
else
{
    <div class="row mb20">
        <div class="col-md-4">
            @Confluence.LabelsGroup(Localization.GetText("IM.EditReadTemplates.IndicatorTemplate.TechnicalFields.FieldName"),
             Confluence.InputText(Model.Name, "technicalFieldName", maxLength : 140, required : true, dataAttributes : new Dictionary<string, string>() { { "id", Model.TechnicalFieldTemplateId.ToString() } }, width : "100%"),
             false)

        </div>

        <div class="col-md-1 trashButtonExtension">
            @if(Model.IsDraft)
            {
                @IndicatorCommon.LabelsGroup(new HtmlString("&nbsp;"), Confluence.ButtonTrash(null, name : "deleteTF"), asterisk : false, styleContent : false)
            }
        </div>

        <div class="col-md-2">

            @IndicatorCommon.LabelsGroup(new HtmlString("&nbsp;"), contentAlways : Confluence.InputCheckbox(!Model.IsActive, "IsActive", label : Localization.GetText("Common.Disabled")), asterisk : false, styleContent : false)

        </div>

        <div class="col-md-2 typeExtension">
            @IndicatorCommon.LabelsGroup(new HtmlString("&nbsp;"), GetRadioTextDropDown(Model.Type, Model.TechnicalFieldTemplateId), asterisk : false, styleContent : false)
        </div>

    </div>
}

@helper GetInputRadioEnableDisable(string isActiveName, bool isTemplate)
{
    @Confluence.InputRadioButton("true", isActiveName, label : Localization.GetText("IM.EditReadTemplates.IndicatorTemplate.TechnicalFields.Enable"),
                isChecked : !isTemplate && Model.IsActive, htmlClass : "radio-button-enable",
                dataAttributes : new Dictionary<string, string>() { { "id", Model.TechnicalFieldTemplateId.ToString() } })
    <br />


    @Confluence.InputRadioButton("false", isActiveName, label : Localization.GetText("IM.EditReadTemplates.IndicatorTemplate.TechnicalFields.Disable"),
                isChecked : !isTemplate && !Model.IsActive,
                dataAttributes : new Dictionary<string, string>() { { "id", Model.TechnicalFieldTemplateId.ToString() } })

}

@helper GetRadioTextDropDown()
{
    @Confluence.InputRadioButton("text", "typeTF{0}", label : Localization.GetText("IM.EditReadTemplates.IndicatorTemplate.TechnicalFields.TextField"))

    <br />

    @Confluence.InputRadioButton("dropdown", "typeTF{0}", label : Localization.GetText("IM.EditReadTemplates.IndicatorTemplate.TechnicalFields.DropDown"))
}

@helper GetRadioTextDropDown(TechnicalFieldTypeEnum type, int id)
{


    @Confluence.InputRadioButton("text", "typeTFValue-" + id.ToString(), isChecked : ( type == TechnicalFieldTypeEnum.Text ), label : Localization.GetText("IM.EditReadTemplates.IndicatorTemplate.TechnicalFields.TextField"), disabled : !Model.IsDraft)

    <br />

    @Confluence.InputRadioButton("dropdown", "typeTFValue-" + id.ToString(), isChecked: (type == TechnicalFieldTypeEnum.Bool), label: Localization.GetText("IM.EditReadTemplates.IndicatorTemplate.TechnicalFields.DropDown"), disabled: !Model.IsDraft)
}
