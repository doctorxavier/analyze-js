@using IDB.MW.Application.IndicatorsModuleNew.ViewModels.Core
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Application.IndicatorsModuleNew.Enums

@model List<TechnicalFieldViewModel>

<div class="grouping-section">
    @{
        var technicalFieldActive = Model.Where(x => x.IsActive);
    }
    <div class="col-md-3 lineGrayRight">
        @foreach(var field in technicalFieldActive.Where((x, i) => ( i % 2 == 0 )))
        {
            @DrawTechnicalField(field)
        }
    </div>
    <div class="col-md-3 ml16">

        @foreach(var field in technicalFieldActive.Where((x, i) => ( i % 2 == 1 )))
        {
            @DrawTechnicalField(field)
        }

    </div>
</div>

@helper DrawTechnicalField(TechnicalFieldViewModel field)
{
    var options = new List<SelectListItem>()
    {
        new SelectListItem()
        {
            Text = Localization.GetText("IM.Yes"),
            Value = "true"
        },
        new SelectListItem()
        {
            Text = Localization.GetText("IM.No"),
            Value = "false"
        }
    };

    HelperResult value = Confluence.InputText(field.Value, "technicalFieldValue", required : false, maxLength : 300, dataAttributes : new Dictionary<string, string>() { { "id", field.TechnicalFieldTemplateId.ToString() } });
    if(field.Type == TechnicalFieldTypeEnum.Bool)
    {
        value = Confluence.InputDropDown(field.Value, "technicalFieldValue", required : false, elements : options, showEmptyOption : true, dataAttributes : new Dictionary<string, string> { { "id", field.TechnicalFieldTemplateId.ToString() } });
    }

    <div class="col-md-12 lblcontent">
        <label class="labelNormal">@field.Name</label>
    </div>

    <div class="col-md-12 lblvalue">
        @value
    </div>
}