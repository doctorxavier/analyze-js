@using System.Globalization

@using IDB.MW.Application.IndicatorsModuleNew.ViewModels.Core.EditIndicators
@using IDB.MW.Application.IndicatorsModuleNew.ViewModels.Fund
@using IDB.MW.Infrastructure.Configuration
@using IDB.MVCControls.General.Helpers
@using IDB.Presentation.MVC4.Areas.Indicators.Models

@model EditIndicatorPageViewModel<FundBasicDataViewModel>

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDate = appSettings.FormatDate;
    var expRegDate = appSettings.ValidationDataPickerExpReg;

    bool hasExpired = ( Model.Indicator.Common.ExpirationDate.HasValue && ( Model.Indicator.Common.ExpirationDate.Value < DateTime.Today ) );
}


@if(Model.Indicator.Common.IndicatorId == 0)
{
    <div class="row mb16">
        <div class="col-md-12">
            @Confluence.LabelTitleGroup(Localization.GetText("IM.EditReadIndicator.BasicData.ChooseTemplate"))
        </div>
    </div>

    <div class="row mb20 font-body">
        <div class="col-md-4">
            @Confluence.InputDropDown(Model.Indicator.Common.TemplateVersionId.ToString(), name : "indicatorTemplate", elements : ViewBag.indicatorTemplateList, showEmptyOption : true, required : true, htmlClassElement : "dropDownContent")
        </div>
    </div>
}
else
{
    <div class="row mb16">
        <div class="col-md-12">
            @Confluence.LabelTitleGroup(Localization.GetText("IM.EditReadIndicator.BasicData.TemplateVersion"))
        </div>
    </div>

    <div class="row mb20 font-body">
        <div class="col-md-4">
            @Confluence.LabelGetDropDown(Model.Indicator.Common.TemplateVersionId, ViewBag.indicatorTemplateList, bold : false)
        </div>
    </div>
}

<div class="row mb20">
    <div class="col-md-12">
        @Confluence.LabelTitleGroup(Localization.GetText("IM.EditReadIndicator.BasicData.Relationship.Title"))
    </div>
</div>

<div class="row mb20">
    <div class="col-md-4">
        <div class="row mb16">
            <div class="col-md-12">
                @Confluence.InputCheckbox(( hasExpired ? false : Model.Indicator.Specific.IsActive ), "isActive", label : Localization.GetText("IM.EditReadIndicator.BasicData.Acitive"))
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Confluence.Label(Localization.GetText("IM.EditReadIndicator.BasicData.AcitiveInstructionsCheckedIndicator"))
            </div>
        </div>
    </div>
</div>



<div class="row mb20">
    <div class="col-md-12">
        @Confluence.LabelTitleGroup(Localization.GetText("IM.EditReadIndicator.IndicatorProfile.Title"))
    </div>
</div>

<div class="grouping-section">
    <div class="col-md-6_5">


        <div class="col-md-12">
            <label class="lgTit">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.FundIndicatorName")</label>
        </div>

        <div class="col-md-12 lblcontent">
            <label class="labelNormal">@Localization.GetText("Common.Languaje.English")</label>
            <span class="asteriskColor">*</span>
        </div>

        <div class="col-md-12 lblvalue">
            @Confluence.InputText(Model.Indicator.Common.IndicatorNameEn, "indicatorNameEn", maxLength : 300, required : true)
        </div>

        <div class="col-md-12 lblcontent">
            <label class="labelNormal">@Localization.GetText("Common.Languaje.Spanish")</label>
            <span class="asteriskColor">*</span>
        </div>
        <div class="col-md-12 lblvalue">
            @Confluence.InputText(Model.Indicator.Common.IndicatorNameEs, "indicatorNameEs", maxLength : 300, required : true)
        </div>
        <div class="col-md-12 lblcontent">
            <label class="labelNormal">@Localization.GetText("Common.Languaje.French")</label>

        </div>
        <div class="col-md-12 lblvalue">
            @Confluence.InputText(Model.Indicator.Common.IndicatorNameFr, "indicatorNameFr", maxLength : 300, required : false)
        </div>
        <div class="col-md-12 lblcontent">
            <label class="labelNormal">@Localization.GetText("Common.Languaje.Portuguese")</label>

        </div>
        <div class="col-md-12 lblvalue">
            @Confluence.InputText(Model.Indicator.Common.IndicatorNamePt, "indicatorNamePt", maxLength : 300, required : false)
        </div>

    </div>
</div>

<div class="grouping-section">
    <div class="col-md-3 lineGrayRight">


        <div class="row1">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.Fund")</label>
                <span class="asteriskColor">*</span>
            </div>
            <div class="col-md-12 lblvalue">
                @Confluence.InputDropDown(Model.Indicator.Specific.FundId.ToString(), name : "fund", elements : ViewBag.FundList, showEmptyOption : true, required : true)
            </div>

        </div>

        <div class="row2">

            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.Theme")</label>
                <span class="asteriskColor">*</span>
            </div>
            <div class="col-md-12 lblvalue">
                @(Html.MultiDropDown("theme")
                        .Disable(false)
                        .Items(ViewBag.ThemeList)
                        .CanSelectGroup()
                        .SelectedItems(Model.Indicator.Specific.ThemeIds)
                        .AddAttributes("required", "required"))
            </div>

        </div>

        <div class="row3">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.UnitMeasure")</label>
                <span class="asteriskColor">*</span>
            </div>

            <div class="col-md-12 lblvalue">
                @Confluence.InputDropDown(Model.Indicator.Common.UnitMeasureId.ToString(), name : "unitMeasure", elements : ViewBag.UnitOfMeasureList, showEmptyOption : true, required : true)
            </div>

        </div>

    </div>

    <div class="col-md-3 ml16">
        <div class="row1">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.IndicatorNumber")</label>
                <span class="asteriskColor">*</span>
            </div>
            <div class="col-md-12 lblvalue">
                @Confluence.InputText(Model.Indicator.Common.IndicatorNumber, "indicatorNumber", required : true)
            </div>
        </div>

        <div class="row2">

            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.EffectiveDate")</label>
                <span class="asteriskColor">*</span>
            </div>
            <div class="col-md-12 lblvalue">
                @Confluence.InputDatePicker(Model.Indicator.Common.EffectiveDate, "effectiveDate", expReg : expRegDate, format : formatDate, required : true,
                                                           dataAttributes : new Dictionary<string, string> { { "parsley-lessOrEqualDate", "[name=expirationDate]" }, { "parsley-lessOrEqualDate-message", @Localization.GetText("IM.EditReadIndicator.IndicatorProfile.EffectiveDate.RangeValidation") } })
            </div>

        </div>

        <div class="row3">

            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.ExpirationDate")</label>
                <span class="asteriskColor">*</span>
            </div>
            <div class="col-md-12 lblvalue">
                @{
                    var parsleyConstraint = new Dictionary<string, string> { { "parsley-greaterOrEqualDate", "[name=effectiveDate]" },
                                                         { "parsley-greaterOrEqualDate-message", Localization.GetText("IM.EditReadIndicator.IndicatorProfile.ExpirationDate.RangeValidation") },
                                                         { "parsley-onOrAfterDate", "true" },
                                                         { "parsley-onOrAfterDate-message", Localization.GetText("IM.EditReadIndicator.IndicatorProfile.ExpirationDate.ExpiredCreation") }};
                    if(hasExpired)
                    {
                        parsleyConstraint.Remove("parsley-onOrAfterDate");
                        parsleyConstraint.Remove("parsley-onOrAfterDate-message");
                    }
                }
                @Confluence.InputDatePicker(Model.Indicator.Common.ExpirationDate, "expirationDate", expReg : expRegDate, format : formatDate, required : true,
                                                              dataAttributes : parsleyConstraint)
            </div>

        </div>

    </div>
</div>
