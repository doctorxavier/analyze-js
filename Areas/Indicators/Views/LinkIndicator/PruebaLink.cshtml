@using IDB.MW.Application.IndicatorsModuleNew.ViewModels.LinkPredefinedIndicator

<div class="col-md-6">
    <h4>
        Generacionde la Partial View con el Popup
    </h4>
    <p>
        Para generar la Partial View haremos uso del metodo <b>GetLinkIndicatorModel</b> del servicio que implementa <b>ILinkPredefinedIndicatorService</b>. Los parametros que debemos pasarle son los siguientes:
        <ul>
            <li>
                <b>LinkIndicatorTypeEnum</b> type: Se usa para definir que popup debe levantar (establece la configuracion). Los valores posibles son:
                <ul>
                    <li><b>Outcomes</b>: Configuracion de "Results Matrix LOAN & TC -> Outcomes UI"</li>
                    <li><b>Impacts</b>: Configuracion de "Results Matrix LOAN -> Impacts UI"</li>
                    <li><b>Outputs</b>: Configuracion de "Results Matrix LOAN -> Outputs UI"</li>
                    <li><b>ResultMatrix</b>: Configuracion de "Country Strategy -> Results Matrix UI"</li>
                    <li><b>CountryIndicators</b>: Configuracion de "Indicators Administration -> Country Indicators"</li>
                </ul>
            </li>
            <li><b>bool</b> showButton: Indica si debe mostrar o no el boton por defecto de levantar el popup.</li>
            <li><b>string</b> name: Nombre del componente para distinguir los eventos de los lanzados por otros posibles Link Indicator de la pantalla.</li>
        </ul>
        <br />
        Con esto obtenemos el Modelo que define nuestro <b>popup</b>, es del tipo <b>LinkPredefinesIndicatorViewModel</b>.<br />
        Una vez tenemos el modelo debemos generar el html, para ello usamos:<br />
    </p>
    <h4>
        Botones generados por la Partial View
    </h4>

    <p>
        Hemos generado los popup mediante un ViewModel.<br />
        En la propiedad Name hemos puesto "Outcome" para el primero y "Result" para el segundo.<br />
        <br />
        Cuando pulsemos el boton Link, si tenemos un Indicador seleccionado invocara la funcion "Outcome<b>LinkItems</b>" para el primero y la funcion "Result<b>LinkItems</b>" para el segundo. Como se puede observar, el nombre de la funcion invocada es el nombre que indicamos en el modelo seguido de <b>LinkItems</b>.<br />
        Los parametros que recibe esta funcion son en primer lugar el boton que abrió el popup, y en segundo lugar la informacion del elemento seleccionado:
        <ul>
            <li>Id del Indicador: value.IndicatorId</li>
            <li>Numero del Indicador: value.IndicatorNumber</li>
            <li>Nombre del Indicador: value.IndicatorName</li>
            <li>Unidad de Medida: value.UnitOfMeasure</li>
        </ul>
        Con esa informacion podemos generar datos para mostrar en el HTML o rellenar inputs para subir los valores al servidor.
    </p>

    <br />
    <div>Outcome</div>
    @Html.Partial("Controls/Indicators/LinkToPredefinedIndicator", (LinkPredefinesIndicatorViewModel) ViewBag.Outcome)
    <div>Result</div>
    @Html.Partial("Controls/Indicators/LinkToPredefinedIndicator", (LinkPredefinesIndicatorViewModel) ViewBag.Result)


    <h4>
        Ejemplos de elemetos para levantar el popup sin que sean los botones por defecto
    </h4>

    <p>
        Partimos de el hecho de tener en la pantalla ya el contenido generado por la Partial View.<br />
        Normalmente habremos indicado que los botones por defecto esten ocultos, pero no es necesario. En este ejemplo usaremos los del apartado anterior.<br />
        <br />
        Para poder añadir la funcion a los elementos que queremos que levanten el popup debemos configurarlo. Para ello deberemos indicar desde jquery ejecutar la funcion <b>LinkModalButton</b> con las opciones de configuracion.<br />
        <br />
        <b>Configuracion por parametro:</b><br />
        <br />
        <ul>
            <li>
                Event: Evento que provoca levantar el popup. Por defecto "click"
            </li>
            <li>
                LinkModalId: Id del modal que queremos levantar (no hay que ponerle el caracter #). Ejemplo "Outcome-link-modal"
            </li>
            <li>
                LinkModalValueId: Lista de posibles valores y el Id del modal asociado. Si estan rellena tanto esta configuracion como <b>LinkModalId</b> se tomara en cuenta unicamente <b>LinkModalId</b>. Ejemplo:<br />
                [{LinkModalId: "Outcome-link-modal", Value: "outcome"}, {LinkModalId: "Result-link-modal", Value: "result"}]
            </li>
        </ul>
        <br />
        <b>Configuracion por attrbiutos:</b><br />
        <br />
        <ul>
            <li>
                data-link-modal-laucher-event: Evento que provoca levantar el popup. Por defecto "click" (Es opcional)
            </li>
            <li>
                data-link-modal-laucher: Este parametro seria obligatorio si estamos inicializando usando este metodo. Su funcion es determinar el modal a levantar. Tiene dos formatos posibles:
                <ul>
                    <li>
                        Texto simple: Equivalente a LinkModalId. Ejemplo data-link-modal-laucher="Outcome-link-modal"
                    </li>
                    <li>
                        Texto con separadores (, y ;): Equivalente a LinkModalValueId. <br />
                        Usaremos el <b>; punto y coma</b> para separar los distintos pares de "valor / id modal".<br />
                        Usaremos la <b>, coma</b> para separar el valor del id del modal.<br />
                        Ejemplo: data-link-modal-laucher="outcome,Outcome-link-modal;result,Result-link-modal"
                    </li>
                </ul>
            </li>
        </ul>
        <br />

    </p>
    @{
        var elementos = new List<SelectListItem>()
    {
        new SelectListItem()
        {
            Text = "Outcome",
            Value = "outcome"
        },
        new SelectListItem()
        {
            Text = "Result",
            Value = "result"
        }
    };

        var atributosInput = new Dictionary<string, string>()
    {
        { "link-modal-laucher-event", "change" },
        { "link-modal-laucher", "outcome,Outcome-link-modal;result,Result-link-modal" },
    };
    }
    <div>
        <h6>
            Combo configurado por attributos
        </h6>
        <div>
            @Confluence.InputDropDown("", "dropdownAttributos", elementos, dataAttributes : atributosInput)
        </div>

        <h6>
            Combo configurado por opciones
        </h6>
        <div>
            @Confluence.InputDropDown("", "dropdownOpciones", elementos)
        </div>

        <h6>
            Span configurado por attributos usando el evento Click (por defecto). Levanta el popup de Outcome
        </h6>
        <div>
            <span data-name="spanOutcome" data-link-modal-laucher="Outcome-link-modal">
                Span que levanta Outcome
            </span>
        </div>

        <h6>
            Span configurado por attributos usando el evento Click. Levanta el popup de Result
        </h6>
        <div>
            <span data-name="spanResult" data-link-modal-laucher-event="click"
                  data-link-modal-laucher="Result-link-modal">
                Span que levanta Result
            </span>
        </div>

        <h6>
            Botones configurados por opciones que levantan el popup Outcome y Result respectivamente.
        </h6>
        @Confluence.ButtonBlue("Outcome", "outcome")
        @Confluence.ButtonBlue("Result", "result")
    </div>

    <div>
        El codigo de inicializacion usado es el siguiente:

        <pre>
            $('[data-link-modal-laucher]').LinkModalButton();
            $('[name="dropdownOpciones"]').LinkModalButton(
            {
                Event: "change"
                , LinkModalValueId: [
                    { LinkModalId: "Outcome-link-modal", Value: "outcome" },
                    { LinkModalId: "Result-link-modal", Value: "result" }]
            });
            $('[name="outcome"]').LinkModalButton(
            {
                Event: "click"
                , LinkModalId: "Outcome-link-modal"
            });
            $('[name="result"]').LinkModalButton(
            {
                LinkModalId: "Result-link-modal"
            });
</pre>
    </div>
</div>
<div class="col-md-6" style="top: 0; position: fixed; right: 0; height: 100%; overflow-y: auto;">

    <h4>
        Resultado de pulsar Link.
    </h4>

    <h5>
        Elementos seleccionados Outcome
    </h5>
    <ul id="outcomeList"></ul>
    <br />
    <h5>
        Elementos seleccionados Result
    </h5>
    <ul id="resultList"></ul>

</div>


@section scripts{
    <script type="text/javascript">

        registerCallback(function () {
            //We begin the elements that are configured by attributes..
            $('[data-link-modal-laucher]').LinkModalButton();

            $('[name="dropdownOpciones"]').LinkModalButton(
            {
                Event: "change"
                , LinkModalValueId: [
                    { LinkModalId: "Outcome-link-modal", Value: "outcome" },
                    { LinkModalId: "Result-link-modal", Value: "result" }]
            });

            $('[name="outcome"]').LinkModalButton(
            {
                Event: "click"
                , LinkModalId: "Outcome-link-modal"
            });

            $('[name="result"]').LinkModalButton(
            {
                LinkModalId: "Result-link-modal"
            });
        });


        function OutcomeLinkItems(sourceOpen, value) {

            //In this case we are only going to add a text depending on the button.
            var name = sourceOpen.attr('name');
            if (name == null) {
                name = sourceOpen.attr('data-name');
            }
            var additionalText = String.format('{0}, name={1}', sourceOpen[0].tagName, name);

            var list = $('#outcomeList');
            var li = $('<li>');
            li.html('Indicator Id: ' + value.IndicatorId + '. Insertado por: ' + additionalText);
            li.appendTo(list);

            var ul = $('<ul>');
            ul.appendTo(li);
            var li2 = $('<li>')
            li2.appendTo(ul);
            li2.html('Indicator Number: ' + value.IndicatorNumber);

            li2 = $('<li>')
            li2.appendTo(ul);
            li2.html('Indicator Name: ' + value.IndicatorName);

            li2 = $('<li>')
            li2.appendTo(ul);
            li2.html('Unit of Measure: ' + value.UnitOfMeasure);
        }

        function ResultLinkItems(sourceOpen, value) {
            var additionalText = String.format('{0}, name={1}', sourceOpen[0].tagName, sourceOpen.attr('name'));
            var list = $('#resultList');
            var li = $('<li>');
            li.html('Indicator Id: ' + value.IndicatorId + '. Insertado por: ' + additionalText);
            li.appendTo(list);

            var ul = $('<ul>');
            ul.appendTo(li);
            var li2 = $('<li>')
            li2.appendTo(ul);
            li2.html('Indicator Number: ' + value.IndicatorNumber);

            li2 = $('<li>')
            li2.appendTo(ul);
            li2.html('Indicator Name: ' + value.IndicatorName);

            li2 = $('<li>')
            li2.appendTo(ul);
            li2.html('Unit of Measure: ' + value.UnitOfMeasure);
        }
    </script>
}