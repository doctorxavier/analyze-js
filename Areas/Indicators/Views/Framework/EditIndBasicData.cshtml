@using System.Globalization

@using IDB.MW.Infrastructure.Configuration
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Application.IndicatorsModuleNew.ViewModels.Core.EditIndicators
@using IDB.MW.Application.IndicatorsModuleNew.ViewModels.Framework
@using IDB.Presentation.MVC4.Areas.Indicators.Models
@using IDB.Presentation.MVC4.Helpers
@using IDB.MW.Infrastructure.SecurityService.Enums

@model EditIndicatorPageViewModel<FWBasicDataViewModel>

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDate = appSettings.FormatDate;
    var expRegDate = appSettings.ValidationDataPickerExpReg;

    var hasTemplatePermission = MvcHelpers.CheckRole(ViewBag.Permissions, ActionEnum.FWIndicatorTemplateWritePermission);

    bool hasExpired = (Model.Indicator.Common.ExpirationDate.HasValue && (Model.Indicator.Common.ExpirationDate.Value < DateTime.Today));

}

@if (Model.Indicator.Common.IndicatorId == 0)
{
    <div class="row mb16">
        <div class="col-md-12">
            @Confluence.LabelTitleGroup(Localization.GetText("IM.EditReadIndicator.BasicData.ChooseTemplate"))
        </div>
    </div>

    <div class="row mb20 font-body">
        <div class="col-md-4">
            @Confluence.InputDropDown(Model.Indicator.Common.TemplateVersionId.ToString(), name: "indicatorTemplate", elements: ViewBag.indicatorTemplateList, showEmptyOption: true, required: true, htmlClassElement: "dropDownContent")
        </div>
    </div>
}
else
{
    <div class="row mb16">
        <div class="col-md-12">
            @Confluence.LabelTitleGroup(Localization.GetText("IM.EditReadIndicator.BasicData.TemplateVersion"))
        </div>
    </div>

    <div class="row mb20 font-body">
        <div class="col-md-4">
            @Confluence.LabelGetDropDown(Model.Indicator.Common.TemplateVersionId, ViewBag.indicatorTemplateList, bold: false)
        </div>
    </div>
}


<div class="row mb20">
    <div class="col-md-12">
        @Confluence.LabelTitleGroup(Localization.GetText("IM.EditReadIndicator.BasicData.Relationship.Title"))
    </div>
</div>

<div class="row">
    @{
        var checkBoxLikeRadio = new Dictionary<string, string>() { { "role-radio", "contribution/alignment" } };
        var atLeastOneChecked = new Dictionary<string, string>() { { "parsley-atLeastOneChecked", "[data-role-radio=\"contribution/alignment\"]" },
                                                                   {"inputHide-atLeastOneChecked","contribution/alignment"}
                                                                 };

    }
    <div class="col-md-4 mb16">
        <div class="row mb16">
            <div class="col-md-12">
                @Confluence.InputCheckbox(( hasExpired ? false : Model.Indicator.Specific.IsActive ), "isActive", label : Localization.GetText("IM.EditReadIndicator.BasicData.Acitive"))
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                @Confluence.Label(Localization.GetText("IM.EditReadIndicator.BasicData.AcitiveInstructionsCheckedIndicator"))
            </div>
        </div>

    </div>
    <div class="col-md-2 mb16">
        <div class="row mb16">
            <div class="col-md-12">
                @Confluence.InputCheckbox(Model.Indicator.Specific.IsContribution, "isContribution", label: Localization.GetText("IM.EditReadIndicator.BasicData.Relationship.Contribution"), dataAttributes: checkBoxLikeRadio)
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Confluence.Label(Localization.GetText("IM.EditReadIndicator.BasicData.Relationship.InsturctionsContribution"))
            </div>
        </div>
    </div>

    <div class="col-md-2 mb16">
        <div class="row mb16">
            <div class="col-md-12">
                @Confluence.InputCheckbox(Model.Indicator.Specific.isAlignment, "isAlignment", label : Localization.GetText("IM.EditReadIndicator.BasicData.Relationship.Alignment"), dataAttributes : checkBoxLikeRadio)
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Confluence.Label(Localization.GetText("IM.EditReadIndicator.BasicData.Relationship.InsturctionsAlignment"))
            </div>
        </div>
    </div>
    <div class="col-md-2 mb16">
        <div class="row mb16">
            <div class="col-md-12">
                @Confluence.InputCheckbox(Model.Indicator.Specific.IsStrategicAlignment, "isStrategicAlignment", label: Localization.GetText("IM.EditReadIndicator.BasicData.Relationship.StrategicAlignment"), dataAttributes: checkBoxLikeRadio, disabled: !hasTemplatePermission)
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Confluence.Label(Localization.GetText("IM.EditReadIndicator.BasicData.Relationship.InsturctionsStrategicAlignment"))
            </div>
        </div>
    </div>
    <div class="col-md-2 mb16">
        <div class="row mb16">
            <div class="col-md-12">
                @Confluence.InputCheckbox(
                    isChecked: Model.Indicator.Specific.IsRegionalContext,
                    name: "isRegionalContext",
                    label: Localization.GetText("IM.EditReadIndicator.BasicData.Relationship.RegionalContext"),
                    dataAttributes: checkBoxLikeRadio,
                    disabled: !hasTemplatePermission)
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Confluence.Label(Localization.GetText("IM.EditReadIndicator.BasicData.Relationship.InstructionsRegionalContext"))
            </div>
        </div>
    </div>
</div>

<div class="row mb20">
    <div class="col-md-4 mb16">
        <div class="row mb16">
            <div class="col-md-12">
                @Confluence.InputCheckbox(Model.Indicator.Specific.IsRMIndicatorRequirement, "isRMIndicatorRequirement", label: Localization.GetText("SA.IndicatorDetails.RMIndicatorRequirement.Title"), disabled: !Model.Indicator.Specific.IsStrategicAlignment)
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Confluence.Label(Localization.GetText("SA.IndicatorDetails.RMIndicatorRequirement.Description"))
            </div>
        </div>
    </div>
    <div class="col-md-9 mb16">
        @Confluence.InputText("hide", "inputhide", htmlClass: "hide", dataAttributes: atLeastOneChecked)
    </div>
</div>

<div class="row mb20">
    <div class="col-md-12">
        @Confluence.LabelTitleGroup(Localization.GetText("IM.EditReadIndicator.BasicData.Mapping.Title"))
    </div>
</div>

<div class="row mb16">
    <div class="col-md-4">
        @Confluence.InputCheckbox(
            isChecked: Model.Indicator.Specific.IsLinkToCS,
            name: "isLinkToCS",
            label: Localization.GetText("IM.EditReadIndicator.BasicData.Mapping.LinkCountryStrategyObjective"))
    </div>
</div>

<div class="row mb20">

    <div class="col-md-4">
        @Confluence.Label(Localization.GetText("IM.EditReadIndicator.BasicData.Relationship.InsturctionsLink"))
    </div>
</div>

<div class="row mb20">
    <div class="col-md-12">
        @Confluence.LabelTitleGroup(Localization.GetText("IM.EditReadIndicator.IndicatorProfile.Title"))
    </div>
</div>

<div class="grouping-section">
    <div class="col-md-6_5">

        <div class="col-md-12">
            <label class="lgTit">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.IndicatorName")</label>
        </div>

        <div class="col-md-12 lblcontent">
            <label class="labelNormal">@Localization.GetText("Common.Languaje.English")</label>
            <span class="asteriskColor">*</span>
        </div>

        <div class="col-md-12 lblvalue">
            @Confluence.InputText(Model.Indicator.Common.IndicatorNameEn, "indicatorNameEn", maxLength: 300, required: true)
        </div>

        <div class="col-md-12 lblcontent">
            <label class="labelNormal">@Localization.GetText("Common.Languaje.Spanish")</label>
            <span class="asteriskColor">*</span>
        </div>
        <div class="col-md-12 lblvalue">
            @Confluence.InputText(Model.Indicator.Common.IndicatorNameEs, "indicatorNameEs", maxLength: 300, required: true)
        </div>
        <div class="col-md-12 lblcontent">
            <label class="labelNormal">@Localization.GetText("Common.Languaje.French")</label>
            <span class="asteriskColor">*</span>
        </div>
        <div class="col-md-12 lblvalue">
            @Confluence.InputText(Model.Indicator.Common.IndicatorNameFr, "indicatorNameFr", maxLength: 300, required: true)
        </div>
        <div class="col-md-12 lblcontent">
            <label class="labelNormal">@Localization.GetText("Common.Languaje.Portuguese")</label>
            <span class="asteriskColor">*</span>
        </div>
        <div class="col-md-12 lblvalue">
            @Confluence.InputText(Model.Indicator.Common.IndicatorNamePt, "indicatorNamePt", maxLength: 300, required: true)
        </div>

    </div>
</div>

<div class="grouping-section">
    <div class="col-md-3 lineGrayRight">
        <div class="row1">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.UnitMeasure")</label>
                <span class="asteriskColor">*</span>
            </div>

            <div data-section="unitMeasure" class="col-md-12 lblvalue">
                @Confluence.InputDropDown(Model.Indicator.Common.UnitMeasureId.ToString(), name: "unitMeasure", elements: ViewBag.UnitMeasureList, showEmptyOption: true, required: true)
            </div>
        </div>

        <div class="row2">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.IndicatorNumber")</label>
                <span class="asteriskColor">*</span>
            </div>
            <div class="col-md-12 lblvalue">
                @Confluence.InputText(Model.Indicator.Common.IndicatorNumber, "indicatorNumber", required: true)
            </div>
        </div>


        <div class="row3">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.EffectiveDate")</label>
                <span class="asteriskColor">*</span>
            </div>
            <div class="col-md-12 lblvalue">

                @Confluence.InputDatePicker(Model.Indicator.Common.EffectiveDate, "effectiveDate", expReg: expRegDate, format: formatDate, required: true,
                                                                               dataAttributes: new Dictionary<string, string> { { "parsley-lessOrEqualDate", "[name=expirationDate]" },
                                                                                                                                 { "parsley-lessOrEqualDate-message", @Localization.GetText("IM.EditReadIndicator.IndicatorProfile.EffectiveDate.RangeValidation") } })
            </div>
        </div>



    </div>


    <div class="col-md-3 ml16">
        <div class="row1">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.TypeIndicator")</label>
                <span class="asteriskColor">*</span>
            </div>
            <div data-section="typeCRF" class="col-md-12 lblvalue">
                @Confluence.InputDropDown(Model.Indicator.Specific.TypeCRFId.ToString(), name: "typeCRFId", elements: ViewBag.TypeCRFList, showEmptyOption: true, required: true)
            </div>
        </div>

        <div class="row2">
            @{
                string labelPriorityArea = "IM.EditReadIndicator.IndicatorProfile.PriorityArea.Title";

                // ToDo Template 2012
                var templateItems = (List<SelectListItem>)ViewBag.indicatorTemplateList;
                var selectedTemplateItems = templateItems.SingleOrDefault(x => x.Value == Model.Indicator.Common.TemplateVersionId.ToString());
                var required = false;
                if ((selectedTemplateItems != null) && selectedTemplateItems.Text.Contains("2012"))
                {
                    labelPriorityArea = "IM.EditReadIndicator.IndicatorProfile.PriorityArea";
                    required = true;
                }
                // End ToDo Template 2012
                var multiDropDown = (Html.MultiDropDown("priorityAreaId")
                                    .Items(ViewBag.PriorityAreaList)
                                    .CanSelectGroup()
                                    .SelectedItems(Model.Indicator.Specific.PriorityAreaIds));

                if (required)
                {
                    multiDropDown.AddAttributes("required", "required");
                }
            }

            @Confluence.LabelsGroupExtendAlways(title: new List<IHtmlString> {
                                                                            GenerateLabelWithAterisk("priorityAreaTitle",labelPriorityArea, required)
                                                                             },
                                                        contentAlways: new List<IHtmlString>() {
                                                        GenerateDivSection("priorityArea", multiDropDown
                                                        )
                                                    }
                                               )
        </div>


        <div class="row3">
            <div class="col-md-12 lblcontent">
                <label class="labelNormal">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.ExpirationDate")</label>
                <span class="asteriskColor">*</span>
            </div>
            <div class="col-md-12 lblvalue">
                @{
                    var parsleyConstraint = new Dictionary<string, string> { { "parsley-greaterOrEqualDate", "[name=effectiveDate]" },
                                                         { "parsley-greaterOrEqualDate-message", Localization.GetText("IM.EditReadIndicator.IndicatorProfile.ExpirationDate.RangeValidation") },
                                                         { "parsley-onOrAfterDate", "true" },
                                                         { "parsley-onOrAfterDate-message", Localization.GetText("IM.EditReadIndicator.IndicatorProfile.ExpirationDate.ExpiredCreation") }};
                    if (hasExpired)
                    {
                        parsleyConstraint.Remove("parsley-onOrAfterDate");
                        parsleyConstraint.Remove("parsley-onOrAfterDate-message");
                    }
                }

                @Confluence.InputDatePicker(Model.Indicator.Common.ExpirationDate, "expirationDate", expReg: expRegDate, format: formatDate, required: true,
                                            dataAttributes: parsleyConstraint)
            </div>
        </div>
    </div>
</div>
<div class="row mt20 mb20" data-content="StrAlingImages">
    <div class="col-md-12 mb5">
        <label class="labelNormal bold">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.StrAligIndicatorImage")</label>
    </div>
    <div class="col-md-12 mb20">
        <label class="lgTit">@Localization.GetText("IM.EditReadIndicator.IndicatorProfile.StrAligIndicatorImageInstruction")</label>
    </div>
    <div class="col-md-8">
        <div class="col-md-1" style="width:30px;">
            @Confluence.InputRadioButton(ViewBag.SocialInclusion, 
            name: "strAlingmentImageAsociated", 
            required: false,
            isChecked: (Model.Indicator.Common.StrAlingImageId.HasValue ?
            Model.Indicator.Common.StrAlingImageId.ToString() == ViewBag.SocialInclusion : 
            false))
        </div>
        <div class="col-md-1">
            <span class="strSInclusionImg"></span>
        </div>
        <div class="col-md-1" style="width:30px;">
            @Confluence.InputRadioButton(ViewBag.HighProductivity,
            name: "strAlingmentImageAsociated", 
            required: false,
            isChecked: (Model.Indicator.Common.StrAlingImageId.HasValue ?
            Model.Indicator.Common.StrAlingImageId.ToString() == ViewBag.HighProductivity : 
            false))
        </div>
        <div class="col-md-1">
            <span class="strAlignHProductivityImg"></span>
        </div>
        <div class="col-md-1" style="width:30px;">
            @Confluence.InputRadioButton(ViewBag.FullEconomic,
            name: "strAlingmentImageAsociated", 
            required: false,
            isChecked: (Model.Indicator.Common.StrAlingImageId.HasValue ?
            Model.Indicator.Common.StrAlingImageId.ToString() == ViewBag.FullEconomic : 
            false))
        </div>
        <div class="col-md-1">
            <span class="strAlignFullEconomicImg"></span>
        </div>
        <div class="col-md-1" style="width:30px;">
            @Confluence.InputRadioButton(ViewBag.ClimateChange, 
            name: "strAlingmentImageAsociated", 
            required: false,
            isChecked: (Model.Indicator.Common.StrAlingImageId.HasValue ?
            Model.Indicator.Common.StrAlingImageId.ToString() == ViewBag.ClimateChange : 
            false))
        </div>
        <div class="col-md-1">
            <span class="strAlignClimateChangeImg"></span>
        </div>
        <div class="col-md-1" style="width:30px;">
            @Confluence.InputRadioButton(ViewBag.Equality, 
            name: "strAlingmentImageAsociated", 
            required: false,
            isChecked: (Model.Indicator.Common.StrAlingImageId.HasValue ?
            Model.Indicator.Common.StrAlingImageId.ToString() == ViewBag.Equality : 
            false))
        </div>
        <div class="col-md-1">
            <span class="strAlignEqualityImg"></span>
        </div>
        <div class="col-md-1" style="width:30px;">
            @Confluence.InputRadioButton(ViewBag.InstCapacity, 
            name: "strAlingmentImageAsociated",
            required: false,
            isChecked: (Model.Indicator.Common.StrAlingImageId.HasValue ?
            Model.Indicator.Common.StrAlingImageId.ToString() == ViewBag.InstCapacity : 
            false))
        </div>
        <div class="col-md-1">
            <span class="strAlignInstCapacityImg"></span>
        </div>
    </div>
</div>


@helper GetTitle(string literalLabel)
{
    @Localization.GetText(literalLabel)
}

@helper GenerateDivSection(string sectionName, IHtmlString content)
{
    <div data-section="@sectionName">
        @content
    </div>
}

@helper GenerateLabelWithAterisk(string sectionName, string text, bool asterisk)
{
    <div>
        <span data-section="@sectionName">@Localization.GetText(text)</span>
        @if (asterisk)
        {
            @Confluence.LabelAsterisk();
        }
    </div>
}
