@using IDB.Presentation.MVC4.Helpers
@model IDB.Presentation.MVC4.Areas.TCM.Models.MatrixChangesViewModel


<div data-pagemode="edit">
    <input id="hiddenGridModel" name="hiddenGridModel" type="hidden"/>
    <input id="hiddenViewModel" type="hidden" value="@PageSerializationHelper.SerializeObject(Model.MatrixChangesList)" />
</div>

<div class="mt10 mb20 text-left" id="ChangesTable">
    <table class="tableNormal endSpacing" id="gridMatrixChanges">
        <thead>
            <tr>
                <th class="w100 sort">
                    @Localization.GetText("TCM.MC.Section")
                </th>
                <th class="sort">
                    @Localization.GetText("TCM.MC.Name")
                </th>
                <th class="w130 sort">
                    @Localization.GetText("TCM.MC.TypeOfChange")
                </th>
                <th class="sort">
                    @Localization.GetText("TCM.MC.Subtype")
                </th>
                <th class="w110 sort">
                    @Localization.GetText("TCM.MC.ModifiedBy")
                </th>
                <th class="w200 sort">
                    @Localization.GetText("TCM.MC.Reasons")
                </th>
                <th class="w145 sort">
                    @Localization.GetText("TCM.MC.SubstantialFundamental")
                </th>
                <th class="w125">
                    @Localization.GetText("TCM.MC.JustificationDocument")
                </th>
                <th class="w125 sort" id="defaultSortDateField">
                    @Localization.GetText("TCM.MC.EnteredInTheSystem")
                </th>
                <th class="w125 sort">
                    @Localization.GetText("TCM.MC.AgreedWithExecutingAgency")
                </th>
                <th>
                </th>
            </tr>
        </thead>
        @if (Model.MatrixChangesList != null)
        {
            <tbody>
                @foreach (var item in Model.MatrixChangesList)
                {
                    <tr data-id='@item.MatrixChangeId'>
                        <td>
                            @Html.DisplayFor(modelItem => item.ElementTypeName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ElementName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ChangeType)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ChangeSubType)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ChangeUser)
                        </td>
                        <td class="textBreakReason">
                            <div class="rtextLabel">
                                <span>
                                    @Html.DisplayFor(modelItem => item.Reasons)
                                </span>
                            </div>
                        </td>
                        <td>
                            <div data-pagemode="read">
                                <label>@(item.IsFundamental == null ? "" : (item.IsFundamental.Value ? Localization.GetText("TCM.MC.Yes") : Localization.GetText("TCM.MC.No")))</label>
                            </div>
                            <div data-pagemode="edit">
                                @Confluence.InputDropDown(item.IsFundamental != null ? item.IsFundamental.ToString() : null, "dropdownSubstantialOrFundamental"
                                , new List<SelectListItem>
                                {
                                    new SelectListItem {Value = "True", Text = @Localization.GetText("TCM.MC.Yes")},
                                    new SelectListItem {Value = "False", Text = @Localization.GetText("TCM.MC.No")}
                                }
                                , required: false, orderAsc: false)
                            </div>
                        </td>
                        <td class="justificationDocumentColumn">
                            @Confluence.InputHidden(item.JustificationDocumentNumber, "JustificationDocumentNumber")
                            @Confluence.InputHidden(null, "JustificationDocumentName")
                            <div data-pagemode="read">
                                @if (item.JustificationDocumentNumber == null)
                                {
                                    <label>N/A</label>
                                }
                                else
                                {
                                    if (SecurityHelper.IsVisible(Model.FieldAccessList, "btnDownloadDocument"))
                                    {
                                        var secureUrl = IDB.MW.Domain.EntityHelpers.DownloadDocumentHelper.GetDocumentLink(item.JustificationDocumentNumber);

                                        <a href=@secureUrl target="_blank">
                                            @Confluence.ButtonDownload("")
                                        </a>
                                    }

                                }
                            </div>
                            <div data-pagemode="edit">
                                <label class="labelNoDocument" style="display: @(item.IsFundamental == null && item.JustificationDocumentNumber == null ? "initial" : "none")">N/A</label>
                                <div class="divDocumentButtons" style="display: @(item.JustificationDocumentNumber == null ? "none" : "initial")">
                                    @if (SecurityHelper.IsVisible(Model.FieldAccessList, "btnDownloadDocument"))
                                    {
                                        var secureUrll = IDB.MW.Domain.EntityHelpers.DownloadDocumentHelper.GetDocumentLink(item.JustificationDocumentNumber);
                                            <a href=@secureUrll target="_blank">
                                                @Confluence.ButtonDownload("")
                                            </a>
                                    }

                                    @if (SecurityHelper.IsVisible(Model.FieldAccessList, "btnDeleteDocument"))
                                    {
                                        @Confluence.ButtonTrash("", "buttonDeleteDocument", "deleteDocument", dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "btnDeleteDocument" }, { "docnumber", item.JustificationDocumentNumber } })
                                    }
                                      </div>
                                <button class="buttonUpload buttonGridUpload" style="display: @(item.IsFundamental == false && item.JustificationDocumentNumber == null ? "initial" : "none")">
                                    <span class="icon"></span>
                                </button>
                            </div>
                        </td>
                        <td>
                            @String.Format("{0:dd MMM yyyy}", item.ChangeDate)
                        </td>
                        <td>
                            @if (Model.IsRecipientExecutedTCs)
                            {
                                <div data-pagemode="read">
                                    @String.Format("{0:dd MMM yyyy}", item.AgreementDate)
                                </div>
                                <div data-pagemode="edit">
                                    @Confluence.InputDatePicker(item.AgreementDate, "datePickerAgreementDay", required: false)
                                </div>
                            }
                        </td>
                        <td>@Confluence.ButtonShowRow()</td>
                    </tr>
                    <tr data-row-parent-id='@item.MatrixChangeId'>
                        <td colspan="12">
                            <div align="left">
                                @Confluence.LabelBold(Localization.GetText("TCM.MC.Reasons"))
                                <div data-pagemode="read">
                                    @item.Reasons
                                </div>
                                <div data-pagemode="edit">
                                    @Confluence.InputTextArea(item.Reasons, "inputTxtReasons", "inputTxtReasons", width: "100%", height: "100px", required: false)
                                </div>
                                
                                @if (SecurityHelper.IsVisible(Model.FieldAccessList, "btnRemoveMatrixChange"))
                                {
                                    <div data-pagemode="edit">
                                        @if (ViewBag.MatrixChange != false)
                                        {
                                            @Confluence.ButtonTrash("", "", "deleteChange", dataAttributes: new Dictionary<string, string>
                                    {
                                        {"matrixChangeId", item.MatrixChangeId.ToString()},
                                        {"idb-fieldname", "btnRemoveMatrixChange"}
                                    })
                                        }
                                    </div>
                                }
                                
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        }
    </table>
    @if (!Model.MatrixChangesList.Any())
    {
        @Confluence.Label(Localization.GetText("TCM.MC.ChangesEmptyTable"), dataAttributes: new Dictionary<string, string>
                                    {
                                        {"name", "matrixChangesEmpty"}
                                    })
    }
</div>