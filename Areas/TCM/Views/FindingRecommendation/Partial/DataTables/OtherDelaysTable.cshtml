@using System.Activities.Statements
@using IDB.MW.Domain.Models.FindingRecomendations;
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MVCControls.General.Helpers
@using System.Globalization

@model List<IDB.MW.Domain.Models.FindingRecomendations.OtherDelayModel>

<div class="row row-header">
    <div class="col-md-12">
        
    </div>
</div>
@if (Model != null)
{
    <div class="row row-body-20">
        <div class="col-md-12">
            @{
    var config = Html.RenderDataTable(Model);
    config.Name("OtherDelaysTable")
        .PrimaryKey(m => m.OtherDelayId.ToString(CultureInfo.InvariantCulture))
        .AddPrimaryKeyToName(false)
        .Columns(columns =>
        {
            columns.Bound(c => c.OtherDelayId).EditableTemplate(@<input type="hidden" class="hide" name="OtherDelayId" value="@item.OtherDelayId.ToString()" / />).Hidden(true);


            columns.Template(c => Confluence.Label(c.NameCycle)).CssClass("w240").Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.CycleName")).CssHeaderClass("col-md-1").Persistent();


            columns.Template(c => Confluence.Label(Localization.GetText("TCM.FR.FindingsAndRecommendations.OtherDelays"))).Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.TypeOfDelay")).CssHeaderClass("col-md-1").Persistent();

            columns.Template(c => Confluence.Label(c.DelayName)).EditableTemplate(row => Confluence.InputText(row.DelayName, "OtherDelayName", 500, width: "100%"
                    , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "txtDelayName" } })).Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.Name")).CssHeaderClass("col-md-7");



            columns.Template(c => Confluence.LabelGetDropDown(c.IsSolved.ToString(), ViewBag.ListIsSolved))
                .EditableTemplate(row => Confluence.InputDropDown(row.IsSolved.ToString(), "OtherStateIsSolved", ViewBag.ListIsSolved, width: "100%"
                    , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "ddlOtherStateIsSolved" } })).Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.IssueSolved")).CssHeaderClass("col-md-1");



            columns.Template(c => Confluence.Label(String.Format("{0:dd MMM yyyy}", c.LastUpdate))).Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.LastUpdate")).CssHeaderClass("col-md-1").Persistent();

            columns.Template(c => GetRelatedExpandedButton()).Persistent().EditableTemplate(row => Confluence.ButtonTrash(null, null, "removeRowOtherDelays",
                                                                        dataAttributes: new Dictionary<string, string>()
                                                                {
                                                                    { "idb-fieldname", "btnRemoveOtherDelay" },
                                                                    { "otherDelayId", row.OtherDelayId.ToString() }
                                                                })).CssHeaderClass("col-md-1");

        }).RowTemplates(row => row.Create(RowTemplateType.AllRows, OtherDelaysTableRow));
    config.TableClass = "tableNormal endSpacing";

    @Html.Partial("Controls/DataTable", config)

                <div class="col-md-12">
                    <div data-pagemode="edit" class="text-center">
                        @Confluence.ButtonAddNewRows(Localization.GetText("TCM.FR.FindingsAndRecommendations.AddNew"), "OtherDelaysTable", null, "newOtherDelays", dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "btnAddNewOtherDelay" } })
                    </div>
                </div>
    <span data-pagemode="edit">
        @Confluence.InputHidden(value: "", name: "deleteAchievementOtherDelay", required: false)
    </span>

}
        </div>

        @helper OtherDelaysTableRow(IDB.MW.Domain.Models.FindingRecomendations.OtherDelayModel row)
{
        <tr class="template odd" name="rowIdiom" id="rowIdiom" data-persist="true" data-row-parent-id=@row.OtherDelayId>
            <td class="custom-detail-table-row" colspan="6">
                <div class="row row-header text-left">
           
                    <div class="col-md-12">
                        <p>@Localization.GetText("TCM.FR.FindingsAndRecommendations.Reason")</p>
                    </div>
                </div>
                <div class="row row-body-40 text-left">
                    <div data-pagemode="read">
                        <div class="col-md-4">
                            <p class="textBreak">
                                <b>
                                    @Localization.GetText(row.DelayReason)
                                </b>
                            </p>
                        </div>
                    </div>
                    <div data-pagemode="edit">
                        
                        <div class="col-md-12">
                            @Confluence.InputTextArea(row.DelayReason, "OtherDelayReason", null, required: true, width: "100%", height: "100px"
                                             , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "txtOtherDelayReason" } })
                        </div>
                      
                    </div>
                </div>
            </td>
        </tr>
}

    </div>
    
    @helper GetRelatedExpandedButton()
{
    @Confluence.ButtonShowRow()
}
}



