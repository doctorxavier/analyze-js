@using System.Globalization
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MW.Application.TCM.ViewModels.FindingAndRecommendation
@using IDB.Presentation.MVC4.Helpers


@model List<PartnersTableModel>
@if (Model != null )
{
    var btnAddNewPartnerSwich = true;
    var ddlTypePartnerSwich = true;
    var txtPartnerNameSwich = true;
    if (Model.Count<0) {
         btnAddNewPartnerSwich = SecurityHelper.IsVisible(Model.FirstOrDefault().FieldAccessList, "btnAddNewPartner");
         ddlTypePartnerSwich = SecurityHelper.IsVisible(Model.FirstOrDefault().FieldAccessList, "ddlTypePartner");
         txtPartnerNameSwich = SecurityHelper.IsVisible(Model.FirstOrDefault().FieldAccessList, "txtPartnerName");
    }


    <div class="row row-header">
        <div class="col-md-12">
            @Confluence.LabelMainSubTitle(Localization.GetText("TCM.FR.FindingsAndRecommendations.Partners"), htmlClass: "subTitlePrincipalFindingsRecommendations")
            @Confluence.Label(Localization.GetText("TCM.FR.FindingsAndRecommendations.IfApplicable"))
        </div>
    </div>
    <div class="row row-body-20">
        <div class="col-md-12">
            <input type="hidden" id="hidPartnersAndConsultanciesModel" value="@ViewBag.SerializedViewModel" />
            @{
    var config = Html.RenderDataTable(Model);
    config.Name("partnerTable")
        .PrimaryKey(m => m.PartnerId.ToString(CultureInfo.InvariantCulture))
        .AddPrimaryKeyToName(false)
        .Columns(columns =>
        {
            columns.Bound(c => c.PartnerId).EditableTemplate(@<input type="hidden" name="partnerId" value="@item.PartnerId.ToString()" />).Hidden(true);
            if (ddlTypePartnerSwich) {
                columns.Template(c => Confluence.LabelGetDropDown(c.TypeOfPartner.ToString(), ViewBag.TypePartner))
                .EditableTemplate(row => Confluence.InputDropDown(row.TypeOfPartner.ToString(), "typePartner", ViewBag.TypePartner, orderAsc: false, width: "100%"
                    , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "ddlTypePartner" } })).CssClass("w250")
                .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.TypeOfPartner")).CssHeaderClass("w250");
            }


            columns.Template(c => Confluence.Label(c.PartnerName))
                .EditableTemplate(row => Confluence.InputText(row.PartnerName, "partnerName", 500, width: "100%"
                    , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "txtPartnerName" } }))
                .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.PartnerName"));
            columns.Template(c => Confluence.InputRichText(c.PartnerEngagement, "partnerEngagement", width: "100%", maxLength: 3500)).Persistent()
                .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.PartnerEngagement")).CssHeaderClass("w700");
            if (txtPartnerNameSwich) {
                columns.Bound(c => String.Empty)
            .EditableTemplate(row => Confluence.ButtonTrash(null, null, "removeRow", dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "btnRemovePartner" } })).CssHeaderClass("w90");
            }
            
        });
                config.TableClass = "tableNormal endSpacing";

    @Html.Partial("Controls/DataTable", config)

                <div name="msgPartners"><tr><td>@Confluence.Label(Localization.GetText("TCM.FR.FindingsAndRecommendations.PartnerEmptyTable"))</td></tr></div>

                if (btnAddNewPartnerSwich)
                {

                    <div class="col-md-12">
                        <div data-pagemode="edit" class="text-center">
                            @Confluence.ButtonAddNewRows(Localization.GetText("TCM.FR.FindingsAndRecommendations.AddNew"), "partnerTable", null, "newPartner", dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "btnAddNewPartner" } })
                        </div>
                    </div>

                }

            }
        </div>
    </div>
}
