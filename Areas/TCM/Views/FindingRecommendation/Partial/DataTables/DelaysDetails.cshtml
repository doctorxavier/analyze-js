@using System.Activities.Statements
@using IDB.MW.Domain.Models.FindingRecomendations;
@using IDB.MVCControls.DataTable.Helpers
@using System.Globalization
@using IDB.MVCControls.DataTable.Models


@model List<IDB.MW.Domain.Models.FindingRecomendations.AchievementDelayModel>

<div class="row row-header">
    <div class="col-md-12">
    </div>
</div>

@if (Model != null)
{
    <div class="row row-body-20">
        <div class="col-md-12">

    @{
    var config = Html.RenderDataTable(Model);
    config.Name("DelaysDetails")
        .PrimaryKey(m => m.AchievementDelayId.ToString(CultureInfo.InvariantCulture))
        .AddPrimaryKeyToName(false)
        .Columns(columns =>
        {
            columns.Bound(c => c.AchievementDelayId).EditableTemplate(@<input type="hidden" class="hide" name="AchievementDelayId" value="@item.AchievementDelayId.ToString()" />).Hidden(true);

            columns.Template(c => Confluence.Label(c.NameCycle)).CssClass("w240").Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.CycleName")).CssHeaderClass("col-md-2").Persistent();

            columns.Template(c => Confluence.LabelGetDropDown(c.DelayTypeId, ViewBag.ListDelaysType))
                .EditableTemplate(row => Confluence.InputDropDown(row.DelayTypeId.ToString(), "delayType", ViewBag.ListDelaysType, width: "100%"
                    , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "ddlDelayType" } }))
                .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.TypeOfDelay")).CssHeaderClass("col-md-1");


            columns.Template(c => Confluence.LabelGetDropDown(c.ResultElementId, (c.DelayType == "Outcome delay" ? ViewBag.ListOutcomes : ViewBag.ListOutputs)))
                .EditableTemplate(row => Confluence.InputDropDown(row.ResultElementId, "nameDelay", ViewBag.ListItems, parentValue: true, width: "100%"
                    , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "ddlNameDelay" } }))
                .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.Name")).CssHeaderClass("col-md-7");

            columns.Template(c => Confluence.Label(c.StateIsSolved))
                .EditableTemplate(row => Confluence.InputDropDown(row.IsSolved.ToString(), "stateIsSolvedDelay", ViewBag.ListIsSolved, width: "100%"
                    , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "ddlStateIsSolvedDelay" } }))
                .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.IssueSolved")).CssHeaderClass("col-md-1");

            columns.Template(c => Confluence.Label(String.Format("{0:dd MMM yyyy}", c.LastUpdate))).Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.LastUpdate")).CssHeaderClass("col-md-1").Persistent();
            columns.Template(c => GetRelatedExpandedButton()).Persistent().EditableTemplate(row => Confluence.ButtonTrash(null, null, "removeRowDelays",
                                                                        dataAttributes: new Dictionary<string, string>()
                                                                {
                                                                    { "idb-fieldname", "btnRemoveDelay" },
                                                                    { "achievementDelayId", row.AchievementDelayId.ToString() }
                                                                })).CssHeaderClass("col-md-1");

        }).RowTemplates(row => row.Create(RowTemplateType.AllRows, OtherDelaysTableRow));
    config.TableClass = "tableNormal endSpacing";

    @Html.Partial("Controls/DataTable", config)

        <div class="col-md-12">
            <div data-pagemode="edit" class="text-center">
                @Confluence.ButtonAddNewRows(Localization.GetText("TCM.FR.FindingsAndRecommendations.AddNew"), "DelaysDetails", null, "newDelays", dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "btnAddNewDelay" } })
            </div>
        </div>
        <span data-pagemode="edit">
            @Confluence.InputHidden(value: "", name: "deleteAchievementDelay", required: false)
        </span>
    
    }
        </div>

        @helper OtherDelaysTableRow(IDB.MW.Domain.Models.FindingRecomendations.AchievementDelayModel row)
{
        <tr class="template odd" name="rowIdiom" id="rowIdiom" data-persist="true" data-row-parent-id=@row.AchievementDelayId>
            <td class="custom-detail-table-row" colspan="6">
                <div class="row row-header text-left">
                    <div class="col-md-4">
                            <p>@Localization.GetText("Explain both physical and financial delays")</p>
                        </div>
                        <div class="col-md-4">
                            <p>@Localization.GetText("Findings: Effects or implications (negative or positive) of the delays")</p>
                        </div>
                        <div class="col-md-4">
                            <p>@Localization.GetText("Recommendations: Actions or decisions recomend to replicate or to void")</p>
                        </div>

                </div>
                <div class="row row-body-40 text-left">
                    <div data-pagemode="read">
                            <div class="col-md-4">
                                <p class="textBreak">
                                    <b>
                                        @Localization.GetText(row.DelayReason)
                                    </b>
                                </p>
                            </div>
                            <div class="col-md-4">
                                <p class="textBreak">
                                    <b>
                                        @Localization.GetText(row.Finding)
                                    </b>
                                </p>
                            </div>
                            <div class="col-md-4">
                                <p class="textBreak">
                                    <b>
                                        @Localization.GetText(row.Recommendation)
                                    </b>
                                </p>
                            </div>
                        </div>

                    <div data-pagemode="edit">
                            
                        <div class="col-md-4">
                            @Confluence.InputTextArea(row.DelayReason, "delayDetailReason", null, required: false, width: "100%", height: "100px"
                                             , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "txtDelayDetailReason" } })
                        </div>

                        <div class="col-md-4">
                            @Confluence.InputTextArea(row.Finding, "finding", null, required: false, width: "100%", height: "100px"
                                             , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "txtFinding" } })
                        </div>

                        <div class="col-md-4">
                            @Confluence.InputTextArea(row.Recommendation, "recommendation", null, required: false, width: "100%", height: "100px"
                                             , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "txtRecommendation" } })
                        </div>
                           
                        </div>
                </div>
            </td>
        </tr>
}

    </div>

    @helper GetRelatedExpandedButton()
{
    @Confluence.ButtonShowRow()
}
}

