@using System.Globalization
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MW.Domain.Values
@using IDB.Presentation.MVC4.Helpers
@model List<IDB.MW.Application.TCM.ViewModels.FindingAndRecommendation.ConsultaincesTableModel>
@if (Model != null)
{
    <div class="row row-header">
        <div class="col-md-12">
            @{
                var btnAddNewConsultanciesSwich = Model.Count < 0 ? SecurityHelper.IsVisible(Model.First().FieldAccessList, "btnAddNewConsultancies") : true;
                var btnRemoveConsultanciesSwich = Model.Count < 0 ? SecurityHelper.IsVisible(Model.First().FieldAccessList, "btnRemoveConsultancies") : true;
                var ddlNationalitySwich = Model.Count < 0 ? SecurityHelper.IsVisible(Model.First().FieldAccessList, "ddlNationality") : true;
                var ddlQualityAssesmentSwich = Model.Count < 0 ? SecurityHelper.IsVisible(Model.First().FieldAccessList, "ddlQualityAssesment") : true;
                var ddlTypeConsultanciesSwich = Model.Count < 0 ? SecurityHelper.IsVisible(Model.First().FieldAccessList, "ddlQualityAssesment") : true;


            }
            @Confluence.LabelMainSubTitle(Localization.GetText("TCM.FR.FindingsAndRecommendations.ConsultaincesHiredThroughProjectResources"))
            @Confluence.Label(Localization.GetText("TCM.FR.FindingsAndRecommendations.TextUsDollar"))
        </div>
    </div>
    <div class="row row-body-20">
        <div class="col-md-12">
            <div class="floatRight" style="margin-right: 12px;">
                <div data-expand-button="expand"
                     dd-contenedor="ConsultancyTable"
                     class="btnCollapseOne buttonExpand"
                     dd-coll="Collapse All" dd-exp="Expand All">
                    <span>
                        <span></span>
                    </span>
                    <label dd-value="Collapse All">@Localization.GetText("GLOBAL.CONTROL.SHOWALL")</label>
                </div>
                <div style="display: none"
                     dd-contenedor="ConsultancyTable"
                     data-expand-button="collapse"
                     dd-exp="Expand All"
                     dd-coll="Collapse All"
                     class="btnCollapseOne buttonExpand collapse">
                    <span>
                        <span></span>
                    </span>
                    <label dd-value="Expand All">@Localization.GetText("GLOBAL.CONTROL.HIDEALL")</label>
                </div>
            </div>
            @{
                var config = Html.RenderDataTable(Model);
                config.Name("consultancyTable")
                    .PrimaryKey(m => m.ConsultaincesId.ToString(CultureInfo.InvariantCulture))
                    .AddPrimaryKeyToName(false)
                    .Columns(columns =>
                    {
                    columns.Bound(c => c.ConsultaincesId).EditableTemplate(@<input type="hidden" name="consultanciesId" value="@item.ConsultaincesId.ToString()" />).Hidden(true);
                        columns.Template(c => Confluence.Label(c.Name))
                            .EditableTemplate(row => Confluence.InputText(row.Name, "consultanciesName", 500, width: "100%", required: true, disabled: row.TranOriginCode != null
                              , htmlClass: row.TranOriginCode != null ? "custom-black" : null))
                            .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.Name")).CssHeaderClass("w150").Orderable(false);
                        if (ddlTypeConsultanciesSwich)
                        {
                            columns.Template(c => Confluence.LabelGetDropDown(c.Type.ToString(), ViewBag.ConsultanciesType))
                            .EditableTemplate(row => Confluence.InputDropDown(row.Type.ToString(), "consultanciesType", ViewBag.ConsultanciesType, width: "100%", required: false
                                , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "ddlTypeConsultancies" } }))
                            .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.Type")).CssHeaderClass("w150").Orderable(false);
                        }

                        if (ddlNationalitySwich)
                        {
                            columns.Template(c => Confluence.LabelGetDropDown(c.NationalityId.ToString(), ViewBag.ConsultanciesNationality))
                           .EditableTemplate(row => Confluence.InputDropDown(row.NationalityId.ToString(), "consultanciesNationality", ViewBag.ConsultanciesNationality, width: "100%", required: false, orderAsc: false
                               , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "ddlNationality" } }))
                           .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.Nationality")).CssHeaderClass("w200").Orderable(false);
                        }

                        columns.Template(c => Confluence.Label(c.ApprovalNumber))
                            .EditableTemplate(row =>
                                Confluence.InputText(row.ApprovalNumber, "consultanciesApprovalNumber", 500, width: "100%", required: false, disabled: true, htmlClass: "custom-black"))
                            .Header(Localization.GetText("COMMON.ApprovalNumber")).CssHeaderClass("w150").Orderable(false);

                        columns.Template(c => Confluence.LabelGetDate(c.ContractBegin))
                            .EditableTemplate(row => Confluence.InputDatePicker(row.ContractBegin, "consultanciesContractBegin", width: "100%", required: false
                                , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "dpkContractBegin" } }))
                            .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.ContractBegin")).CssHeaderClass("w170").Orderable(false);
                        columns.Template(c => Confluence.LabelGetDate(c.ContractEnd))
                            .EditableTemplate(row => Confluence.InputDatePicker(row.ContractEnd, "consultanciesContractEnd", width: "100%", required: false
                                , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "dpkContractEnd" } }, htmlClass: "text-left"))
                            .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.ContractEnd")).CssHeaderClass("w170").Orderable(false);
                        columns.Template(c => Confluence.LabelDecimal(c.AmountUsd)).CssClass("text-right")
                            .EditableTemplate(row => Confluence.InputDecimal(row.AmountUsd, "consultanciesAmountUSD", width: "100%", minValue: "1.00", maxValue: "9999999999999.99", required: row.TranOriginCode == null, disabled: row.TranOriginCode != null
                                , htmlClass: row.TranOriginCode != null ? "custom-black" : null))
                            .Header(Localization.GetText("OP.OD.TabClassificationData.Classifications.Amount")).CssHeaderClass("w200").CssClass("text-right").Orderable(false);
                        columns.Template(c => Confluence.InputRichText(c.ObjectiveOfConsultancy, "objectivesConsultancy", width: "100%", maxLength: 500, required: false)).Persistent()
                            .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.ObjectivesOfConsultancy"));

                        if (ddlQualityAssesmentSwich)
                        {
                            columns.Template(c => Confluence.LabelGetDropDown(c.QualityAssesMent.ToString(), ViewBag.QualityAssesment))
                           .EditableTemplate(row => Confluence.InputDropDown(row.QualityAssesMent.ToString(), "consultanciesQualityAssesment", ViewBag.QualityAssesment, width: "100%", orderAsc: false, required: false
                               , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "ddlQualityAssesment" } }))
                           .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.QualityAssesment")).CssHeaderClass("w150").Orderable(false);
                        }

                        if (btnRemoveConsultanciesSwich)
                        {
                            columns.Bound(c => String.Empty)
                            .EditableTemplate(row => row.TranOriginCode != null && row.TranOriginCode.Equals(TCMGlobalValues.EDW_TRAN_ORIGIN) ?
                                Confluence.ButtonTrash(null, null, "removeRow", dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "btnRemoveConsultancies" } }, htmlClass: "hide")
                                : Confluence.ButtonTrash(null, null, "removeRow", dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "btnRemoveConsultancies" } })).CssHeaderClass("w90");
                        }

                    });
                config.TableClass = "tableNormal endSpacing";

                @Html.Partial("Controls/DataTable", config)

                <br />
                <div class="styleContentReport">
                    <a title="Export Excel" class="exportdata excel styleExportReport"
                       onclick="window.open($(this).data('href'), '_blank')"
                       data-href='@(Url.Action("DownloadReportConsultancies", "FindingRecommendation", new {
                                area = "TCM",
                                operationNumber = IDBContext.Current.Operation,
                                formatType = "Excel"
                            }))'></a>
                </div>

                <div name="msgConsultancies"><tr><td>@Confluence.Label(Localization.GetText("TCM.FR.FindingsAndRecommendations.ConsultancyEmptyTable"))</td></tr></div>
                if (btnAddNewConsultanciesSwich)
                {
                    <div class="col-md-12">
                        <div data-pagemode="edit" class="text-center">
                            @Confluence.ButtonAddNewRows(Localization.GetText("TCM.FR.FindingsAndRecommendations.AddNew"), "consultancyTable", null, "newConsultancy", dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "btnAddNewConsultancies" } })
                        </div>
                    </div>
                }

            }
        </div>
    </div>
                }

<script src="~/Scripts/Modules/FindingRecomendations/consultancytable.js"></script>