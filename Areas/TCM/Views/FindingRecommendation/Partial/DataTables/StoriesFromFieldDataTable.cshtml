@using System.Globalization
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MVCControls.General.Helpers
@using Org.BouncyCastle.Asn1.X509
@using IDB.Presentation.MVC4.Helpers


@model IDB.MW.Application.TCM.ViewModels.FindingAndRecommendation.StoriesFromTheFieldModel



@if (Model.StoriesFromTheField != null)
{
    
        var btnAddNewStoriesSwich = Model.FieldAccessList.Count < 0 ? SecurityHelper.IsVisible(Model.FieldAccessList, "btnAddNewStories") : true;
        var btnRemoveStoriesSwich = Model.FieldAccessList.Count < 0 ? SecurityHelper.IsVisible(Model.FieldAccessList, "btnRemoveStories") : true;
        var ddlTypeStorySwich = Model.FieldAccessList.Count < 0 ? SecurityHelper.IsVisible(Model.FieldAccessList, "ddlTypeStory") : true;
        var txtElectronicLinkSwich = Model.FieldAccessList.Count < 0 ? SecurityHelper.IsVisible(Model.FieldAccessList, "txtElectronicLink") : true;
    
    <div class="row row-body-20">
        <div class="col-md-12">
            <input type="hidden" id="hidStoriesFromTheFieldModel" value="@ViewBag.SerializedStories" />
            @{
    var config = Html.RenderDataTable(Model.StoriesFromTheField);
    config.Name("storiesTable")
        .PrimaryKey(m => m.StoriesId.ToString(CultureInfo.InvariantCulture))
        .AddPrimaryKeyToName(false)
        .Columns(columns =>
        {
            columns.Bound(c => c.StoriesId).EditableTemplate(@<input type="hidden" name="storiesId" value="@item.StoriesId.ToString()" />).Hidden(true);
            if (ddlTypeStorySwich) {
                columns.Template(c => Confluence.LabelGetDropDown(c.TypeOfStory.ToString(), ViewBag.TypeStory))
                .EditableTemplate(row => Confluence.InputDropDown(row.TypeOfStory.ToString(), "typeStory", ViewBag.TypeStory, width: "100%"
                    , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "ddlTypeStory" } }))
                .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.TypeOfStory")).CssHeaderClass("w700");
            }
            if (txtElectronicLinkSwich) {
                columns.Template(c => Confluence.ButtonLink(c.ElectronicLink, "electronicLink", htmlClass: "text-left pl0"))
                 .EditableTemplate(row => Confluence.InputText(row.ElectronicLink, "electronicLink", 500, width: "100%", required: false
                    , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "txtElectronicLink" } }, htmlClass: "text-left pl0"))
                .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.ElectronicLink"));
            }

            if (btnRemoveStoriesSwich) {
                columns.Template(c => GetRelatedExpandedButton()).Persistent()
                .EditableTemplate(row => Confluence.ButtonTrash(null, null, "removeRow2", dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "btnRemoveStories" } })).CssHeaderClass("w130");
            }
        })
                     .RowTemplates(row => row.Create(RowTemplateType.AllRows, StoriesTableRow));

                config.TableClass = "tableNormal endSpacing";

    @Html.Partial("Controls/DataTable", config)


    
        <div name="msgStories">@Confluence.Label(Localization.GetText("TCM.FR.FindingsAndRecommendations.StoryEmptyTable"))</div>

    if (btnAddNewStoriesSwich)
    {
        <div class="col-md-12">
            <div data-pagemode="edit" class="text-center">
                @Confluence.ButtonAddNewRows(Localization.GetText("TCM.FR.FindingsAndRecommendations.AddNew"), "storiesTable", null, "newStory", dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "btnAddNewStories" } })
            </div>
        </div>
    }

            }
        </div>

        @helper StoriesTableRow(IDB.MW.Application.TCM.ViewModels.FindingAndRecommendation.StoriesTableModel row)
{
        <tr class="template odd" name="rowIdiom" id="rowIdiom" data-persist="true" data-row-parent-id=@row.StoriesId>
            <td class="custom-detail-table-row" colspan="4">
                <div class="row row-header text-left">
                    <div class="col-md-1">
                        <p></p>
                    </div>
                    <div class="col-md-10">
                        <p>@Localization.GetText("TCM.FR.FindingsAndRecommendations.TextFieldRow").HtmlEncode()</p>
                    </div>
                    <div class="col-md-1">
                        <p></p>
                    </div>
                </div>
                <div class="row row-body-40 text-left">
                    <div>
                        <div class="col-md-1">
                            
                        </div>
                        <div class="col-md-10">
                            @Confluence.InputRichText(row.StoriesArea, "storiesArea", required: true, width: "100%", height: "100px"
                                    , maxLength: 3500)
                        </div>
                        <div class="col-md-1">
                            <p></p>
                        </div>
                    </div>
                </div>
            </td>
        </tr>
}
    </div>

    @helper GetRelatedExpandedButton()
{
    @Confluence.ButtonShowRow()
}
}