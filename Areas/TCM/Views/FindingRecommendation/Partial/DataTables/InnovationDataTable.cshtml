@using System.Globalization
@using IDB.MVCControls.DataTable.Helpers
@using IDB.Presentation.MVC4.Helpers


@model List<IDB.MW.Application.TCM.ViewModels.FindingAndRecommendation.TableInnovationModel>
@if (Model != null)
{
    <div class="row row-body-20">
        <div class="col-md-12">
            @{
                var txtAdvancesExecutionSwich = Model.Count > 0 ? SecurityHelper.IsVisible(Model.First().FieldAccessList, "btnAddNewInnovation") : false;
                var btnRemoveInnovationSwich = Model.Count > 0 ? SecurityHelper.IsVisible(Model.First().FieldAccessList, "btnRemoveInnovation") : false;
                var ddlTypeInnovationSwich = Model.Count > 0 ? SecurityHelper.IsVisible(Model.First().FieldAccessList, "ddlTypeInnovation") : false;
                var config = Html.RenderDataTable(Model);
                config.Name("innovationTable")
                    .PrimaryKey(m => m.InnovationId.ToString(CultureInfo.InvariantCulture))
                    .AddPrimaryKeyToName(false)
                    .Columns(columns =>
                    {
                    columns.Bound(c => c.InnovationId).EditableTemplate(@<input type="hidden" class="hide" name="innovationId" value="@item.InnovationId.ToString()" />).Hidden(true);
                        if (ddlTypeInnovationSwich)
                        {
                            columns.Template(c => Confluence.LabelGetDropDown(c.TypeOfInnovation.ToString(), ViewBag.TypeInnovation))
                            .EditableTemplate(row => Confluence.InputDropDown(row.TypeOfInnovation.ToString(), "typeInnovation", ViewBag.TypeInnovation, width: "100%"
                                , dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "ddlTypeInnovation" } })).CssClass("w250")
                            .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.TypeOfInnovation")).CssHeaderClass("w250");
                        }
                        
                        columns.Template(c => Confluence.InputRichText(c.KeyInnovation, "keyInnovation", width: "100%", height: "60px", placeholder: Localization.GetText("TCM.FR.FindingsAndRecommendations.TextKeyInnovation"), maxLength:3500)).Persistent()
                            .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.KeyInnovation"));
                        columns.Template(c => Confluence.InputRichText(c.ExentOfSuccesText, "extentSuccess", width: "100%", height: "60px", placeholder: Localization.GetText("TCM.FR.FindingsAndRecommendations.TextExtentSuccess"), maxLength: 3500)).Persistent()
                            .Header(Localization.GetText("TCM.FR.FindingsAndRecommendations.ExentOfSuccess"));
                        if (btnRemoveInnovationSwich) {
                            columns.Bound(c => String.Empty)
                       .EditableTemplate(row => Confluence.ButtonTrash(null, "removeInnovation", "removeRow", dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "btnRemoveInnovation" } })).CssHeaderClass("w90");
                        }
                    });
                config.TableClass = "tableNormal endSpacing";

    @Html.Partial("Controls/DataTable", config)
                if (txtAdvancesExecutionSwich)
                {
                    <div class="col-md-12">
                        <div data-pagemode="edit" class="text-center">
                            @Confluence.ButtonAddNewRows(Localization.GetText("TCM.FR.FindingsAndRecommendations.AddNew"), "innovationTable", null, "newInnovation", dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "btnAddNewInnovation" } })
                        </div>
                    </div>
                }

            }
        </div>
    </div>
}
