@model IDB.Presentation.MVC4.Models.OutcomeIndicator.CustomReassignOutcomeIndicatorModel
@{
    ViewBag.Title = Localization.GetText("TCM.RO.ReassignOutcomeIndicator.ReasignOutcomeIndicatorTitle");
}

<script>
   $(document).ready(function () {

      $("#slctImmpacts").kendoDropDownList();

      $("#btnSaveReassignIndicator").click(function (e) {
          e.preventDefault();
          var optionSelected = $("#slctImmpacts").find("option:selected").val();
          $("#indicatorReassignForm > #ImpactId").attr("value", optionSelected);
          if (($("#hdnIntervalId").val() == 3) || ($("#AccessedByAdministrator").val() == "True" && $("#IsThirdInterval").val() == "True")) {
             hideDefaulDeleteIndicatorWarningContent();
         } else {
             $("#indicatorReassignForm").submit();
         }
      });

      $("#btnSaveReassignIndicatorThirdInterval").click(function (e) {
          e.preventDefault();
          var optionSelected = $("#slctImmpacts").find("option:selected").val();
          $("#indicatorReassignForm > #ImpactId").attr("value", optionSelected);

          $("#indicatorReassignForm").submit();

         removeModalContent();
      });

      $("#lnkCancelReassignIndicator").click(function (e) {
         e.preventDefault();
         removeModalContent();
      });

      $("#lnkCancelReassignIndicatorThirdInterval").click(function (e) {
         e.preventDefault();
         removeModalContent();
      });

   });

   function hideDefaulDeleteIndicatorWarningContent() {

      $("#lnkCancelReassignIndicator").hide();
      $("#btnSaveReassignIndicator").hide();
      $("#defaultReassignIndicatorContainer").hide();

      $("#thirdIntervalReassignIndicatorContainer").show();
      $("#lnkCancelReassignIndicatorThirdInterval").show();
      $("#btnSaveReassignIndicatorThirdInterval").show();
      
   }

   function removeModalContent() {
      $(window.parent.document).find('body').find(".ui-widget-overlay").remove();
      $(".ui-widget-overlay").remove();
      $(".k-window").remove();
   }

   function setSelectedImpactId(select)
   {
       var x = $("#ImpactId").val();
       var y =  $(select).find("option:selected").val();
   }

</script>



@using (Html.BeginForm("ReassignIndicator", "OutcomeIndicator", FormMethod.Post, new { id = "indicatorReassignForm" }))
{
    @Html.HiddenFor(ri => ri.AccessedByAdministrator)
    @Html.HiddenFor(ri => ri.Definition)
    @Html.HiddenFor(ri => ri.ImpactId)
    @Html.HiddenFor(ri => ri.IntervalId)
    @Html.HiddenFor(ri => ri.IsThirdInterval)
    @Html.HiddenFor(ri => ri.OutcomeIndicatorId)
    @Html.HiddenFor(ri => ri.Outcomes)
    @Html.HiddenFor(ri => ri.ResultsMatrixId)
    @Html.HiddenFor(ri => ri.Statement)
    
   <div class="contentImpacts">

      <div id="defaultReassignIndicatorContainer">
         <div class="dataContent1">
            <fieldset>
               <legend class="dataTitle">@Localization.GetText("TCM.RO.ReassignOutcomeIndicator.OutcomeStatement")</legend>
               <p class="dataText">@Model.Statement</p>
            </fieldset>
         </div>
         <div class="dataContent1">
            <fieldset>
               <legend class="dataTitle">@Localization.GetText("TCM.RO.ReassignOutcomeIndicator.IndicatorName")</legend>
               <p class="dataText">@Model.Definition</p>
            </fieldset>
         </div>
         <div class="dataContent1">
            <p class="dataTitle">@Localization.GetText("TCM.RO.ReassignOutcomeIndicator.ReassignIndicatorOutcome")</p>  
             @if (Model.Outcomes.Count() > 0)
             {
                <ul class="optionList">
                  <li class="small">
                     @{ int count = 0; }
                     <span class="k-widget k-dropdown k-header optionSelect" unselectable="on" role="listbox" aria-haspopup="true" aria-expanded="false" tabindex="0" aria-owns="" aria-disabled="false" aria-readonly="false" aria-busy="false" style="">
                        <span unselectable="on" class="k-dropdown-wrap k-state-default">
                           <span unselectable="on" class="k-input">@Model.Outcomes[0].Statement</span>
                           <span unselectable="on" class="k-select">
                              <span unselectable="on" class="k-icon k-i-arrow-s">@Localization.GetText("TCM.RO.ReassignOutcomeIndicator.TextSelect")</span>
                           </span>
                        </span>
                        <select class="optionSelect" id="slctImmpacts" name="Departament" data-role="dropdownlist" style="display: none;" onchange="setSelectedImpactId(this);">

                           @foreach (var impact in Model.Outcomes)
                           {
                               if (count == 0)
                               {
                              <option value="@impact.OutcomeId" selected="selected">@impact.Statement</option>
                               }
                               else
                               {
                              <option value="@impact.OutcomeId">@impact.Statement</option>
                               }
                               count++;
                           }
                        </select>
                     </span>
                  </li>
               </ul>
             }else{
                <p class="dataText"> @Localization.GetText("TCM.RO.ReassignOutcomeIndicator.NonExistingOutcomes")</p>
             }
         </div>
      </div>

      <div id="thirdIntervalReassignIndicatorContainer" style="display: none">
          @Localization.GetText("TCM.RCMW.RegisterChanges.TextMessage")
      </div>

   </div>

   <div class="pie pieReassign">
      <div class="botones">
         <a title="@Localization.GetText("TCM.RO.ReassignOutcomeIndicator.Cancel")" id="lnkCancelReassignIndicator" class="cancel" href="javascript:void(0)"> @Localization.GetText("TCM.RO.ReassignOutcomeIndicator.Cancel")</a>
         @if (Model.Outcomes.Count() > 0)
         {
            <label for="save2">
               <input id="btnSaveReassignIndicator" type="button" value=" @Localization.GetText("TCM.Save")" class="btn-primary">
            </label>
         }
         <a title="@Localization.GetText("TCM.RO.ReassignOutcomeIndicator.Cancel")" id="lnkCancelReassignIndicatorThirdInterval" style="display: none" class="cancel" href="javascript:void(0)"> @Localization.GetText("TCM.RO.ReassignOutcomeIndicator.Cancel")</a>

         <label for="save2">
            <input id="btnSaveReassignIndicatorThirdInterval" style="display: none" type="button" value=" @Localization.GetText("TCM.Save")" class="btn-primary">
         </label>
      </div>
   </div>
}