@using IDB.Architecture.Language

<div class="row row-body-40">
    <div class="col-md-12 text-right">
        @Confluence.ButtonBlue(text: Localization.GetText("OP.OD.TabBasicData.RelatedOperations.NewComments"),
                                action: "newComment",
                                name: "newComment",
                                dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "btnNewComment" } })
    </div>
</div>
<div class="row row-body-40">
    <div class="col-md-6">
        @Confluence.LabelSubTitleGroup(text: Localization.GetText("TCM.TR.TaskAndRequestFoundCoordinator.Comments"),
                                        htmlClass: "bold")
    </div>
</div>

<div class="row row-body-40">
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-12" id="divWorkflowComments">
                @if (Model.UserComments != null)
                {
                    foreach (var comment in Model.UserComments)
                    {
                       <span data-pagemode="edit">
                            @Confluence.InputCommentBox(section1: Confluence.Label(comment.Date),
                                                        section2: Confluence.Label(comment.User),
                                                        section3: null,
                                                        value: comment.Comment,
                                                        name: "textComment",
                                                          isReadOnly: ((Model.UserName.Equals(comment.User)) && ((Model.TaskDataModel != null ? Model.TaskDataModel.TaskId : 1) == comment.WorkflowTaskId)) ? false : true,
                                                        dataAttributes: new Dictionary<string, string>
                                                                            {
                                                                                { "idb-fieldname", "txtTextComment02" }
                                                                            }
                                                        )

                            @Confluence.InputHidden(value: Convert.ToString(comment.CommentId), name: "commentId")

                            @if (Model.UserName.Equals(comment.User) && ((Model.TaskDataModel != null ? Model.TaskDataModel.TaskId : 1) == comment.WorkflowTaskId))
                            {
                                @Confluence.ButtonTrash(text: "",
                                                        action: "deleteComment",
                                                        dataAttributes: new Dictionary<string, string>
                                                                 {
                                                                   { "commentId", Convert.ToString(comment.CommentId) }
                                                                 }
                                                        )
                            }
                      </span>
                    }
                }
        </div>
    </div>
                    <span data-pagemode="edit">
                        @Confluence.InputHidden(value: "",
                                    name: "deleteComments",
                                    required: false)
                    </span>
                </div>
            </div>
