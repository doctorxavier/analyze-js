@using IDB.Architecture.Language
@using IDB.MW.Application.TCAbstractModule.Enums
@using IDB.Presentation.MVC4.Areas.TC.Controllers
@using IDB.Presentation.MVC4.Areas.TC.Enums
@using IDB.Presentation.MVC4.Areas.TC.Models
@using IDB.MW.Application.TCAbstractModule.ViewModels.ESCDecision

@model ESCDecisionViewModel

@section Header
{
    <div class="header">
        <div class="row row-body-40">
            <div class="col-md-12">
                @Html.Partial("Partials/Controls/PartialButtonsDownloadReport")
                @Html.Partial("Partials/Controls/ESCDecisionButtons", Model)
            </div>
        </div>
        @Html.Partial(
            "_HeaderP4",
            new TCHeaderP4ViewModel
            {
                Instructions = @Localization.GetText("TC.ESCDecision.DescriptionInstructions"),
                Fund = Model.Fund,
                FundCoordinator = Model.FundCoordinator,
                OperationNumber = @IDBContext.Current.Operation,
            })
    </div>
}

<div id="ShowFundAvailability">
    <span>&nbsp;</span>
    @Html.Partial(
        "Partials/ElegibilityDecision/_FundAvailabilityBlockPartial",
        Model.AwardFundEligibility)
</div>

@if (ViewBag.ReadRole)
{
    <div class="page">
        <div id="ESCDecisionData"
             class="row-body-50"
             data-parsley-validate="data-parsley-validate"
             data-parsley-excluded="[disabled]"
             data-ignore-nullable-values="true"
             data-loadurl="@Url.Action(
                "escdecisionedit",
                "View",
                new {
                    area="TC",
                    trustfundid=Model.TrustFundId,
                    singlewindowsmeetingid=Model.SingleWindowsMeetingId
                })"
             data-url="@Url.Action("escdecision", "Save", new { area = "TC" })">
            @Html.Partial("Partials/ESCDecision", Model)
        </div>
        @Html.Partial("Partials/Controls/ESCDecisionButtons", Model)
        @Html.Partial("Partials/Controls/PartialButtonsDownloadReport")
        <div id="saveAndSendAwardFundEligibilityDistinctTotal" class="hide modalBody">
            @Localization.GetText("TC.AwardFundEligibility.Button.CommitFundDistinct.Confirm")
        </div>
        <div id="saveAndSendAwardFundEligibilityModal" class="hide modalBody">
            @Localization.GetText("TC.AwardFundEligibility.Button.CommitFund.Confirm")
        </div>
        <div id="saveAndSendRejectFundEligibilityModal" class="hide modalBody">
            @Localization.GetText("TC.ESCDecision.Send.Rejected")
        </div>
        <div id="saveAndSendEligibleWithoutFundingGapModal" class="hide modalBody">
            @Localization.GetText("TC.DecisionSWO.SendFundingGap")
        </div>
        <div id="saveAndSendEligibleWithoutFundingFlexModal" class="hide modalBody">
            @Localization.GetText("TC.ESCDecision.EligibleFunding.Flex.ModalSaveAndSend.Message")
        </div>
        <div id="operationStatusModal" class="hide"></div>
    </div>
}

@section scripts{

    @ModuleScripts.ValidationMessageForTC()
    @ModuleScripts.AwardFundEligibilityCommon()
    @ModuleScripts.AddArithmeticSumValidator()
    @ModuleScripts.K2UIIntegration()

    <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/TC/Common/download.js")"></script>
    <script type="text/javascript">

        setStatus(false);
        setSendOrCommitButton();

        registerCallback(function () {
            SetVisibilityCommitButton($('[name="sendButton"]'));
            $(document).on('change', '[name=decision]', function () {
                setStatus(true);
                setSendOrCommitButton();
            });
        });

        function setSendOrCommitButton() {
            var sendButton = $('[name="sendButton"]');
            sendButton.removeAttr("disabled");
            if (($("[name=decision]:checked").val() ==
                    "@(ViewBag.EnumMapping[ESCDecisionTypeEnum.AwardFundEligibility])") ||
                ($("[name=decision]:checked").val() ==
                    "@(ViewBag.EnumMapping[ESCDecisionTypeEnum.AwardEligibilityTCDocument])")) {
                sendButton.html('@Localization.GetText("TC.AwardFundEligibility.Button.CommitFund")');
                SetVisibilityCommitButton(sendButton);
            }
            else {
                sendButton.html('@Localization.GetText("TC.SaveAndSend")');
            }
        }

        function setStatus(isEdit) {
            var awardEligibilitySubFund = $('#awardEligibilitySubFund');
            var awardFundEligibility = $('#awardFundEligibility');
            var rejectFundEligibility = $('#rejectFund');
            var withoutFund = $('#withoutFund');
            var awardEligibilityTCDocument = $('#awardEligibility');
            var placeOperationOnHold = $('#placeOperationOnHold');
            var withdrawOperation = $('#withdrawOperation');
            var allRegion = $()
                .add(awardEligibilitySubFund)
                .add(awardFundEligibility)
                .add(rejectFundEligibility)
                .add(withoutFund)
                .add(awardEligibilityTCDocument)
                .add(placeOperationOnHold)
                .add(withdrawOperation);

            allRegion.hide();
            disableContainer(allRegion);

            if (isEdit) {
                var type = $("[name=decision]:checked").val();
                switch (type) {
                    case "@(ViewBag.EnumMapping[ ESCDecisionTypeEnum.AwardFundEligibility ])":
                        awardEligibilitySubFund.show();
                        enableContainer(awardEligibilitySubFund);
                        awardFundEligibility.show();
                        enableContainer(awardFundEligibility);
                        break;
                    case "@(ViewBag.EnumMapping[ ESCDecisionTypeEnum.RejectFundEligibility])":
                        rejectFundEligibility.show();
                        enableContainer(rejectFundEligibility);
                        break;
                    case "@(ViewBag.EnumMapping[ ESCDecisionTypeEnum.EligibilityWithoutFunding])":
                        withoutFund.show();
                        enableContainer(withoutFund);
                        break;
                    case "@(ViewBag.EnumMapping[ ESCDecisionTypeEnum.AwardEligibilityTCDocument ])":
                        awardEligibilitySubFund.show();
                        enableContainer(awardEligibilitySubFund);
                        awardEligibilityTCDocument.show();
                        awardFundEligibility.show();
                        enableContainer(awardEligibilityTCDocument);
                        enableContainer(awardFundEligibility);
                        break;
                    case "@(ViewBag.EnumMapping[ ESCDecisionTypeEnum.PlaceOperationOnHold ])":
                        placeOperationOnHold.show();
                        enableContainer(placeOperationOnHold);
                        break;
                    case "@(ViewBag.EnumMapping[ESCDecisionTypeEnum.WithdrawOperation])":
                        withdrawOperation.show();
                        enableContainer(withdrawOperation);
                        break;
                };
            }
        }

        function AddDocuments(documentList, sourceType) {
            var documentTable = $("#EscDecisionDocuments");
            AddDocumentsGeneric(sourceType, documentTable, documentList);
            resetStyleTable(documentTable);
        }

        function resetStyleTable(table) {
            var groupRow = table.find('tbody tr:not(.hide)');
            groupRow.removeClass("custom-odd");
            groupRow.removeClass("custom-even");
            $(groupRow).each(function (index) {
                var row = $(this);
                if ((index % 2) == 0) {
                    row.addClass("custom-even");
                } else {
                    row.addClass("custom-odd");
                }
            });
        }

        function edit(source) {
            var form = $('#ESCDecisionData');
            form.parsley().destroy();
            var success = enterEditMode(true, form, true);
            if (success) {
                form.parsley();
                enterEditMode(false, $('.ESCDecisionButtons'), false);
                $('#refreshFundAvailability').removeClass('hide').addClass('showDataEdit');
                UpdateTargetQuantity();
                setStatus(true);
                setSendOrCommitButton();
            }
        }

        function cancel(source) {
            exitEditMode(true, $('#ESCDecisionData'), true, true);
            exitEditMode(false, $('.ESCDecisionButtons'), false, false);
            $('#refreshFundAvailability').addClass('hide');
            setStatus(false);
        }

        function save(source) {
            var deferred = genericSubmit(source, '@SaveControllerTypeEnum.Save');
            return deferred;
        }

        function send(source) {
            var deferred = genericSubmit(source, '@SaveControllerTypeEnum.SaveAndSend');
            return deferred;
        }

        function setModalRedirectUrl(url) {
            $("#operationStatusModal").attr('data-new-modal-redirectOnCloseToUrl', url);
        }

        function genericSubmit(source, submitType) {
            $('[name="@SaveController.SAVE_CONTROLLER_SUBMITTYPE"]').val(submitType);
            var resp = $.Deferred();
            var response = saveContainer(
                $('#ESCDecisionData'),
                '#hidViewModel',
                true,
                $('.ESCDecisionButtons'),
                $(source.target),
                true,
                false);
            if (response !== false) {
                response
                    .done(function (data) {
                        if (!data.IsValid && data.ErrorMessage != null && data.ErrorMessage != "") {
                            showMessage(data.ErrorMessage);
                        }
                        else if (data.IsValid) {
                            if (data.ContentHTML != null) {
                                setOperationStatusModal(data.ContentHTML);
                            }
                            if (data.UrlRedirect != null) {
                                setModalRedirectUrl(data.UrlRedirect);
                            }
                            setStatus(false);
                            var modals = vex.getAllVexes();
                            var messages = modals.filter(function () {
                                var item = $(this);
                                var isMessage = item.find("[data-showmessage=GenericFunction]").length > 0;
                                return isMessage;
                            });
                            if (messages.length > 0) {
                                setPositionModal(messages);
                            }
                        }
                        resp.resolve(data);
                    });
            }
            return resp;
        }

        function sendSelector(source) {
            var isAllCompleted = $('[name="CompleteOthers"]').val() == "True";
            var decisionType = $("[name=decision]:checked").val();
            switch (decisionType) {
                case "@(ViewBag.EnumMapping[ESCDecisionTypeEnum.AwardFundEligibility])":
                    if (compareTotal() || !isAllCompleted) {
                        $('[name=saveAndSendAwardFundEligibility]').first().click();
                    }
                    else {
                        $('[name=saveAndSendAwardFundEligibilityDistinctTotal]').first().click();
                    }
                    break;
                case "@(ViewBag.EnumMapping[ESCDecisionTypeEnum.RejectFundEligibility])":
                    $('[name=saveAndSendRejectFundEligibility]').first().click();
                    break;
                case "@(ViewBag.EnumMapping[ESCDecisionTypeEnum.EligibilityWithoutFunding])":
                    var operationType = $("[name=typeOperation]:checked").val();
                    if (operationType == "@(ViewBag.EnumMapping[EscDecisionOperationTypeEnum.Flex])") {
                        $('[name=saveAndSendEligibleWithoutFundingFlex]').first().click();
                    }
                    else if (operationType == "@(ViewBag.EnumMapping[EscDecisionOperationTypeEnum.FundingGap])") {
                        $('[name=saveAndSendEligibleWithoutFundingGap]').first().click();
                    }
                    else {
                        $('#ESCDecisionData').parsley().validate();
                    }
                    break;
                case "@(ViewBag.EnumMapping[ESCDecisionTypeEnum.PlaceOperationOnHold])":
                    $("[name=sendHold]").click();
                    break;
                case "@(ViewBag.EnumMapping[ESCDecisionTypeEnum.WithdrawOperation])":
                    $("[name=sendWithdraw]").click();
                    break;
                default:
                    if (compareTotal() || !isAllCompleted) {
                        $('[name=saveAndSendAwardFundEligibility]').first().click();
                    }
                    else {
                        $('[name=saveAndSendAwardFundEligibilityDistinctTotal]').first().click();
                    }
                    break;
            }
        }

        function compareTotal() {
            var totalRequest = $('[name="input-total-requested"]').val();
            var totalAmount = $('[name="input-total-approved"]').val();
            return totalRequest == totalAmount ;
        }

        function setOperationStatusModal(data) {
            var modal = $('#operationStatusModal');
            modal.html(data);
        }

        function showOperationStatusModal(target) {
            if (target == "send" || target == "Withdrawn_Send" || target == "Hold_Send") {
                $("[name=operationStatusModalButton]").first().click();
            }
        }

        function downloadDocument(source) {
            console.log('Download Document');
        }

        function removeDocument(source) {
            console.log('Remove Document');
        }

        function performAction(source) {
            vex.closeAll();
        }

        function cancelUpload() {
            vex.closeAll();
        }
    </script>
}
