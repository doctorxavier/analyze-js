@using IDB.Presentation.MVC4.Models.Modal
@using IDB.Presentation.MVC4.General

@if(ViewBag.CanEdit)
{
    <div id="headerButtons" class="float-right main-buttons reviewPValidationButtons">
        <div data-pagemode="read">
            @Display.Button01(Localization.GetText("TC.Edit"), action: "editReviewPostValidation")
        </div>
        <div data-pagemode="edit">
            @Display.ButtonLink(
                Localization.GetText("TC.Cancel"),
                action: "cancelReviewPostValidation")

            @Display.AddModalButton(
                new ModalViewModel(
                    typeButton: CssClass.Button05,
                    allowClose: true,
                    contentSelector: "#saveModal",
                    name: "saveModal",
                    type: CssClass.ModalWarning,
                    title: Localization.GetText("TC.TCAbstractModalSave.Title"),
                    validateForm: false,
                    validateOptialRequired: false,
                    text: Localization.GetText("TC.Save"))
                .AddButton("cancel",
                    text: Localization.GetText("TC.Cancel"),
                    type: CssClass.ButtonLink,
                    callback: "")
                .AddButton("save",
                    text: Localization.GetText("TC.Save"),
                    type: CssClass.Button05,
                    callback: "saveReviewPostValidation",
                    closeAtEnd: true))

            @if (ViewBag.WriteTLRole)
            {
                @Display.AddModalButton(
                    new ModalViewModel(
                        typeButton: CssClass.Button01,
                        name: "sendFundCoordinator",
                        allowClose: true,
                        contentSelector: "#sendFundCoordinatorModal",
                        type: CssClass.ModalWarning,
                        title: Localization.GetText("TC.TCAbstractModalSend.Title"),
                        validateForm: true,
                        text: Localization.GetText("TC.Header.SendFundCoordinator"),
                        actionOnClose: "showOperationStatusModal",
                        closeOnOverlay: false)
                    .AddButton("cancel",
                        text: Localization.GetText("TC.Cancel"),
                        type: CssClass.ButtonLink,
                        callback: "")
                    .AddButton("save",
                        id: "sendFunCoordinator",
                        text: Localization.GetText("TC.Header.SendFundCoordinator"),
                        type: CssClass.Button01,
                        callback: "sendReviewPostValidation",
                        closeAtEnd: true))
            }
        </div>
    </div>

    @Display.AddModalButton(
        new ModalViewModel(
            name: "operationStatusModalButton",
            allowClose: true,
            contentSelector: "#operationStatusModal",
            type: CssClass.ModalInformation,
            title: Localization.GetText("TC.TCAbstractModalFundingProcess.Title"),
            validateForm: false)
   )
}