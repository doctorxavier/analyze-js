@using IDB.Architecture.Language
@using IDB.MW.Application.TCAbstractModule.ViewModels.FundInformation
@using IDB.Presentation.MVC4.Helpers
@using IDB.MVCControls.General.Helpers
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MW.Infrastructure.Configuration

@model List<FIRowExtFundWorkforceViewModel>

@{

    var formatDate = ConfigurationServiceFactory.Current.GetApplicationSettings().FormatDate;
    var expRegDate = ConfigurationServiceFactory.Current.GetApplicationSettings().ValidationDataPickerExpReg;

    var config = Html.RenderDataTable(Model);
    config.Name("externallyFundedWorkforceTable")
        .AddPrimaryKeyToName(false)
        .PrimaryKey(m => m.ExtFundWorkforceID.ToString())
        .Paginable()
        .PageSize(10)
        .Columns(columns =>
        {
            columns.Bound(c => c.Name.HtmlEncode())
                .EditableTemplate(modelRow => Confluence.InputText(
                    value: modelRow.Name,
                    name: "name",
                    required: false,
                    width: "180px",
                    maxLength: 100))
                .Header(Localization.GetText("TC.FundInformation.ExternallyFundedWorkforceTable.Name"));

            columns.Bound(c => FormatHelper.Format(c.HireDate, formatDate))
                .EditableTemplate(modelRow => Confluence.InputDatePicker(
                    value: modelRow.HireDate,
                    name: "hireDate",
                    format: "dd MMM yyyy",
                    expReg: expRegDate,
                    required: false,
                    width: "180px"))
                .Header(Localization.GetText("TC.FundInformation.ExternallyFundedWorkforceTable.HireDate"));

            columns.Bound(c => FormatHelper.Format(c.EndDate, formatDate))
                .EditableTemplate(modelRow => Confluence.InputDatePicker(
                    value: modelRow.EndDate,
                    name: "endDate",
                    format: "dd MMM yyyy",
                    expReg: expRegDate,
                    required: false,
                    width: "180px"))
                .Header(Localization.GetText("TC.FundInformation.ExternallyFundedWorkforceTable.EndDate"));

            columns.Bound(c => ControlTemplates.DropDownGetSelectedString(c.Country, ViewBag.CountriesAssignedList))
                .EditableTemplate(modelRow => Confluence.InputDropDown(
                    value: modelRow.Country.ToString(),
                    name: "country",
                    elements: (List<System.Web.Mvc.SelectListItem>)@ViewBag.CountriesAssignedList,
                    required: false,
                    width: "180px"))
                .Header(Localization.GetText("TC.FundInformation.ExternallyFundedWorkforceTable.Nationality"));

            columns.Bound(c => c.OriginalAmount)
                .Persistent()
                .Header(Localization.GetText("TC.FundInformation.ExternallyFundedWorkforceTable.OriginalAmount")).CssClass("amount-alignment");

            columns.Bound(c => c.TotalIncreases)
                .Persistent()
                .Header(Localization.GetText("TC.FundInformation.ExternallyFundedWorkforceTable.TotalIncreases"));

            columns.Bound(c => c.TypeEFC)
                .Persistent()
                .Header(Localization.GetText("TC.FundInformation.ExternallyFundedWorkforceTable.TypeEFC"));

            columns.Bound(c => c.OperationCode)
                .Persistent()
                .Header(Localization.GetText("TC.FundInformation.ExternallyFundedWorkforce.OperationCode"));

        });

    config.TableClass = "tableNormal";

}

@Html.Partial("Controls/DataTable", config)
