@using IDB.Architecture.Language
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Application.TCAbstractModule.ViewModels.TCAbstractService
@using IDB.MW.Infrastructure.Configuration
@using IDB.Presentation.MVC4.Areas.TC.Values

@model TCFinancingDataViewModel

@{
    var formatInteger = ConfigurationServiceFactory.Current.GetApplicationSettings().FormatInteger;
    var formatDecimal = ConfigurationServiceFactory.Current.GetApplicationSettings().FormatDecimal;
    var expRegDecimal = ConfigurationServiceFactory.Current.GetApplicationSettings().ValidationDecimalExpReg;
}

<div class="row row-header font-header">
    <div class="col-md-4">
        @Localization.GetText("TC.TCAbstract.BasicData.Financing").HtmlEncode()
        <span class="asteriskColor">*</span>
    </div>
    <div class="col-md-4">
        @Localization.GetText("TC.TCAbstract.BasicData.CounterpartFinancing").HtmlEncode()
        <span class="asteriskColor">*</span>
    </div>
    <div class="col-md-4">
        @Localization.GetText("TC.TCAbstract.BasicData.DisbursementPeriod").HtmlEncode()
        <span class="asteriskColor">*</span>
    </div>
</div>
<div class="row row-body-50 font-body">
    <div class="col-md-4">
        <div class="col-separation">
            <span data-pagemode="read" id="financingRead">
                @FormatHelper.Format(Model.Financing, formatDecimal)
            </span>
            <div data-pagemode="edit">
                @FormatHelper.Format(Model.Financing, formatDecimal)
                @ControlTemplates.InputDecimal(
                        Model.Financing,
                        TCBasicDataField.Financing,
                        true,
                        decimalSeparator: ".",
                        numberSeparator: ",",
                        minValue: "0.00",
                        maxValue: "999999999999.99",
                        expReg: expRegDecimal,
                        dataAttributes: new Dictionary<string, string>
                        {
                            { "parsley-arithmeticSum", "=;[name=financing];[name=financingComponent],[name=financingComponent-new]" },
                            { "parsley-arithmeticSum-message", Localization.GetText("TC.TCAbstract.BasicData.FinancingErrorMessage") },
                            { "parsley-NonZero", "0" },
                            { "optional-required", "true" },
                            { "label", Localization.GetText("TC.TCAbstract.BasicData.Financing") }
                        },
                        htmlClass: "hide")
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div data-pagemode="read" id="counterFinancingRead">
            @CounterpartDistribution(Model, formatDecimal)
        </div>
        <div data-pagemode="edit">
            @CounterpartDistribution(Model, formatDecimal)
            @ControlTemplates.InputDecimal(
                    Model.CounterpartFinancing,
                    TCBasicDataField.CounterpartFinancing,
                    true,
                    minValue: "0.00",
                    maxValue: "999999999999.99",
                    numberSeparator: ",",
                    decimalSeparator: ".",
                    expReg: expRegDecimal,
                    dataAttributes: new Dictionary<string, string>
                    {
                        { "parsley-arithmeticSum", "=;[name=counterpartFinancing];[name=counterpartFinancingComponent],[name=counterpartFinancingComponent-new]" },
                        { "parsley-arithmeticSum-message", Localization.GetText("TC.TCAbstract.BasicData.FinancingErrorMessage") },
                        { "optional-required", "true" },
                        { "label", Localization.GetText("TC.TCAbstract.BasicData.CounterpartFinancing") }
                    },
                    htmlClass: "hide")
        </div>
    </div>
    <div class="col-md-4">
        <span data-pagemode="read" id="disbursmentPeriodRead">
            @FormatHelper.Format(
                Model.DisbursementPeriod <= decimal.Zero ? (decimal?)null : Model.DisbursementPeriod,
                formatInteger)
        </span>
        <div data-pagemode="edit">
            @ControlTemplates.InputDecimal(
                    Model.DisbursementPeriod <= decimal.Zero ? (decimal?)null : Model.DisbursementPeriod,
                    TCBasicDataField.DisbursementPeriod,
                    true,
                    minValue: "0",
                    maxValue: "999999999",
                    numberSeparator: ",",
                    dataAttributes: new Dictionary<string, string>
                    {
                        { "parsley-minValueOne", "1" },
                        { "optional-required", "true" },
                        { "label", Localization.GetText("TC.TCAbstract.BasicData.DisbursementPeriod") }
                    })
        </div>
    </div>
</div>

@helper CounterpartDistribution(TCFinancingDataViewModel viewModel, string formatDecimal)
{
    if (viewModel.HasCounterpartDistribution)
    {
        <dl>
            @if (!string.IsNullOrEmpty(viewModel.CounterpartInKind.Label))
            {
                <dd>@viewModel.CounterpartInKind.Label</dd>
            }
            @if (!string.IsNullOrEmpty(viewModel.CounterpartCash.Label))
            {
                <dd>@viewModel.CounterpartCash.Label</dd>
            }
        </dl>
    }
    else
    {
        @FormatHelper.Format(Model.CounterpartFinancing, formatDecimal)
    }
}