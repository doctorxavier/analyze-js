@using IDB.Architecture.Extensions
@using IDB.Architecture.Language
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Application.TCAbstractModule.ViewModels.TCAbstractService
@using IDB.Presentation.MVC4.Areas.TC.Values
@using IDB.Presentation.MVC4.Helpers

@model TCOperationalSupportViewModel

@{
    var supportTypes = @Html.BuildSelectItemList(
            Model.AvailableSupportTypes,
            type => type.GetLocalizedName(),
            type => type.MasterId.ToString())
        .ToList();
}

@if (Model.SupportedOperations.HasAny())
{
    <div class="row info-operational-support" data-pagemode="edit">
        <div class="col-md-10">
            @Confluence.InformationSection(
                Localization.GetText("TC.Taxonomy.OperationalSupport.Information"),
                htmlClass: "info-message-operational-support")
        </div>
        <div class="col-md-1 text-right check-message-operational-support">
            <span class="@(Model.AllSelected ? "hide" : string.Empty)" name="selectAll">
                @Localization.GetText("OP.DE.SE.RE.SelectAll").HtmlEncode()
            </span>
            <span class="@(Model.AllSelected ? string.Empty : "hide")" name="unselectAll">
                @Localization.GetText("OP.DE.SE.RE.UnselectAll").HtmlEncode()
            </span>
        </div>
        <div class="col-md-1 check-operational-support">
            @ControlTemplates.InputCheckbox(
                Model.AllSelected,
                "checkOperationSupport",
                null,
                "selectOperations")
        </div>
    </div>
}

@foreach (var opSupport in Model.SupportedOperations)
{
    if (opSupport.IsChecked)
    {
        <div class="row row-header font-header" data-pagemode="read">
            <div class="col-md-4">
                @Localization.GetText("TC.TCAbstract.BasicData.SupportedOperationName").HtmlEncode()
            </div>
            <div class="col-md-4">
                @Localization.GetText("TC.TCAbstract.BasicData.SupportedOperationNumber").HtmlEncode()
            </div>
            <div class="col-md-4">
                @Localization.GetText("TC.TCAbstract.BasicData.TypeOperationalSupport").HtmlEncode()
                <span class="asteriskColor">*</span>
            </div>
        </div>
        <div class="row row-body-40 font-body" data-pagemode="read">
            <div class="col-md-4">
                @opSupport.SupportedOperationName.HtmlEncode()
            </div>
            <div class="col-md-4">
                @opSupport.SupportedOperationNumber.HtmlEncode()
            </div>
            <div class="col-md-4">
                @Input.DropDownGetSelectedString(opSupport.SupportTypeId, supportTypes)
            </div>
        </div>
    }
    <div class="row row-header font-header" data-pagemode="edit">
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.SupportedOperationName").HtmlEncode()
        </div>
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.SupportedOperationNumber").HtmlEncode()
        </div>
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.TypeOperationalSupport").HtmlEncode()
            <span class="asteriskColor">*</span>
        </div>
    </div>
    <div class="row row-body-40 font-body" data-pagemode="edit">
        <div class="col-md-4">
            @opSupport.SupportedOperationName.HtmlEncode()
        </div>
        <div class="col-md-4">
            @opSupport.SupportedOperationNumber.HtmlEncode()
        </div>
        <div class="col-md-3">
            @Input.DropDown(
                valueNumber: opSupport.SupportTypeId,
                name: TCBasicDataField.SupportedOperationType,
                optionList: supportTypes,
                required: true,
                showEmptyOption: true,
                attributes: new Dictionary<string, string>
                {
                    { "data-id", opSupport.SupportedOperationId.ToString() },
                })
            <span data-label="@Localization.GetText("TC.TCAbstract.BasicData.TypeOperationalSupport")" />
        </div>
        <div class="col-md-1">
            @ControlTemplates.InputCheckbox(
                opSupport.IsChecked,
                TCBasicDataField.CheckRelatedOperation,
                opSupport.SupportedOperationId.ToString(),
                "checkOperation")
        </div>
    </div>
}