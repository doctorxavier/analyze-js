@using IDB.Architecture.Language
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Application.TCAbstractModule.ViewModels.TCAbstractService
@using IDB.Presentation.MVC4.Areas.TC.Values
@using IDB.Presentation.MVC4.General
@using IDB.Presentation.MVC4.Helpers

@model TCAbstractBasicDataViewModel

<div data-name="basic-data-section">
    <div class="row row-header font-header">
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.OperationNumber").HtmlEncode()
        </div>
    </div>
    <div class="row row-body-50 font-body">
        <div class="col-md-4">
            @Model.OperationNumber.HtmlEncode()
        </div>
    </div>
    <div class="row row-header font-header">
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.OperationName").HtmlEncode()
        </div>
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.NombreDeOperacion").HtmlEncode()
        </div>
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.Beneficiary").HtmlEncode()
            <span class="asteriskColor">*</span>
        </div>
    </div>
    <div class="row row-body-50 font-body">
        <div class="col-md-4">
            @Model.OperationName.HtmlEncode()
        </div>
        <div class="col-md-4">
            @Model.OperationNameForeignLanguage.HtmlEncode()
        </div>
        <div class="col-md-4">
            <span data-pagemode="read" id="beneficiaryRead">@Model.Beneficiary.HtmlEncode()</span>
            <div data-pagemode="edit">
                @ControlTemplates.InputText(
                    Model.Beneficiary,
                    TCBasicDataField.Beneficiary,
                    required: true,
                    maxLength: 100,
                    dataAttributes: new Dictionary<string, string>
                    {
                        { "id", TCBasicDataField.Beneficiary },
                        { "optional-required", "true" },
                        { "label", Localization.GetText("TC.TCAbstract.BasicData.Beneficiary") }
                    })
            </div>
        </div>
    </div>
    <div class="row row-header font-header">
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.CountryDepartment").HtmlEncode()
            <span class="asteriskColor">*</span>
        </div>
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.Country").HtmlEncode()
            <span class="asteriskColor">*</span>
        </div>
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.ReferenceRequest").HtmlEncode()
            @Display.IconInformation()
            <span class="information">
                @Localization.GetText("TC.TCAbstract.BasicData.ReferenceRequest.InformationMessage")
            </span>
        </div>
    </div>
    <div class="row row-body-50 font-body">
        <div class="col-md-4">
            @if(Model.IsDefaultRegionalCountryDepartment)
            {
                <span>@Localization.GetText("TC.REGIONAL")</span>
            }
            else
            {
                <span data-pagemode="read" id="countryDepartmentRead">
                    @Input.DropDownGetSelectedString(
                        Model.CountryDepartment,
                        @ViewBag.CountryDepartmentList)
                </span>
                <div data-pagemode="edit">
                    @Input.DropDownGetSelectedString(
                        Model.CountryDepartment,
                        @ViewBag.CountryDepartmentList)
                    <input type="text"
                            name="@TCBasicDataField.CountryDepartment"
                            value="@Model.CountryDepartment"
                            data-label="@Localization.GetText("TC.TCAbstract.BasicData.CountryDepartment")"
                            data-force-parsley-validation="true"
                            required="required"
                            style="display:none" />
                </div>
            }
        </div>
        <div class="col-md-4">
            @Input.DropDownGetSelectedString(Model.Country, @ViewBag.CountryList)
        </div>
        <div class="col-md-4">
            <span data-pagemode="read" id="referenceRequestRead">
                @Model.ReferenceRequest.HtmlEncode()
            </span>
            <div data-pagemode="edit">
                @ControlTemplates.InputText(
                    Model.ReferenceRequest,
                    TCBasicDataField.ReferenceRequest,
                    id: TCBasicDataField.ReferenceRequest,
                    isReadOnly: true,
                    required: false)
            </div>
        </div>
    </div>
    <div class="row row-header font-header">
        <div class="col-md-12">
            @Localization.GetText("TC.TCAbstract.BasicData.Objective").HtmlEncode()
            <span class="asteriskColor">*</span>
            @Display.IconInformation()
            <span class="information">
                @Localization.GetText("TC.TCAbstract.ObjectiveInformationMessage")
            </span>
        </div>
    </div>
    <div class="row row-body-40 font-body">
        <div class="col-md-12">
            <span data-pagemode="read" id="objectiveRead">@Model.Objective.HtmlEncode()</span>
            <div data-pagemode="edit">
                @ControlTemplates.InputTextArea(
                    Model.Objective,
                    TCBasicDataField.Objetive,
                    rows: 6,
                    maxLength: 3500,
                    required: true,
                    dataAttributes: new Dictionary<string, string>
                    {
                        { "id", TCBasicDataField.Objetive },
                        { "optional-required", "true" },
                        { "label", Localization.GetText("TC.TCAbstract.BasicData.Objective") }
                    })
            </div>
        </div>
    </div>
    <div class="row row-header font-header">
        <div class="col-md-12">
            @Localization.GetText("TC.TCAbstract.BasicData.Objetivo").HtmlEncode()
            <span class="asteriskColor">*</span>
        </div>
    </div>
    <div class="row row-body-40 font-body">
        <div class="col-md-12">
            <span data-pagemode="read" id="objectiveForeignLanguageRead">
                @Model.ObjectiveForeignLanguage.HtmlEncode()
            </span>
            <div data-pagemode="edit">
                @ControlTemplates.InputTextArea(
                    Model.ObjectiveForeignLanguage,
                    TCBasicDataField.ObjetiveForeignLanguage,
                    rows: 6,
                    maxLength: 3500,
                    required: true,
                    dataAttributes: new Dictionary<string, string>
                    {
                        { "id", TCBasicDataField.ObjetiveForeignLanguage },
                        { "optional-required", "true" } ,
                        { "label", Localization.GetText("TC.TCAbstract.BasicData.Objetivo") }
                    })
            </div>
        </div>
    </div>
    <div class="row row-header font-header">
        <div class="col-md-12">
            @Localization.GetText("TC.TCAbstract.BasicData.Justification").HtmlEncode()
            <span class="asteriskColor">*</span>
        </div>
    </div>
    <div class="row row-body-40 font-body">
        <div class="col-md-12">
            <span data-pagemode="read" id="JustificationRead">
                @Model.Justification.HtmlEncode()
            </span>
            <div data-pagemode="edit">
                @ControlTemplates.InputTextArea(
                    Model.Justification,
                    TCBasicDataField.Jutification,
                    rows: 6,
                    maxLength: 3500,
                    required: true,
                    dataAttributes: new Dictionary<string, string>
                    {
                        { "id", TCBasicDataField.Jutification },
                        { "optional-required", "true" },
                        { "label", Localization.GetText("TC.TCAbstract.BasicData.Justification") }
                    })
            </div>
        </div>
    </div>
    <div class="row row-header font-header">
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.PreparedByUnit").HtmlEncode()
            <span class="asteriskColor">*</span>
        </div>
        <div class="col-md-4">
            @Display.LinkTeamMembers(
                text: @Localization.GetText("TC.TCAbstract.BasicData.OperationTeam"),
                name: "OperationTeam",
                attributes: new Dictionary<string, string>
                {
                    { "data-custom-overlay", "#dataMemberModal" },
                    { "data-custom-overlay-title", Localization.GetText("TC.TCAbstractModalOperationTeam.Title") },
                    { "data-custom-overlay-type", CssClass.OverlayBlue }
                })
        </div>
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.TypesOfConsultants").HtmlEncode()
            <span class="asteriskColor">*</span>
        </div>
    </div>
    <div class="row row-body-50 font-body">
        <div class="col-md-4">
            <span data-pagemode="read" id="preparedByUnitRead">
                @Input.DropDownGetSelectedString(Model.PreparedByUnit, ViewBag.OrganizationalUnits)
            </span>
            <div data-pagemode="edit">
                @Input.DropDownGetSelectedString(Model.PreparedByUnit, ViewBag.OrganizationalUnits)
                <input type="text"
                       name="@TCBasicDataField.PreparedByUnit"
                       value="@Model.PreparedByUnit"
                       data-label="@Localization.GetText("TC.TCAbstract.BasicData.PreparedByUnit")"
                       data-force-parsley-validation="true"
                       required="required"
                       style="display:none" />
            </div>
        </div>
        <div class="col-md-4"></div>
        <div class="col-md-4">
            <div data-pagemode="read" id="typeConsultantRead">
                <ul class="list-without-style">
                    @foreach (var tc in Model.TypesOfConsultants)
                    {
                        var text = (string)Input.DropDownGetSelectedString(
                            tc, ViewBag.TypesOfConsultantsList);
                        <li>@text.HtmlEncode()</li>
                    }
                </ul>
            </div>
            <div data-pagemode="edit">
                @ControlTemplates.DropDownMultipleExtend(
                    Model.TypesOfConsultants,
                    TCBasicDataField.TypesOfConsultants,
                    ViewBag.TypesOfConsultantsList,
                    size: 3,
                    comboAditionalData: new Dictionary<string, string>
                    {
                        { "optional-required", "true" },
                        { "label", Localization.GetText("TC.TCAbstract.BasicData.TypesOfConsultants") }
                    })
            </div>
        </div>
    </div>
    <div class="row row-header font-header">
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.ExecutingAgency").HtmlEncode()
        </div>
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.ContactName").HtmlEncode()
            <span class="asteriskColor">*</span>
        </div>
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.ContactInformation").HtmlEncode()
            <span class="asteriskColor">*</span>
        </div>
    </div>
    <div class="row row-body-50 font-body font-header">
        <div class="col-md-4">
            <dl>
                @foreach (var agency in @Model.ExecutingAgencyName) { <dd>@agency.HtmlEncode()</dd> }
            </dl>
        </div>
        <div class="col-md-4">
            <span data-pagemode="read" id="contactNameRead">@Model.ContactName.HtmlEncode()</span>
            <div data-pagemode="edit">
                @ControlTemplates.InputText(
                    Model.ContactName,
                    TCBasicDataField.ContactName,
                    required: true,
                    maxLength: 255,
                    dataAttributes: new Dictionary<string, string>
                    {
                        { "id", TCBasicDataField.ContactName },
                        { "optional-required", "true" },
                        { "label", Localization.GetText("TC.TCAbstract.BasicData.ContactName") }
                    })
            </div>
        </div>
        <div class="col-md-4">
            <span data-pagemode="read" id="contactInformationRead">
                @Model.ContactInformation.HtmlEncode()
            </span>
            <div data-pagemode="edit">
                @ControlTemplates.InputText(
                    Model.ContactInformation,
                    TCBasicDataField.ContactInformation,
                    required: true,
                    maxLength: 500,
                dataAttributes: new Dictionary<string, string> {
                    { "id", TCBasicDataField.ContactInformation },
                    { "optional-required", "true" },
                    { "label", Localization.GetText("TC.TCAbstract.BasicData.ContactInformation") }
                })
            </div>
        </div>
    </div>

    @Html.Partial("Partials/TCAbstractPartials/TCFinancingData", Model.FinancingData)

    <div class="row row-header font-header">
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.UnitDisbursementResponsability").HtmlEncode()
            <span class="asteriskColor">*</span>
        </div>
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.ESGClassification").HtmlEncode()
        </div>
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.IncludedCPD").HtmlEncode()
        </div>
    </div>
    <div class="row row-body-50 font-body">
        <div class="col-md-4">
            <span data-pagemode="read" id="unitDisbursementResponsabilityRead">
                @Input.DropDownGetSelectedString(
                    Model.UnitDisbursementResponsability,
                    ViewBag.OrganizationalUnits)
            </span>
            <div data-pagemode="edit">
                @Input.DropDownGetSelectedString(
                    Model.UnitDisbursementResponsability,
                    ViewBag.OrganizationalUnits)
                <input type="text"
                       name="@TCBasicDataField.UnitDisbursementResponsability"
                       value="@Model.UnitDisbursementResponsability"
                       data-label="@Localization.GetText("TC.TCAbstract.BasicData.UnitDisbursementResponsability")"
                       data-force-parsley-validation="true"
                       required="required"
                       style="display:none" />
            </div>
        </div>
        <div class="col-md-4">
            @Model.ESGClassification.HtmlEncode()
        </div>
        <div class="col-md-4">
            <span data-pagemode="read" id="isIncludeCPDRead">
                @(Model.IsIncludedCPD ?
                    Localization.GetText("TC.Yes") : Localization.GetText("TC.No"))
            </span>
            <div data-pagemode="edit">
                <div>
                    @ControlTemplates.InputRadioButtonNew(
                        "Yes",
                        TCBasicDataField.IsIncludeCPD,
                        isChecked: Model.IsIncludedCPD,
                        label: Localization.GetText("TC.Yes"),
                        isDisplayBlock: false)

                    @ControlTemplates.InputRadioButtonNew(
                        "No",
                        TCBasicDataField.IsIncludeCPD,
                        isChecked: !(Model.IsIncludedCPD),
                        label: Localization.GetText("TC.No"),
                        isDisplayBlock: false)
                </div>
            </div>
        </div>
    </div>
    <div class="row row-header font-header">
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.Taxonomy").HtmlEncode()
            <span class="asteriskColor">*</span>
        </div>
        <div class="col-md-4">
            @Localization.GetText("TC.TCAbstract.BasicData.IncludedCountryStrategy").HtmlEncode()
            <span class="asteriskColor">*</span>
        </div>
        <div class="col-md-4">
            <table>
                <tr>
                    <td class="information-nowrap-top">
                        @Localization.GetText("TC.TCAbstract.BasicData.GCISectorPriority").HtmlEncode()
                        <span class="asteriskColor">*</span>
                    </td>
                    <td class="@(Model.PredefinedIndicators.Count() > 0 ? "hide" : "information-bottom")">
                        @Display.IconInformation()
                        <span class="information information-message">
                            @Localization.GetText("TC.TCAbstract.StrategicAlignment.InformationMessage").HtmlEncode()
                        </span>
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <div class="row row-body-40 font-body">
        <div class="col-md-4">
            @if (Model.Taxonomy.IsVisible)
            {
                @Html.Partial("Partials/TCAbstractPartials/TCTaxonomy", Model)
            }
        </div>
        <div class="col-md-4">
            <span data-pagemode="read" id="isIncludedCountryStrategyRead">
                @(Model.IsIncludedCountryStrategy.HasValue && Model.IsIncludedCountryStrategy.Value ?
                    Localization.GetText("TC.Yes") : Localization.GetText("TC.No"))
            </span>
            <div data-pagemode="edit">
                <div>
                    @ControlTemplates.InputRadioButtonNew(
                        "Yes",
                        TCBasicDataField.IsIncludeCountry,
                        isChecked: (Model.IsIncludedCountryStrategy.HasValue &&
                            Model.IsIncludedCountryStrategy.Value),
                        label: Localization.GetText("TC.Yes"),
                        isDisplayBlock: false)

                    @ControlTemplates.InputRadioButtonNew(
                        "No",
                        TCBasicDataField.IsIncludeCountry,
                        isChecked: !(Model.IsIncludedCountryStrategy.HasValue &&
                            Model.IsIncludedCountryStrategy.Value),
                        label: Localization.GetText("TC.No"),
                        isDisplayBlock: false)
                </div>
            </div>
        </div>
        <div class="col-md-4">
            @if (Model.IncludePredefinedIndicators)
            {
                <div id="predefinedIndicators">
                    <dl>
                        @foreach (var indicator in Model.PredefinedIndicators)
                        {
                            <dd>@indicator.HtmlEncode()</dd>
                        }
                    </dl>
                    @Confluence.InputNumber(
                        Model.PredefinedIndicators.Count(),
                        TCBasicDataField.GCISectorPriorities,
                        true,
                        dataAttributes: new Dictionary<string, string>
                        {
                            { "parsley-NonZero", "0" },
                            { "parsley-NonZero-message", Localization.GetText("TC.CommonMessages.FieldRequired") },
                            { "optional-required", "true" },
                            { "label", Localization.GetText("TC.TCAbstract.BasicData.PredefinedIndicators") }
                        },
                        htmlClass: "hide")
                </div>
            }
            else
            {
                <div data-pagemode="read" id="gciSectorPriorityRead">
                    <ul class="list-without-style">
                        @foreach (var gci in Model.GCISectorPriority)
                        {
                            var text = (string)Input.DropDownGetSelectedString(
                                gci, ViewBag.GCISectorPriorityList);
                            <li>@text.HtmlEncode()</li>
                        }
                    </ul>
                </div>
                <div data-pagemode="edit">
                    @ControlTemplates.DropDownMultipleExtend(
                        Model.GCISectorPriority,
                        TCBasicDataField.GCISectorPriorities,
                        ViewBag.GCISectorPriorityList,
                        size: 5,
                        comboAditionalData: new Dictionary<string, string>
                        {
                            { "optional-required", "true" },
                            { "label", Localization.GetText("TC.TCAbstract.BasicData.GCISectorPriority") }
                        })
                </div>
            }
        </div>
    </div>
    @if (Model.Taxonomy.IsVisible && Model.OperationalSupport.HasOperationalSupport)
    {
        <div class="tcSupportedOperation">
            @Html.Partial("Partials/TCAbstractPartials/TCSupportedOperation", Model.OperationalSupport)
        </div>
    }
    <div class="row row-header font-header">
        <div class="col-md-12">
            @Localization.GetText("TC.TCAbstract.BasicData.OperationThemes")
            <span class="asteriskColor">*</span>
        </div>
    </div>
    <div class="row row-body-50 font-body">
        <div class="col-md-4">
            <span data-pagemode="read" id="operationTheme01Read">
                @Input.DropDownGetSelectedString(
                    Model.OperationTheme1Id,
                    @ViewBag.OperationThemeList)
            </span>
            <div data-pagemode="edit">
                @Input.DropDown(
                    Model.OperationTheme1Id,
                    TCBasicDataField.OperationTheme1,
                    @ViewBag.OperationThemeList,
                    showEmptyOption: true,
                    required: true,
                    attributes: new Dictionary<string, string>
                    {
                        { "data-optional-required", "false" },
                        { "onChange", "operationThemeChanged(this)" }
                    })
                <span data-label="@(Localization.GetText("TC.TCAbstract.BasicData.OperationThemes"))" />
            </div>
        </div>
        <div class="col-md-4">
            <span data-pagemode="read" id="operationTheme02Read">
                @Input.DropDownGetSelectedString(
                    Model.OperationTheme2Id, @ViewBag.OperationThemeList)
            </span>
            <div data-pagemode="edit">
                @Input.DropDown(
                    Model.OperationTheme2Id,
                    TCBasicDataField.OperationTheme2,
                    @ViewBag.OperationThemeList,
                    showEmptyOption: true,
                    required: true,
                    attributes: new Dictionary<string, string>
                    {
                        { "data-optional-required", "true" },
                        { "onChange", "operationThemeChanged(this)" }
                    })
            </div>
        </div>
        <div class="col-md-4">
            <span data-pagemode="read" id="operationTheme03Read">
                @Input.DropDownGetSelectedString(
                    Model.OperationTheme3Id, @ViewBag.OperationThemeList)
            </span>
            <div data-pagemode="edit">
                @Input.DropDown(
                    Model.OperationTheme3Id,
                    TCBasicDataField.OperationTheme3,
                    @ViewBag.OperationThemeList,
                    showEmptyOption: true,
                    required: true,
                    attributes: new Dictionary<string, string>
                    {
                        { "data-optional-required", "true" },
                        { "onChange", "operationThemeChanged(this)" }
                    })
            </div>
        </div>
    </div>
    <div class="row row-header font-header">
        <div class="col-md-12">
            @Localization.GetText("TC.TCAbstract.BasicData.ExecutingAgencyStructure")
            <span class="asteriskColor">*</span>
        </div>
    </div>
    <div class="row row-body-50 font-body">
        <div class="col-md-12">
            <span data-pagemode="read" id="executingAgencyStructureRead">
                @Model.ExecutingAgencyStructure.HtmlEncode()
            </span>
            <div data-pagemode="edit">
                @ControlTemplates.InputTextArea(
                    Model.ExecutingAgencyStructure,
                    TCBasicDataField.ExecutingAgencyStructure,
                    rows: 6,
                    maxLength: 3500,
                    required: true,
                    dataAttributes: new Dictionary<string, string>
                    {
                        { "id", TCBasicDataField.ExecutingAgencyStructure },
                        { "optional-required", "true" } ,
                        { "label", Localization.GetText("TC.TCAbstract.BasicData.ExecutingAgencyStructure") }
                    })
            </div>
        </div>
    </div>
    <div class="row row-header font-header">
        <div class="col-md-12">
            <table>
                <tr>
                    <td class="information-nowrap-bottom">
                        @Localization.GetText(
                            "TC.TCAbstract.BasicData.JustificationExecutionStructure")
                        <span class="asteriskColor">*</span>
                    </td>
                    <td class="information-bottom">
                        @Display.IconInformation()
                        <div class="information information-message">
                            @Localization.GetText("TC.TCAbstract.JustificationExecutionStructure")
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <div class="row row-body-50 font-body">
        <div class="col-md-12">
            <span data-pagemode="read" id="justificationExecutionStructureRead">
                @Model.JustificationExecutionStructure.HtmlEncode()
            </span>
            <div data-pagemode="edit">
                @ControlTemplates.InputTextArea(
                    Model.JustificationExecutionStructure,
                    TCBasicDataField.JustificationExecutionStructure,
                    rows: 6,
                    maxLength: 3500,
                    required: true,
                    dataAttributes: new Dictionary<string, string>
                    {
                        { "id", TCBasicDataField.JustificationExecutionStructure },
                        { "optional-required", "true" } ,
                        { "label", Localization.GetText("TC.TCAbstract.BasicData.JustificationExecutionStructure") }
                    })
            </div>
        </div>
    </div>
    <div class="row row-header font-header">
        <div class="col-md-12">
            @Localization.GetText("TC.TCAbstract.BasicData.Description").HtmlEncode()
            <span class="asteriskColor">*</span>
        </div>
    </div>
    <div class="row row-body-40 font-body">
        <div class="col-md-12">
            <span data-pagemode="read" id="descriptionRead">@Model.Description.HtmlEncode()</span>
            <div data-pagemode="edit">
                @ControlTemplates.InputTextArea(
                    Model.Description,
                    TCBasicDataField.Description,
                    rows: 6,
                    maxLength: 3500,
                    required: true,
                    dataAttributes: new Dictionary<string, string>
                    {
                        { "id", TCBasicDataField.Description },
                        { "optional-required", "true" }  ,
                        { "label", Localization.GetText("TC.TCAbstract.BasicData.Description") }
                    })
            </div>
        </div>
    </div>
</div>