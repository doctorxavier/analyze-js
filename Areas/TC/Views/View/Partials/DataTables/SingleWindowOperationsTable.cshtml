@using System.Globalization
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Application.TCAbstractModule.Enums
@using IDB.Presentation.MVC4.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.MW.Application.TCAbstractModule.ViewModels.TCAbstractService
@using IDB.MW.Application.TCAbstractModule.ViewModels.SingleWindowMeeting

@model SingleWindowOperationsViewModel

@{
    var formatDate = ConfigurationServiceFactory.Current.GetApplicationSettings().FormatDate;
    var config = Html.RenderDataTable( Model.Operations );
    config.Name("operationsTable")
        .PrimaryKey(m => m.TCAbstractId.ToString(CultureInfo.InvariantCulture))
        .AddPrimaryKeyToName(false)
        .Columns(columns =>
        {
            columns.Template(GetTCAbstractLinked)
                .Persistent()
                .Header(@Localization.GetText("TC.SingleWindowOperations.OperationNumber"));

            columns
                .Template(GetOperationNumberLinked)
                .Persistent()
                .Header(@Localization.GetText("TC.SingleWindowOperations.Name"));

            columns.Bound(c => c.Taxonomy)
                .Persistent()
                .Header(@Localization.GetText("TC.SingleWindowMeeting.Taxonomy"));

            columns.Bound(c => c.AmountRequested)
                .Persistent()
                .Header(@Localization.GetText("TC.SingleWindowOperations.AmountRequested"));

            columns.Bound(c => c.PreparedByUnit)
                .Persistent()
                .Header(@Localization.GetText("TC.SingleWindowOperations.PreparedByUnit"));

            columns.Bound(c => c.TeamLeader)
                .Persistent()
                .Header(@Localization.GetText("TC.SingleWindowOperations.TeamLeader"));

            columns.Bound(c => c.ParticipantCountries)
                .Persistent()
                .Header(@Localization.GetText("TC.SingleWindowMeeting.ParticipantCountries"))
                .CssClass("w20");

            columns.Bound(c => FormatHelper.Format(c.DateReceived, formatDate))
                .Persistent()
                .Header(@Localization.GetText("TC.SingleWindowMeeting.DateReceived"));

            columns.Bound(c => c.IscludedInCPD ? @Localization.GetText("TC.SingleWindowMeeting.IncludedInCPDYes") : @Localization.GetText("TC.SingleWindowMeeting.IncludedInCPDNo"))
                .Persistent()
                .Header(@Localization.GetText("TC.SingleWindowMeeting.IncludedInCPD"));

            columns.Bound(c => c.Status)
                .Persistent()
                .Header(@Localization.GetText("TC.SingleWindowOperations.Status"));

            columns.Bound( c => GetPriorityLevel( c.PriorityStatus ) )
                .Persistent()
                .Header(@Localization.GetText("TC.SingleWindowOperations.PriorityLevel"));

            columns.Template(@<div>
                <span name="generalComments" class="commentIcon"></span>
                <div data-name="generalCommentsContainer" class="hide">
                </div>
            </div>)
               .Persistent()
               .CssClass("center-button")
               .Header(@Localization.GetText("TC.SingleWindowMeeting.GeneralComments"));

            columns.Bound(c => c.TypeOfDecisionString)
            .Persistent()
                .Header(@Localization.GetText("TC.SingleWindowOperations.TypeOfDecision"));

            columns.Template(
                @<div>
                @if (item.TypeOfDecision == SWTypeOperationEnum.PendingReturnTeamLeader)
                {
                    <button class="btn" data-id="@item.TCAbstractId" data-action="returnOperationToSWM">
                        @Localization.GetText("TC.SingleWindowMeeting.SubInfo.ReturnToSWM")
                    </button>
                }
                </div>)
                .Persistent()
                .CssClass("center-button")
                .Header(@Localization.GetText("TC.SingleWindowMeeting.SubInfo.ReturnToSWM"));

            columns.Template(c => Display.ExpandableTriangleButton(string.Format("#operationsTable [data-name='detail-tcAbstract-{0}']", c.TCAbstractId), null, "")).Persistent();


        }).RowTemplates(rows => rows.Create(RowTemplateType.AllRows, item => SWMeetingSubtableRowInfo(item.OperationSubTable, item.TCAbstractId)))
        ;
    config.TableClass = "table-default table-row-expandible table-row-expandible-bordered font-11";
    config.RowAttributes("data-showing-detail", "false");
}

@Html.Partial("Controls/DataTable", config)

@helper GetPriorityLevel( StatusPriorityLevelViewModel viewModel )
{
    switch( viewModel.Status )
    {
        case StatusPriorityTypeEnum.Defined:
            @viewModel.PriorityLevel;
            break;
        case StatusPriorityTypeEnum.Undefined:
            @(string.Empty);
            break;
        case StatusPriorityTypeEnum.Pending:
            @Localization.GetText( "TC.SingleWindowMeeting.PriorityLevelPending" );
            break;
        default:
            break;
    }
}

@helper GetOperationNumberLinked(IDB.MW.Application.TCAbstractModule.ViewModels.TCAbstractService.OperationViewModel viewModel)
{
    var text = string.Empty;
    if (@viewModel.TypeOfDecision != SWTypeOperationEnum.PendingReturnTeamLeader)
    {
        <a href="@Url.Action( "DecisionSWOperation" , "View" , new { area = "TC" , OperationNumber = viewModel.OperationNumber , typeDecision = (int)Model.SWTypeDecision , SWDateFrom = Model.SWDateFrom , SWDateTo = Model.SWDateTo } )">@viewModel.Name.HtmlEncode()</a>
    }
    else
    {
        <span>@viewModel.Name.HtmlEncode()</span>
    }
}

@helper GetTCAbstractLinked(OperationViewModel viewModel)
{
    <a href="@Url.Action("TCAbstract", "View", new
        {
            area = "TC", OperationNumber = viewModel.OperationNumber
        })">@viewModel.OperationNumber
    </a>
}

@helper SWMeetingSubtableRowInfo(MeetingSubTableViewModel subTable, int tcAbstractId)
{
    var formatDate = ConfigurationServiceFactory.Current.GetApplicationSettings().FormatDate;
    
    <tr class="skip template dont-hide-at-edit own-hide" data-name="detail-tcAbstract-@tcAbstractId">
        <td colspan="14">
            @if ((subTable != null) && (subTable.MeetingSubTableRows != null) && subTable.MeetingSubTableRows.Any())
            {
                <table class="table-fundDetail">
                    <thead>
                        <tr class="childTable">
                            <th class="childTh">@Localization.GetText("TC.SingleWindowMeeting.SubInfo.Fund")</th>
                            <th class="childTh">@Localization.GetText("TC.SingleWindowMeeting.SubInfo.FundCoord")</th>
                            <th class="childTh">@Localization.GetText("TC.SingleWindowMeeting.SubInfo.FundCoordDecision")</th>
                            <th class="childTh">@Localization.GetText("TC.SingleWindowMeeting.SubInfo.Date")</th>
                            <th class="childTh">@Localization.GetText("TC.SingleWindowMeeting.SubInfo.DonorESCDecision")</th>
                            <th class="childTh">@Localization.GetText("TC.SingleWindowMeeting.SubInfo.Date")</th>
                            <th class="childTh">@Localization.GetText("TC.SingleWindowMeeting.SubInfo.Comments")</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var fundInfo in subTable.MeetingSubTableRows)
                        {
                            <tr class="@((fundInfo.FundCoordinatorDecision == SingleWindowFundDecisionEnum.Eligible || fundInfo.FundCoordinatorDecision == SingleWindowFundDecisionEnum.EligibleWithChanges) ? "elegible" :"not-elegible")">
                                <td class="break-words fundName">
                                    @fundInfo.FundCodeFundName.HtmlEncode()
                                </td>
                                <td>
                                    @fundInfo.FullName.HtmlEncode()
                                </td>
                                <td>
                                    <span data-name="fundDecision" class="@(fundInfo.MeetingFundDecision != null ? "clickable-text" : String.Empty)">@ModuleFunctions.GetFundDecision(fundInfo).HtmlEncode()</span>
                                    @if (fundInfo.MeetingFundDecision != null)
                                    {
                                        <div data-name="overlay-fund-DecisionReason" class="hide">

                                            <div class="row row-header font-header">
                                                <div class="col-md-12">
                                                    @ModuleFunctions.GetLabelDecisionFundDecision(fundInfo).HtmlEncode()
                                                </div>
                                            </div>

                                            <div class="row row-body-40 font-body">
                                                <div class="col-md-12">
                                                    @fundInfo.MeetingFundDecision.CauseOrType.HtmlEncode()
                                                </div>
                                            </div>


                                            <div class="row row-header font-header">
                                                <div class="col-md-12">
                                                    @ModuleFunctions.GetLabelDescriptionFundDecision(fundInfo).HtmlEncode()
                                                </div>
                                            </div>

                                            <div class="row row-body-40 font-body">
                                                <div class="col-md-12">
                                                    @fundInfo.MeetingFundDecision.Description.HtmlEncode()
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </td>
                                <td>
                                    @FormatHelper.Format(fundInfo.CoordinatorDecisionDate, formatDate)
                                </td>
                                <td>
                                    <span data-name="donorEscDecision" class="clickable-text">
                                        @{
                                    int? intValue = null;
                                    if (fundInfo.DonorEscDecisionType.HasValue)
                                    {
                                        intValue = ViewBag.EnumMapping[fundInfo.DonorEscDecisionType.Value];
                                    }
                                        }
                                        @ControlTemplatesTC.DropDownGetSelectedText(intValue, (List<SelectListItem>)ViewBag.ESCDecisionList)
                                    </span>
                                    @if (fundInfo.DonorEscDecision != null)
                                    {
                                        <div data-name="overlay-fund-DecisionReason" class="hide">
                                            @if (fundInfo.DonorEscDecision.CauseOrType != null)
                                            {
                                                <div class="row row-header font-header">
                                                    <div class="col-md-12">
                                                        @ModuleFunctions.GetLabelDecisionDonorEscDecision(fundInfo).HtmlEncode()
                                                    </div>
                                                </div>
                                                <div class="row row-body-40 font-body">
                                                    <div class="col-md-12">
                                                        @fundInfo.DonorEscDecision.CauseOrType.HtmlEncode()
                                                    </div>
                                                </div>
                                            }
                                            @if (fundInfo.DonorEscDecision.Description != null)
                                            {
                                                <div class="row row-header font-header">
                                                    <div class="col-md-12">
                                                        @ModuleFunctions.GetLabelDescriptionDonorEscDecision(fundInfo).HtmlEncode()
                                                    </div>
                                                </div>
                                                <div class="row row-body-40 font-body">
                                                    <div class="col-md-12">
                                                        @fundInfo.DonorEscDecision.Description.HtmlEncode()
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </td>
                                <td>
                                    @FormatHelper.Format(fundInfo.DonorEscDecisionDate, formatDate)
                                </td>
                                <td class="center-button">
                                    <span name="subtableComments" class="commentIcon"></span>
                                    <div data-name="overlay-fund-comments" class="hide">
                                        @if ((fundInfo.Comments != null) && (fundInfo.Comments.Any()))
                                        {
                                            @Html.Partial("Partials/TCCommentsReadOnly", fundInfo.Comments)
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </td>
    </tr>
}
