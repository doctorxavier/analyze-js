@model string

<div class ="row row-header" id="idHeadTP">
    <h2>Mock Tools</h2>
    @Html.Label("Current UserName: " + Model, new { @class = "h5", style = "padding-left: 15px;" })
</div>
<hr />
<div class="row" id="idInitFP">
    @Html.Label("Initiate Funding Process", new { @class = "h5", style = "padding-left: 15px;" })
    <div class="col-md-12" style="padding: 15px;">
        <button class="btn btn-primary" data-action="completeIFP">Complete IFP</button>
        <input style="width:320px"
               readonly="readonly"
               id="operationNumber"
               type="text"
               placeholder=@IDBContext.Current.Operation />
    </div>
</div>
<hr />
<div class="row" id="idSyncFC">
    @Html.Label("Funds Coordinators Synchronization",
        new { @class = "h5", style = "padding-left: 15px;" })
    <div class="col-md-12" style="padding: 15px;">
        <button class="btn btn-primary" data-action="syncFC">Sync</button>
        <input style="width: 70%"
               readonly="readonly"
               id="reponseSync"
               type="text"
               placeholder="Funds Coordinators Response Sync"/>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-md-12">
        <textarea id="reponseMock"></textarea>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-md-12">
        <button class="btn btn-primary" data-action="getUserInfo">GetUserInfo</button>
        <button class="btn btn-primary" data-action="isAuthorized">IsAuthorized</button>
        <button class="btn btn-primary" data-action="getRoles">GetRoles</button>
        <button class="btn btn-primary" data-action="getActionByRole">GetActionByRole</button>
        <button class="btn btn-primary" data-action="isGlobalAuthorized">IsGlobalAuthorized</button>
        <input style="width:320px" id="roleToCheck" type="text" placeholder="Role to check" value="TCAbstractWritePermission" />
        <input style="width:320px" id="usernameToCheck" type="text" placeholder="Username to check" value="i:0#.w|IDB\EVERIS1-IDB" />
        <input style="width:320px" id="actionToCheck" type="text" placeholder="Type the action to reques if it is authorized" value="TCAbstractWritePermission" />
    </div>
    <div class="row">
        <div class="col-md-12">
            <input style="width:320px" id="folioIdInput" type="text" placeholder="Type FolioId" />
            <button class="btn btn-primary" data-action="cancelWorkflow1">Cancel Workflow 1</button>
            <button class="btn btn-primary" data-action="cancelWorkflow2">Cancel Workflow 2</button>
        </div>
    </div>
</div>

@section scripts {

    <script>
        function isAuthorized() {
            var actionInput = $("#actionToCheck").val();
            var username = $("#usernameToCheck").val();

            $.ajax({
                url: "@Url.Action("IsAuthorized", "Mock", new { area = "TC" })",
                type: 'GET',
                data: { auth: actionInput, username: username },
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    $("#reponseMock").val(JSON.stringify(response));
                },
                error: function () {
                    alert("error");
                }
            });
        }

        function isGlobalAuthorized() {
            var actionInput = $("#actionToCheck").val();
            var username = $("#usernameToCheck").val();
            $.ajax({
                url: "@Url.Action( "IsGlobalAuthorized" , "Mock" , new { area = "TC" } )",
                type: 'GET',
                data: { auth: actionInput, username: username },
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    $("#reponseMock").val(JSON.stringify(response));
                },
                error: function () {
                    alert("error");
                }
            });
        }

        function getUserInfo() {

            var username = $("#usernameToCheck").val();

            $.ajax({
                url: "@Url.Action("GetUserInfo", "Mock", new { area = "TC" })",
                type: 'GET',
                data: { username: username },
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    $("#reponseMock").val(JSON.stringify(response));
                },
                error: function () {
                    alert("error");
                }
            });
        }

        function getRoles() {

            var actionInput = $("#actionToCheck").val();
            var username = $("#usernameToCheck").val();

            $.ajax({
                url: "@Url.Action("GetRoles", "Mock", new { area = "TC" })",
                type: 'GET',
                data: { auth: actionInput, username: username },
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    $("#reponseMock").val(JSON.stringify(response));
                },
                error: function () {
                    alert("error");
                }
            });
        }

        function getActionByRole() {

            var actionInput = $("#actionToCheck").val();
            var roleName = $("#roleToCheck").val();

            $.ajax({
                url: "@Url.Action("GetActionByRole", "Mock", new { area = "TC" })",
                type: 'POST',
                data: { auth: actionInput, roleName: roleName },
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    $("#reponseMock").val(JSON.stringify(response));
                },
                error: function () {
                    alert("error");
                }
            });
        }

        function cancelWorkflow1() {
            var folioId = $("#folioIdInput").val();

            $.ajax({
                url: "@Url.Action( "CancelWorkflow1" , "Mock" , new { area = "TC" } )",
                type: 'GET',
                data: { folioId: folioId },
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    $("#reponseMock").val(JSON.stringify(response));
                },
                error: function () {
                    alert("error");
                }
            });
        }

        function cancelWorkflow2() {
            var folioId = $("#folioIdInput").val();

            $.ajax({
                url: "@Url.Action( "CancelWorkflow2" , "Mock" , new { area = "TC" } )",
                type: 'GET',
                data: { folioId: folioId },
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    $("#reponseMock").val(JSON.stringify(response));
                },
                error: function () {
                    alert("error");
                }
            });
        }

        function completeIFP() {
            var operationNumber = $("#operationNumber").val();

            $.ajax({
                url: "@Url.Action("CompleteIFP", "Mock", new { area = "TC" })",
                type: 'GET',
                data: { operationNumber: operationNumber },
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    var responseMock = $("#reponseMock");
                    if (response.IsValid)
                        responseMock.val("Funding Process has started successfully");
                    else
                        responseMock.val(response.ErrorMessage)
                },
                error: function () {
                    $("#reponseMock").val("An error has occurred. Please try again.");
                }
            })
        }

        function syncFC() {
            $.ajax({
                url: "@Url.Action("SyncFundsCoordinators", "Mock", new { area = "TC" })",
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    var responseSync = $("#reponseSync");
                    if (response.IsValid)
                        responseSync.val("The synchronization was successful.");
                    else
                        responseSync.val(response.ErrorMessage);
                },
                error: function () {
                    $("#reponseSync").val("An error has occurred. Please try again.");
                }
            })
        }

    </script>
}
