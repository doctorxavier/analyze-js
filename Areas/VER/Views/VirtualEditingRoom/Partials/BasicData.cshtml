@using IDB.MW.Domain.Models.Security
@using IDB.MW.Domain.Values.Ver
@model IDB.MW.Application.VERModule.ViewModels.VerBasicDataViewModel

@{
    var securityBasicData = (List<FieldAccessModel>)ViewBag.SecurityBasicData;

    var submitControl = securityBasicData.FirstOrDefault(o => o.FieldName == "btnSubmit");
    var lockControl = securityBasicData.FirstOrDefault(o => o.FieldName == "btnLockInstance");
    var poaRequired = securityBasicData.FirstOrDefault(o => o.FieldName == "chkPoaRequired");
    var eligibilityDate = securityBasicData.FirstOrDefault(o => o.FieldName == "lblEligibilityDate");
    var fundingExpiration = securityBasicData.FirstOrDefault(o => o.FieldName == "lblFundingExpiration");
    var subTypeMeeting = securityBasicData.FirstOrDefault(o => o.FieldName == "subTypeMeeting");
    var submittedForTranslation = securityBasicData.FirstOrDefault(o => o.FieldName == "submittedForTranslation");
    var redirectSubmitSec = securityBasicData.FirstOrDefault(o => o.FieldName == "redirectSubmitSec");
    var linkSec = securityBasicData.FirstOrDefault(o => o.FieldName == "linkSec");
    var lblPublicationFailed = securityBasicData.FirstOrDefault(o => o.FieldName == "lblPublicationFailed");
    var tcReviewedLoan = securityBasicData.FirstOrDefault(o => o.FieldName == "btnTcReviewedLoan");
    var submitTranslation = securityBasicData.FirstOrDefault(o => o.FieldName == "btnSubmitForTranslation");
    var verifyContent = securityBasicData.FirstOrDefault(o => o.FieldName == "btnVerifyContent");
    var submitControlReviewInLoan = securityBasicData.FirstOrDefault(o => o.FieldName == "btnSubmitControlReviewInLoan");
    var checkOpcRequired = securityBasicData.FirstOrDefault(o => o.FieldName == "chboxOPCRequired");
    var lblOpcRequired = securityBasicData.FirstOrDefault(o => o.FieldName == "lblOpcRequired");
    var transmittalMemoOpc = securityBasicData.FirstOrDefault(o => o.FieldName == "transmittalMemoOpc");
    var validateRequestPolicy = securityBasicData.FirstOrDefault(o => o.FieldName == "validateRequestPolicy");

    var isVisibleVerifyContent = verifyContent != null && verifyContent.IsVisible;
    var isVisibleElegibility = eligibilityDate != null && eligibilityDate.IsVisible;
    var isVisibleFundingExpiration = fundingExpiration != null && fundingExpiration.IsVisible;
    var isVisibleSubTypeMeeting = subTypeMeeting != null && subTypeMeeting.IsVisible;
    var isVisibleSubmittedForTranslation = submittedForTranslation != null && submittedForTranslation.IsVisible;
    var isVisibleRedirectSubmitSec = redirectSubmitSec != null && redirectSubmitSec.IsVisible;
    var isVisibleLinkSec = linkSec != null && linkSec.IsVisible;
    var isVisibleTcReviewedLoan = tcReviewedLoan != null && tcReviewedLoan.IsVisible && Model.AllowReviewedLoan;
    var lblPublicationFailedVisible = lblPublicationFailed != null && lblPublicationFailed.IsVisible;
    var isVisibleControlReviewInLoan = submitControlReviewInLoan != null && submitControlReviewInLoan.IsVisible;
    var isVisibleCheckOpcRequired = checkOpcRequired != null && checkOpcRequired.IsVisible;
    var isVisibleLblOpcRequired = lblOpcRequired != null && lblOpcRequired.IsVisible && Model.IsOpcRequired;
    var isVisibleSubmitByPolicy = validateRequestPolicy == null ||
                                   validateRequestPolicy.IsVisible == false ||
                                   Model.IsPolicyWaiverRequested == false;

    if (isVisibleCheckOpcRequired &&
        Model.IsOpcRequired &&
        Model.SubmitItemList != null &&
        Model.SubmitItemList.Any())
    {
        Model.SubmitItemList.ForEach(o => o.IsVisible = !o.IsVisible);
    }
}

<div id="basicDataSection" data-parsley-validate="data-parsley-validate"
     data-parsley-excluded="[disabled]"
     data-loadurl="@Url.Action("BasicDataContent", "VirtualEditingRoom", new {area = "VER", instanceId = Model.InstanceId})">

@if (isVisibleRedirectSubmitSec)
{
    @Confluence.InputHidden(Model.D2SLink, "d2sLink")
}


@if (lblPublicationFailedVisible)
{
    <script>
        errorBar('@Localization.GetText("GLOBAL.SERVICE.GeneralError")', 1000, false);
    </script>
}

@if (isVisibleSubmitByPolicy == false && string.IsNullOrEmpty(Model.BannerMessageForPolicy) == false)
{
    <script>
        warningBar('@Model.BannerMessageForPolicy', 1000, false);
    </script>
}

<div class="row pb20">
    <div class="col-md-12 pb20">
        @if (!string.IsNullOrEmpty(Model.ReprocessingLabel))
        {
            <div class="row mb20">
                @Confluence.LabelMainTitle(Model.ReprocessingLabel, htmlClass: "redTitle mb10 ml15")
                @Confluence.Label(Localization.GetText("GLOBAL.REPROCESSING.DESCRIPTION"), htmlClass: "ml15")
            </div>
        }
        @Confluence.Navigation(
            Confluence.ListHelpers(new List<HelperResult>
            {
                Confluence.IcoVer("nml20 nmt5"),
                Confluence.LabelMainTitle(Model.TitlePage)
            }),
            Url.Action("Index", "MyDocuments", new { area = "VER" }))
    </div>
    <div class="col-md-12 text-right">
        <ul class="nav navbar-nav floatRight">
            @if (lockControl != null && lockControl.IsVisible)
            {
                if (lockControl.IsReadOnly)
                {
                    <li> @Confluence.InputCheckPadlock(!ViewBag.EditableScreen, "lockUnlockInstance", htmlClass: "pt10 pl10 pointerDefault", disabled: lockControl.IsReadOnly)</li>
                }
                else
                {
                    <li> @Confluence.InputCheckPadlock(!ViewBag.EditableScreen, "lockUnlockInstance", htmlClass: "pt10 pl10")</li>
                }
            }

            @if (isVisibleTcReviewedLoan && isVisibleSubmitByPolicy)
            {
                <li>
                    <div data-id="modalReviewedLoan">
                        <button data-id="reviewedLoan" class="hide"
                                data-modal-allowclose="true"
                                data-custom-modal="modalReviewedLoanContent"
                                data-custom-modal-title="@Localization.GetText("VER.REVIEWED.LOAN.TITLE.POPUP")"
                                data-custom-modal-validate="false"
                                data-custom-buttons='["cancel", "save"]'
                                data-custom-button-save-id="save"
                                data-custom-button-save="@Localization.GetText("VER.GLOBAL.Save")"
                                data-custom-button-save-style="buttonBlue"
                                data-custom-button-save-callback="saveReviewedLoan"
                                data-custom-button-save-closeatend="false"
                                data-custom-button-cancel-id="clear"
                                data-custom-button-cancel="@Localization.GetText("VER.GLOBAL.Cancel")"
                                data-custom-button-cancel-style="buttonLink"
                                data-custom-button-cancel-callback="modalOffice365Close"></button>
                        <div id="modalReviewedLoanContent" class="hide modalBody"></div>
                    </div>

                    @Confluence.ButtonBlue(
                        Localization.GetText("VER.REVIEWED.LOAN.BUTTON"),
                        null,
                        "showReviewedLoanModal",
                        htmlClass: "floatRight")
                </li>
            }

            @if (submitTranslation != null && submitTranslation.IsVisible && isVisibleSubmitByPolicy
                && Model.PackTypeCode != VerGlobalValues.LP_PACK)
            {
                <li>
                    @Confluence.ButtonBlue(
                       Model.SubmittedForTranslation ?
                       Localization.GetText("VER.Homepage.ResubmitTranslation") :
                       Localization.GetText("VER.Homepage.SubmitTranslation"),
                       null,
                       "SubmitForTranslation",
                       htmlClass: "floatRight ml10")
                </li>
            }
            
            @if (isVisibleVerifyContent)
            {
            <li>
                @Confluence.ButtonBlue(
                    Localization.GetText("VER.VERIFY.CONTENT.BUTTON.POPUP"),
                    null,
                    "verifyContent",
                    htmlClass: "floatRight ml10 mr0",
                    dataAttributes: new Dictionary<string, string>
                    {
                        { "toggle", "modal" }, 
                        { "target", "#verifyContent" }
                    })
                @Html.Partial("Controls/ConvergenceValidation/ModalVerifyContentPartial")
            </li>
            }

            @if (submitControl != null &&
             submitControl.IsVisible &&
             Model != null &&
             Model.SubmitItemList != null &&
             Model.SubmitItemList.Any() &&
             (Model.IsReviewedInLoan.GetValueOrDefault() == false ||
             isVisibleControlReviewInLoan) &&
             isVisibleSubmitByPolicy)
            {
                <li id="sectionSubmit">@Html.Partial("Partials/DataTables/Buttons/SubmitButtonsPartial", Model.SubmitItemList)</li>
            }

        </ul>
    </div>
</div>

<div class="row mb15">
    <div class="col-md-2">
        @Confluence.LabelsGroup(Localization.GetText("VER.Homepage.CurrentStatus"), Model.CurrentStatus, false)
    </div>
    <div class="col-md-2">
        @Confluence.LabelsGroup(Localization.GetText("VER.Homepage.CurrentVersion"), Model.CurrentVersion, false)
    </div>
    <div class="col-md-2">
        @Confluence.LabelsGroup(Localization.GetText("VER.Homepage.CreationDate"), Confluence.LabelGetDate(Model.CreationDate), false)
    </div>
    @if (isVisibleElegibility)
    {
        <div class="col-md-2">
            @Confluence.LabelsGroup(Localization.GetText("VER.Homepage.EligibilityDate"), Confluence.LabelGetDate(Model.EligibilityDate), false)
        </div>
    }
    @if (isVisibleFundingExpiration)
    {
        <div class="col-md-2">
            @Confluence.LabelsGroup(Localization.GetText("VER.Homepage.FundingExpiration"), Confluence.LabelGetDate(Model.FundingExpiration), false)
        </div>
    }
    <div class="col-md-2">
        @Confluence.LabelsGroup(Localization.GetText("VER.Homepage.ApprovalDate"), Confluence.LabelGetDate(Model.ApprovalDate), false)
    </div>

</div>

<div class="row mb20" id="verInformationIcon">
    @if (Model.PolicyWaived != null && Model.PolicyWaived.Any())
    {
        <div class="col-md-12 mb10">
            @Confluence.Label(Localization.GetText("VER.Homepage.PolicyWaived"))
        </div>

        <div class="col-md-12">
            @{
        char[] charDelete = { ',', ' ' };

                var listPolicyWaived = string.Join(", ", Model.PolicyWaived).TrimEnd(charDelete);

        @Confluence.LabelLink(Localization.GetText(listPolicyWaived), action: "linktoOperationData", name: "PolicyWaived")
            }

        </div>
    }

</div>

@if (isVisibleSubTypeMeeting ||
     isVisibleSubmittedForTranslation ||
     isVisibleLinkSec ||
     isVisibleCheckOpcRequired ||
     isVisibleLblOpcRequired)
{
    <div class="row mb20">
        @if (isVisibleCheckOpcRequired)
        {
            <div class="col-md-2">
                @Confluence.InputCheckbox(
                    Model.IsOpcRequired,
                    "chkOpcRequired",
                    label: Localization.GetText("VER.Homepage.OPC.Required.Check"))
            </div>
        }

        @if (isVisibleLblOpcRequired)
        {
            <div class="col-md-2">
                @Confluence.LabelsGroup(
                    Localization.GetText("VER.Homepage.OPC.Recommendation"),
                    Localization.GetText("VER.Homepage.OPC.Required.Check"), false)
            </div>
        }

        @if (isVisibleSubTypeMeeting)
        {
            <div class="col-md-2">
                @Confluence.LabelsGroup(
                    Localization.GetText("VER.Homepage.OPC.Type"), Model.SubTypeMeeting, false)
            </div>
        }

        @if (isVisibleSubmittedForTranslation)
        {
            <div class="col-md-2">
                @Confluence.LabelsGroup(
                    Localization.GetText("VER.Homepage.DLP.SubmittedForTranslation"),
                    Confluence.LabelGetBool(Model.SubmittedForTranslation),
                    false)
            </div>
        }
        @if (isVisibleLinkSec)
        {
            <div class="col-md-2">
                <a class="mt15" href="@Model.D2SLink" target="_blank">D2S</a>
            </div>
        }
    </div>
}

<div class="row mb15 ml20">
    <div class="row mb30 pl0">
        @Confluence.Label(Localization.GetText("VER.Homepage.Document"))<br>
        @Confluence.ButtonWord(action: "officeOnlineMainDocument", dataAttributes: new Dictionary<string, string> { { "url", Model.UrlDocument } }, clase: "floatLeft ")
        @Confluence.ButtonLink(Model.Document, action: "officeOnlineMainDocument", dataAttributes: new Dictionary<string, string> { { "url", Model.UrlDocument } }, htmlClass: "pl0")
    </div>

    @if (transmittalMemoOpc != null && transmittalMemoOpc.IsVisible)
    {
        <div class="row mb20 pl0">
            <div class="col-md-11 pl0">
                @Confluence.LabelsGroup(
                Localization.GetText("VER.Homepage.OPC.TransmittalMemoOpc"),
                Confluence.InputTextArea(
                    Model.TransmittalMemoOpc,
                    "transmittalMemoOpc",
                    disabled: isVisibleSubmitByPolicy == false || transmittalMemoOpc.IsReadOnly,
                    required: transmittalMemoOpc.IsRequired,
                    width: "100%",
                    height: "100px",
                    maxLength:3000),
                false)
            </div>
        </div>
    }

    @if (Model.IsReviewedInLoan.GetValueOrDefault())
    {
        <div class="row mb20">
            @Confluence.Label(string.Format(Localization.GetText("VER.REVIEWED.LOAN.LABEL"), Model.ReviewedOperation))
        </div>
    }

    @if (poaRequired != null && poaRequired.IsVisible)
    {
        <div class="row mb20">
            @Confluence.LabelsGroup(
                Localization.GetText("VMR.MM.MeetingRoom.PoaRequired"), Confluence.LabelGetBool(Model.IsPoaRequired), false)
        </div>
    }
</div></div>