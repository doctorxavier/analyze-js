@using IDB.MW.Application.VERModule.ViewModels
@using IDB.MW.Domain.Models.Security
@model VerDocumentRowViewModel

@{
    var documentParticipant = (List<FieldAccessModel>)ViewBag.SecurityDocument;

    var chkPackage = documentParticipant.FirstOrDefault(o => o.FieldName == "chkPackage");

    var colTranslation = documentParticipant.FirstOrDefault(o => o.FieldName == "colTranslation");
    var isVisibleColTranslation = colTranslation != null && colTranslation.IsVisible;
    var classColTranslation = isVisibleColTranslation ? "" : "hide";

    var colClearance = documentParticipant.FirstOrDefault(o => o.FieldName == "colClearance");
    var colClearanceToPdf = documentParticipant.FirstOrDefault(o => o.FieldName == "colClearanceToPdf");
    var isVisibleColClearanceToPdf = colClearanceToPdf != null && colClearanceToPdf.IsVisible;

    var classColClearancePdf = isVisibleColClearanceToPdf ? "" : "hide";

    var isVisibleColClearance = colClearance != null && colClearance.IsVisible;
    var classColClearance = isVisibleColClearance ? "" : "hide";

    var classColGenerateAnnex = Model.IsGenerated ? "" : "hide";

}

<tr data-id class="custom-odd even" role="row">
    <td class="text-center">
        <span data-pagemode="edit">
        </span>
    </td>
    <td class="text-center @classColClearancePdf">
        <span data-pagemode="edit">
            @Confluence.InputCheckbox(true, "documentToClearancePdf", "documentToClearancePdf", disabled: false)
        </span>
    </td>
    <td class="text-center @classColClearance">
        <span data-pagemode="edit">
            @Confluence.InputCheckbox(false, "updatedCheckForClearance", "updatedCheckForClearance", disabled: false)
        </span>
    </td>
    <td class="text-center @classColTranslation">
        <span data-pagemode="edit">
            @Confluence.InputCheckbox(false, "documentToSubmitTranslation", "documentToSubmitTranslation", disabled: false)
        </span>
    </td>
    <td class="text-center hide">
        <span data-pagemode="edit">
            @Confluence.InputCheckbox(Model.IncInPublish, "publishDoc", "publishDoc", disabled: true)
        </span>
    </td>

    <td class="text-left">
        <span data-pagemode="edit">@Confluence.Label(Localization.GetText("VER.Homepage.TabDocuments.OTHER"))</span>
    </td>
    <td class="text-left">
        <span data-pagemode="edit">
            @Confluence.ButtonLink(
               Model.DocumentName,
               action: "officeOnline",
               htmlClass: "text-left",
               dataAttributes: new Dictionary<string, string>
               {
                   { "url", Model.ShpUrlDocument },
                   { "DocumentNameUpload", "documentsName" },
                   { "idb-fieldname", "btnLinkName" }
               })
        </span>
    </td>
    <td class="text-left">
        <span data-pagemode="edit">@Confluence.Label(Model.DocumentNumber)</span>
    </td>
    <td class="text-center">
        <span data-pagemode="edit">@Confluence.Label(Model.PackageVersion)</span>
    </td>

    <td class="text-center">
        <span data-pagemode="edit">@Confluence.LabelGetDate(Model.LastUpdate)</span>
    </td>
    <td class="text-left">
        <span data-pagemode="edit">@Confluence.Label(Model.UserName)</span>
    </td>
    <td class="text-center">
        <span data-pagemode="edit">@Confluence.InputCheckbox(true, "packageDoc", disabled: chkPackage != null && chkPackage.IsReadOnly)</span>
    </td>
    <td class="text-center @classColGenerateAnnex">
        <span data-pagemode="edit">@Confluence.InputCheckbox(false, "isGenerated", "isGenerated", htmlClass: "hide")</span>
    </td>
    <td class="text-right">
        <span data-pagemode="edit">
            @Confluence.ButtonTrash(string.Empty, action: "removeRowDocumentTemp", dataAttributes:
                new Dictionary<string, string>
                {
                    {"DocumentRemove", "documentsRemoveHidden"},
                    {"DocumentReference", Model.DocumentNumber},
                    {"DocumentName" , Model.DocumentName },
                    {"DocumentNameTemp" , Model.DocumentNameTemp },
                    {"isDocumentTemp" , Model.IsNewDocument.ToString() }
                })
        </span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputText(Convert.ToString(Model.VerDocumentId), "verDocumentId")</span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputText(Convert.ToString(Model.DocumentId), "documentId", required: false)</span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputText(Model.DocumentNumber, "documentNumber", required: false)</span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputCheckbox(false, "isRequired", id: "isRequired")</span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputCheckbox(false, "isPrimary", id: "isPrimary")</span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputCheckbox(true, "isOther", id: "isOther")</span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputText(Model.ShpUrlDocument, "shpUrlDocument", id: "shpUrlDocument", required: false)</span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputText(Model.DocumentType.ToString(), "documentType", id: "documentType", required: false)</span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputText(Model.DocumentName, "documentName", id: "documentName", required: false)</span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputCheckbox(Model.IsVer, "isVer", "isVer")</span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputCheckbox(Model.IsVisibleChkPublish, "IsVisibleChkPublish", "IsVisibleChkPublish")</span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputCheckbox(true, "IsNewDocumentForSave", "IsNewDocumentForSave", dataAttributes:
                                       new Dictionary<string, string> { { "DocumentReference", Model.DocumentNumber }, { "DocumentName", Model.DocumentName }, { "DocumentNameTemp", Model.DocumentNameTemp } }))
        </span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputCheckbox(false, "isVersionHistory", id: "isVersionHistory")</span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputCheckbox(Model.IsNewDocument, "IsNewDocument", "IsNewDocument")</span>
    </td>
    <td class="hide">
        <span data-pagemode="edit">@Confluence.InputText(Model.DocumentNameTemp, "DocumentNameTemp", id: "DocumentNameTemp", required: false)</span>
    </td>
</tr>