@using IDB.MVCControls.DataTable.Helpers
@using IDB.MW.Domain.Values.Ver
@model  IDB.MW.Application.VERModule.ViewModels.MyDocument.VerTableViewModel


@{
    var domainShp = Globals.GetSetting("BasePath", string.Empty);
}

<div class="tableNormal" id="tableVirtualEditingRoom">
    @{
        var resultVerTable = Html.RenderDataTable(Model.VerList.ToList());
        resultVerTable.Name("VirtualEditingRoomTable")
            .Columns(columns =>
            {
                columns.Template(c => Confluence.Label(c.OperationNumber))
                    .Header(Localization.GetText("VER.MD.VirtualEditingRoom.OperationNumberLoan"))
                    .CssHeaderClass("w200 sort")
                    .HeaderAttribute("order-type", "text")
                    .Hidden(Model.IsOperation);
                columns.Template(c => Confluence.LabelLink(c.Name, htmlClass: "text-left",
                        action: "goToVer",
                        dataAttributes: new Dictionary<string, string>
                        {
                            {
                                "url", domainShp +
                                VerGlobalValues.LINK_NOT.Replace(
                                VerGlobalValues.OPERATION_NUMBER_REPLACE, c.OperationNumber) +
                                c.VerInstanceId
                            }
                        }))
                    .CssHeaderClass("w400 sort")
                    .Header(Localization.GetText("VER.MD.VirtualEditingRoom.Name"))
                    .HeaderAttribute("order-type", "text")
                    .Hidden(Model.IsOperation);
                columns.Template(c => Confluence.Label(c.MainDocumentName))
                    .Header(Localization.GetText("VER.MD.VirtualEditingRoom.MainDocumentName"))
                    .HeaderAttribute("order-type", "text")
                    .CssHeaderClass("w200 sort");
                columns.Template(c => GetDocumentType(c, Model.IsOperation, domainShp))
                    .Header(Localization.GetText("VER.MD.VirtualEditingRoom.Type"))
                    .HeaderAttribute("order-type", "text")
                    .CssHeaderClass("w200 sort");
                columns.Template(c => GetDocumentId(c, Model.IsOperation))
                    .Header(Localization.GetText("VER.MD.VirtualEditingRoom.DocumentID"))
                    .HeaderAttribute("order-type", "numeric")
                    .CssHeaderClass("w200 sort");
                columns.Template(c => Confluence.Label(c.Status))
                    .Header(Localization.GetText("VER.MD.VirtualEditingRoom.Status"))
                    .HeaderAttribute("order-type", "text")
                    .CssHeaderClass("w200 sort");
            });

        resultVerTable.TableClass = "tableNormal endSpacing";

    }

    @Html.Partial("Controls/DataTable", resultVerTable)

@helper GetDocumentId(
    IDB.MW.Application.VERModule.ViewModels.MyDocument.VerRowViewModel row,
    bool isOperation)
{
    if (isOperation == false || row.IsUser)
    {
        @Confluence.LabelLink(row.DocumentID.ToString(), htmlClass: "text-left",
            action: "goToSHP",
                 dataAttributes: new Dictionary<string, string> { { "url", row.UrlSharepoint } })
    }
    else
    {
        @Confluence.Label(row.DocumentID.ToString())
    }

}

@helper GetDocumentType(
    IDB.MW.Application.VERModule.ViewModels.MyDocument.VerRowViewModel row,
    bool isOperation,
    string domainShp)
{
    if(isOperation)
     {
         @Confluence.LabelLink(row.TypeName, htmlClass: "text-left",
             action: "goToVerInFrame",
             dataAttributes: new Dictionary<string, string>
             {
                 {
                     "url", domainShp +
                            VerGlobalValues.LINK_VER.Replace(
                                VerGlobalValues.OPERATION_NUMBER_REPLACE, row.OperationNumber) +
                            row.VerInstanceId
                 }
             })
     }
     else
     {
         @Confluence.LabelLink(row.TypeName, htmlClass: "text-left",
             action: "goToVer",
             dataAttributes: new Dictionary<string, string>
             {
                 {
                     "url", domainShp +
                            VerGlobalValues.LINK_NOT.Replace(
                                VerGlobalValues.OPERATION_NUMBER_REPLACE, row.OperationNumber) +
                            row.VerInstanceId
                 }
             })
     }
}
</div>
