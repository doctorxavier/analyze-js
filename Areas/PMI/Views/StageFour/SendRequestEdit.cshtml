@using System.Security.Cryptography
@using IDB.MW.Domain.Models.Architecture.Enumerations
@using IDB.MW.Domain.Models.Supervision.Workflow
@model IDB.MW.Domain.Models.OperationProfile.BasicData.BasicDataModel
@{
    
   var operationNumber = Model.OperationNumber;
   string action = ViewBag.PartialAction.ToString();
   var operationId = Model.OperationId.Value;
   var workflow = (K2CallType)ViewBag.Workflow;
   var viewUrl = string.Empty;

   var CallType = (int)workflow;
   var description = string.Empty;
   var instruction = string.Empty;
   var Workflow = string.Empty;
   var ValidatorType = string.Empty;
   switch (workflow)
   {
      case K2CallType.March:
         viewUrl = Url.Action("BeginTlCompleted", "StageFour", new
         {
            area = "PMI",
            operationNumber = Model.OperationNumber,
            classification = ViewBag.classification
         });
         description = Localization.GetText("PMR March Validation Request");
         Workflow = Localization.GetText("PMR March Validation");
         instruction = Localization.GetText("Please add your comments, if necessary, and send your request to validate the Classification.");
         ValidatorType = "WF-PMI-001";
         break;

      case K2CallType.StartUpPlanValidation:
         viewUrl = Url.Action("BeginStartupPlan", "StageFour", new
         {
            area = "PMI",
            operationNumber = Model.OperationNumber
         });
         description = Localization.GetText("Validation Startup Plan Request");
         Workflow = Localization.GetText("PMR Startup Plan Validation");
         instruction = Localization.GetText(@"Please add your comments, if necessary, and send your request to validate the Startup Plan.");
         ValidatorType = "WF-PMI-002";
         break;
      case K2CallType.September:
         viewUrl = Url.Action("BeginTlCompleted", "StageFour", new
         {
            area = "PMI",
            operationNumber = Model.OperationNumber
         });
         description = Localization.GetText("PMR September Validation Request");
         Workflow = Localization.GetText("PMR September Validation");
         instruction = Localization.GetText(@"Please add your comments, if necessary, and send your request to validate the PMR September cycle.");
         ValidatorType = "WF-PMI-003";
         break;

	  case K2CallType.PMRCycleStartup:
		 viewUrl = Url.Action("BeginPMRCycleStartup", "StageFour",
			 new {
				 area = "PMI",
				 classification = ViewBag.classification
			 });

		 description = Localization.GetText("PMR Cycle Validation and PMR Startup Plan Validation");
		 Workflow = Localization.GetText("PMR Cycle Validation and PMR Startup Plan Validation");
		 instruction = Localization.GetText(@"Please add your comments, if necessary, and send your request to validate the Classification.");
		 ValidatorType = "WF-PMI-004";
		 break;
   }
    
    
}

@section CSS
{
   <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/ResultsMatrix/Common/VerifyContent.css")" />
   <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/kendo/kendo.common.min.css")"/>
   <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/esmartGeneral.css")"/>
}
@section JavaScript {
   <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
   <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
   <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Task/AddCommentTask.js")"></script>
   <script type="text/javascript" src="@Url.Content("~/Scripts/plugins/jquery.tablesorter.min.js")"></script>
   <script type="text/javascript" src="@Url.Content("~/Scripts/plugins/jquery.tablednd.js")"></script>
   <script type="text/javascript" src="@Url.Content("~/Scripts/concurrence.js" + @System.Configuration.ConfigurationManager.AppSettings["cache"].ToString())"></script>
   <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/PMI/StageFour/PMIEditRequest.js")"></script>
}

<h2 class="hide">@Localization.GetText("Seccion central")</h2>
<section class="central">
   <div class="mod_contenido_central generic_tasks">
      <input type="hidden" id="UserName" value="@IDBContext.Current.UserName" />
      <!--contracts_and_clauses-->
      <h3 class="headingh2"></h3>
      <div class="operationData">
         <div class="box_subtitle">
            <h4 class="headingh2 title_tag">@description</h4>
         </div>
      </div>
      <h3 class="hide">@Localization.GetText("Contenido central")</h3>

      <div class="editingButtonsEdit marginRight2Con5" style="position: relative; right: 5%;">
         <div class="containerbutton">
            <a href="@viewUrl" class="verify" title="@Localization.GetText("Cancel")">@Localization.GetText("Cancel")</a>
         </div>
         <div class="containerbutton">
            <input type="submit" class="btn-secondary saveButton" title="@Localization.GetText("Save")" value="@Localization.GetText("Save")" />
         </div>
         <div class="containerbutton">
            <input  type="button" class="btn-primary Btn_SubmitAndRequest" title="@Localization.GetText("Save and Request")" value="@Localization.GetText("Save and Request")" />
         </div>
      </div>


      <div class="operationData dataDetails marginTop2Bottom1">
         <div class="data4">
            <p class="dataTitle">@Localization.GetText("Creation on")</p>
            <p>@DateTime.Now.ToString("dd MMM yyyy")</p>
         </div>
         <div class="data4">
            <p class="dataTitle">@Localization.GetText("Due on")</p>
            <p>@*@String.Format("{0:dd MMM yyy}", clause.ExpirationTo)*@</p>
         </div>
         <div class="data2">
            <p class="dataTitle">@Localization.GetText("Workflow")</p>
            <p class="icon workflow">
               @Workflow
            </p>
         </div>

         <div class="data4">
            <p class="dataTitle">@Localization.GetText("Workflow submitter")</p>
            <p>@IDBContext.Current.UserName</p>
         </div>
         <div class="data4">
            <p class="dataTitle">@Localization.GetText("Priority")</p>
            <p></p>
         </div>
      </div>

        @{Html.RenderAction("AdditionalValidators", "Tasks", new {
              area = "Global",
              Code = ValidatorType,
              Editable = false,
              TaskId = Model.CompleteTaskView.TaskId
          });
        }

      <div class="operationData dataDetails">
         <div class="operationData min_padding_left dataSocial">
            <div class="data8">
               <p class="dataTitle">@Localization.GetText("Instructions")</p>
               <p>@instruction</p>
            </div>
         </div>
      </div>
      <div class="operationData dataDetails  marginTop2Bottom1">
         <div class="operationData min_padding_left dataSocial">
            <div class="data8">
               <p class="dataTitle">@Localization.GetText("Content")</p>
               @{
                  Html.RenderAction(action, "StageFour", new { area = "PMI", operationNumber });
               }
            </div>
         </div>
      </div>

      <div class="operationData width_Off min_padding_left dataSocial  ">
         <h4 class="headingh3 cero_left">@Localization.GetText("Comments") </h4>
      </div>

      

      @using (Html.BeginForm("SaveCommentsPMI", "StageFour", FormMethod.Post, new { area = "PMI", @id = "FormCommentsPMI" }))
      {
         @Html.HiddenFor(x => Model.BasicPMIWorkflow.OperationNumber)
         @Html.HiddenFor(x => x.BasicPMIWorkflow.PMRCycleId)
         @Html.HiddenFor(x => Model.BasicPMIWorkflow.ResultsMatrixId)
            
         <input type="hidden" name="operationId" value="@operationId"/> 
         <input type="hidden" name="classification" value="@ViewBag.classification"/> 
         <input type="hidden" name="additionalValidator" value="" />
         <input type="hidden" name="callType" value="@CallType"/>          
           
         <div id="commentslistdinamic">  
         <table id="commentTableUIRI002_edit" class="w100 grid" style="position: relative; left: 4%; width: 92% !important; margin-bottom: 2%;">
            <tbody id="comentContainer">
               @for (int i = 0; i < Model.UserComments.Count; i++)
               {
                  if (Model.UserComments[i].IsEditable)
                  {
                  <tr>
                     <td>
                        <div class="padding10 leftAlign" style="width: 98%">
                           <div class="verticalMargin10 w100 relative h50px" style="height: 0%;">
                              <input type="button" value="Delete" class="deleteTextButton verticalAlignTop absolute absRight DeletePMIRequest">
                           </div>
                           <div class="verticalMargin10 w100">
                              <div class="verticalMargin10 inline-block">@(Model.UserComments[i].Modified == null ? "" : Model.UserComments[i].Modified.Value.ToString("dd MMM yyyy"))</div>
                              <div class="verticalMargin10 inline-block bold marginLeft3">@Model.UserComments[i].ModifiedBy</div>
                           </div>
                           <div class="verticalMargin10 w100">
                              <div class="padding10">
                                 @Html.HiddenFor(x => x.UserComments[i].UserCommentId)
                                 @Html.HiddenFor(x => x.UserComments[i].Text)
                                 @Html.HiddenFor(x => x.UserComments[i].ModifiedBy)
                                 @Html.HiddenFor(x => x.UserComments[i].Modified)

                                 @Html.TextAreaFor(x => x.UserComments[i].Text, new Dictionary<string, Object> { { "class", "txtDescriptionComent" }, { "data-val", "true;" }, { "data-val-required", "Please, complete the mandatory fields" }, { "cols", "300" }, { "rows", "5" },{"maxlength","500"} })
                                 @{Html.ValidateFor(x => x.UserComments[i].Text);}
                              </div>
                           </div>
                        </div>
                     </td>
                  </tr>

                  }
                  else
                  {
                  <tr>
                     <td>
                        <div class="padding10 leftAlign">
                           <div class="verticalMargin10 w100">
                              <div class="verticalMargin10 inline-block">@(Model.UserComments[i].Modified == null ? "" : Model.UserComments[i].Modified.Value.ToString("dd MMM yyyy"))</div>
                              <div class="verticalMargin10 inline-block bold marginLeft3">@Model.UserComments[i].ModifiedBy</div>
                           </div>
                           <div class="verticalMargin10 w100">
                              @Html.HiddenFor(x => x.UserComments[i].UserCommentId)
                              @Html.HiddenFor(x => x.UserComments[i].ModifiedBy)
                              @Html.HiddenFor(x => x.UserComments[i].Modified)
                              @Html.HiddenFor(x => x.UserComments[i].Text)
                              <p class="padding10">@Model.UserComments[i].Text</p>
                           </div>
                        </div>
                     </td>
                  </tr> 
                  }
               }
            </tbody>
         </table>
        </div>
        <div class="editingButtonsEdit" style="min-width: 5%; position: relative; right: 6.3%;">
            <a id="newCommentPMIRequestEdit" href="javascript:void(0)" class="btn-primary marginOff" title=" @Localization.GetText("New")">@Localization.GetText("New")</a>
        </div>
        <p>&nbsp;</p><br/><br/><br/>
         <div class="editingButtonsEdit marginRight2Con5" style="right: 5%;margin-right: 0;">
            <div class="containerbutton">
               <a href="@viewUrl" class="verify" title="@Localization.GetText("Cancel")">@Localization.GetText("Cancel")</a>
            </div>
            <div class="containerbutton">
               <input type="submit" class="btn-secondary" title="@Localization.GetText("Save")" value="@Localization.GetText("Save")" />
            </div>
            <div class="containerbutton">
               <input  type="button" class="btn-primary Btn_SubmitAndRequest" title="@Localization.GetText("Save and Request")" value="@Localization.GetText("Save and Request")" />
            </div>
         </div>
         <style>
            .containerbutton {
               display: inline-block;
               width: 120px;
               height: 50px;
            }
         </style>
      }
   </div>
</section>
<script>
    $(document).ready(function () {
        addComment();
    });
</script>


