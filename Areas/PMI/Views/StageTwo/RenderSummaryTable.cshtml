@using IDB.Presentation.MVC4.Areas.PMI.Controllers

@model IDB.MW.Domain.Models.Supervision.PMI.PMIDetailsModel

@{
    Layout = null;
}

@if (StageController.IsSpecialOperation((List<string>)ViewBag.OperationType))
{
        <table id="tableUIPMI002" class="grid w100">
            <thead>
                <tr>
                    <th rowspan="2">@Localization.GetText("Indicator") (I)</th>
                    <th rowspan="2">@Localization.GetText("Project Indicator Value")</th>
                    <td class="gridHeader" colspan="4">@Localization.GetText("Benchmark Indicator Value")</td>
                    <th rowspan="2">@Localization.GetText("Traffic light")</th>
                </tr>
                <tr class="subHeader">
                    <th><span class="gridSubHeader">@Localization.GetText("Satisfactory")</span></th>
                    <th><span class="gridSubHeader">@Localization.GetText("Alert")</span></th>
                    <th><span class="gridSubHeader">@Localization.GetText("Problem")</span></th>
                    <th><span class="gridSubHeader">@Localization.GetText("Outlier")</span></th>
                </tr>
            </thead>
            <tbody class="alignLeft">
                <tr>
                    <td>@Localization.GetText("% outputs achieved of the plan at operation start up")</td>
                    <td class="centerAlign">@Model.Averageweighted</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>@Localization.GetText("For tracking purpose only")</td>
                </tr>
                <tr>
                    <td>@Localization.GetText("% outputs achieved of the re-planned end of project (EOP)")</td>
                    <td class="centerAlign">@Model.AverageweightedAnnual</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>@Localization.GetText("For tracking purpose only")</td>
                </tr>
                <tr>
                    <td>@Localization.GetText("Environmental and social safeguard performance rating")</td>
                    <td class="centerAlign">@ViewBag.Enviromental</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>N/A</td>
                    <td>@Localization.GetText("For tracking purpose only")</td>
                </tr>
            </tbody>
        </table>
    }
    else
    {
        <table id="tableUIPMI002" class="grid w100">
            <thead>
                <tr>
                    <th rowspan="2"> @Localization.GetText("Indicator") (I)</th>
                    <th rowspan="2"> @Localization.GetText("Project Indicator Value")</th>
                    <td class="gridHeader" colspan="4"> @Localization.GetText("Benchmark Indicator Value")</td>
                    <th rowspan="2"> @Localization.GetText("Traffic light")</th>
                </tr>
                <tr class="subHeader">
                    <th><span class="gridSubHeader"> @Localization.GetText("Satisfactory")</span></th>
                    <th><span class="gridSubHeader"> @Localization.GetText("Alert")</span></th>
                    <th><span class="gridSubHeader"> @Localization.GetText("Problem")</span></th>
                    <th><span class="gridSubHeader"> @Localization.GetText("Outlier")</span></th>
                </tr>
            </thead>
            <tbody class="alignLeft">
                <tr>
                    <td> @Localization.GetText("Accumulated disbursements to country's historic disbursements")</td>
                    <td class="centerAlign">@ViewBag.Disbursementshort</td>
                    <td class="centerAlign">
                        1&ge; I &gt;@(ViewBag.UpperLimit < 0 ?
                            0 : double.Parse(String.Format("{0:0.##}", ViewBag.UpperLimit)))
                    </td>
                    <td>
                        @(ViewBag.UpperLimit < 0 ?
                            0 : double.Parse(String.Format("{0:0.##}", ViewBag.UpperLimit)))&ge; I &ge;@(
                                ViewBag.Problem < 0 ?
                                    0 : double.Parse(String.Format("{0:0.##}", ViewBag.Problem)))
                    </td>
                    <td>
                        @(ViewBag.Problem < 0 ?
                        0 : double.Parse(String.Format("{0:0.##}", ViewBag.Problem)))&gt; I &ge;0
                    </td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>@*+@string.Format("{0:0.##}", Model.AfterEligibility.OutlierMinValue)*@
                    <td>
                        @{
                            if (StageController.IsSpecialOperationOrSUPWithoutRelation(Model.OperationId))
                            {
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("Operation.No.Classification")</span>
                            }
                            else if (Model.AfterEligibility.Accumulated_disbursements <= 1 &&
                              Model.AfterEligibility.Accumulated_disbursements >= Convert.ToDecimal(ViewBag.UpperLimit))
                            {
                                <span class="classification satisfactory inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("SATISFACTORY")</span>
                            }
                            else if (Model.AfterEligibility.Accumulated_disbursements >= Convert.ToDecimal(ViewBag.Problem) &&
                                Model.AfterEligibility.Accumulated_disbursements < Convert.ToDecimal(ViewBag.UpperLimit))
                            {
                                <span class="classification alert inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("ALERT")</span>
                            }
                            else if (Model.AfterEligibility.Accumulated_disbursements >= 0 &&
                                Model.AfterEligibility.Accumulated_disbursements <= Convert.ToDecimal(ViewBag.Problem))
                            {
                                <span class="classification problem inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("PROBLEM")</span>
                            }
                        }
                    </td>
                </tr>
                <tr>
                    <td>@Localization.GetText("Cost Performance Index")-@Localization.GetText("CPI")</td>
                    
                        @{if (@ViewBag.Cost_Performance_Truncated == -1)
                        {
                            <td class="centerAlign">0.00</td>
                        }
                        else
                        {
                        <td class="centerAlign">@ViewBag.Cost_Performance_Truncated</td>
                        }
                        }

                    <td class="centerAlign">@string.Format("{0:0.##}", Model.AfterEligibility.CpiSatisfactoryMinValue)&le; I &le;@string.Format("{0:0.##}", Model.AfterEligibility.CpiSatisfactoryMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.CpiAlertMinValue)&le; I &lt;@string.Format("{0:0.##}", Model.AfterEligibility.CpiAlertMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.CpiProblemMinValue)&le; I &lt;@string.Format("{0:0.##}", Model.AfterEligibility.CpiProblemMaxValue)</td>
                    <td>&gt;@string.Format("{0:0.##}", Model.AfterEligibility.CpiOutlierMinValue)</td>
                    <td>
                        @{
                            if (StageController.IsSpecialOperationOrSUPWithoutRelation(Model.OperationId))
                            {
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("Operation.No.Classification")</span>
                            }
                            else if (@ViewBag.Cost_Performance_Truncated == -1)
                            {
                                <span class="bold verticalAlignMiddle  blackColor"></span>
                            }
                            else if (ViewBag.Cost_Performance_ExactValue < Model.AfterEligibility.CpiProblemMaxValue)
                            {
                                <span class="classification problem inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("PROBLEM")</span>
                            }
                            else if (ViewBag.Cost_Performance_ExactValue >= Model.AfterEligibility.CpiAlertMinValue &&
                                ViewBag.Cost_Performance_ExactValue < Model.AfterEligibility.CpiAlertMaxValue)
                            {
                                <span class="classification alert inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("ALERT")</span>
                            }
                            else if (ViewBag.Cost_Performance_ExactValue >= Model.AfterEligibility.CpiSatisfactoryMinValue &&
                                ViewBag.Cost_Performance_ExactValue <= Model.AfterEligibility.CpiSatisfactoryMaxValue)
                            {
                                <span class="classification satisfactory inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("SATISFACTORY")</span>
                            }
                            else if (ViewBag.Cost_Performance_ExactValue > Model.AfterEligibility.CpiOutlierMinValue)
                            {
                                <span class="classification outlier inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("OUTLIER")</span>
                            }
                        }
                    </td>
                </tr>
                <tr>
                    <td>@Localization.GetText("Cost Performance Index (annual)")-@Localization.GetText("CPI(a)")</td>
                    @*<td class="centerAlign">@string.Format("{0:0.##}", Model.AfterEligibility.valueCost_Performance_Annual)</td>*@
                    @{if (@ViewBag.Cost_Performance_Annual_Truncated == -1)
                    {
                        <td class="centerAlign">0.00</td>
                    }
                    else
                    {
                        <td class="centerAlign">@ViewBag.Cost_Performance_Annual_Truncated</td>
                    }
                    }
                    <td class="centerAlign">@string.Format("{0:0.##}", Model.AfterEligibility.CpiAnnualSatisfactoryMinValue)&le; I &le;@string.Format("{0:0.##}", Model.AfterEligibility.CpiAnnualSatisfactoryMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.CpiAnnualAlertMinValue)&le; I &lt;@string.Format("{0:0.##}", Model.AfterEligibility.CpiAnnualAlertMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.CpiAnnualProblemMinValue)&le; I &lt;@string.Format("{0:0.##}", Model.AfterEligibility.CpiAnnualProblemMaxValue)</td>
                    <td>&gt;@string.Format("{0:0.##}", Model.AfterEligibility.CpiAnnualOutlierMinValue)</td>
                    <td>
                        @{
                            if (StageController.IsSpecialOperationOrSUPWithoutRelation(Model.OperationId))
                            {
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("Operation.No.Classification")</span>
                            }
                            else if (@ViewBag.Cost_Performance_Annual_Truncated == -1)
                            {
                                <span class="bold verticalAlignMiddle  blackColor"> </span>
                            }
                            else if (ViewBag.Cost_Performance_Annual_ExactValue < Model.AfterEligibility.CpiAnnualProblemMaxValue)
                            {
                                <span class="classification problem inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("PROBLEM")</span>
                            }
                            else if (ViewBag.Cost_Performance_Annual_ExactValue >= Model.AfterEligibility.CpiAnnualAlertMinValue &&
                                ViewBag.Cost_Performance_Annual_ExactValue < Model.AfterEligibility.CpiAnnualAlertMaxValue)
                            {
                                <span class="classification alert inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("ALERT")</span>
                            }
                            else if (ViewBag.Cost_Performance_Annual_ExactValue >= Model.AfterEligibility.CpiAnnualSatisfactoryMinValue &&
                            ViewBag.Cost_Performance_Annual_ExactValue <= Model.AfterEligibility.CpiAnnualSatisfactoryMaxValue)
                            {
                                <span class="classification satisfactory inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("SATISFACTORY")</span>
                            }
                            else if (ViewBag.Cost_Performance_Annual_ExactValue > Model.AfterEligibility.CpiAnnualOutlierMinValue)
                            {
                                <span class="classification outlier inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("OUTLIER")</span>
                            }
                        }
                    </td>
                </tr>
                <tr>
                    <td>@Localization.GetText("Schedule Performance Index")-@Localization.GetText("SPI")</td>
                    @*<td class="centerAlign">@string.Format("{0:0.##}", Model.AfterEligibility.valueSchedule_Performance)</td>*@
                    @{if (@ViewBag.Schedule_Performance_Truncated == -1)
                    {
                        <td class="centerAlign">0.00</td>
                    }
                    else
                    {
                        <td class="centerAlign">@ViewBag.Schedule_Performance_Truncated</td>
                    }
                    }
                    <td class="centerAlign">@string.Format("{0:0.##}", Model.AfterEligibility.SpiSatisfactoryMinValue)&le; I &le;@string.Format("{0:0.##}", Model.AfterEligibility.SpiSatisfactoryMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.SpiAlertMinValue)&le; I &lt;@string.Format("{0:0.##}", Model.AfterEligibility.SpiAlertMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.SpiProblemMinValue)&le; I &lt;@string.Format("{0:0.##}", Model.AfterEligibility.SpiProblemMaxValue)</td>
                    <td>&gt;@string.Format("{0:0.##}", Model.AfterEligibility.SpiOutlierMinValue)</td>
                    <td>
                        @{
                            if (StageController.IsSpecialOperationOrSUPWithoutRelation(Model.OperationId))
                            {
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("Operation.No.Classification")</span>
                            }
                            else if (@ViewBag.Schedule_Performance_Truncated == -1)
                            {
                                <span class="bold verticalAlignMiddle blackColor"> </span>
                            }
                            else if (ViewBag.Schedule_Performance_ExactValue < Model.AfterEligibility.SpiProblemMaxValue)
                            {
                                <span class="classification problem inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("PROBLEM")</span>
                            }
                            else if (ViewBag.Schedule_Performance_ExactValue >= Model.AfterEligibility.SpiAlertMinValue && ViewBag.Schedule_Performance_ExactValue < Model.AfterEligibility.SpiAlertMaxValue)
                            {
                                <span class="classification alert inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("ALERT")</span>
                            }
                            else if (ViewBag.Schedule_Performance_ExactValue >= Model.AfterEligibility.SpiSatisfactoryMinValue && ViewBag.Schedule_Performance_ExactValue <= Model.AfterEligibility.SpiSatisfactoryMaxValue)
                            {
                                <span class="classification satisfactory inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("SATISFACTORY")</span>
                            }
                            else if (ViewBag.Schedule_Performance_ExactValue > Model.AfterEligibility.SpiOutlierMinValue)
                            {
                                <span class="classification outlier inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("OUTLIER")</span>
                            }
                        }
                    </td>
                </tr>
                <tr>
                    <td>@Localization.GetText("Schedule Performance Index (annual)")-@Localization.GetText("SPI(a)")</td>
                    @{if (@ViewBag.Schedule_Performance_Annual_Truncated == -1)
                    {
                        <td class="centerAlign">0.00</td>
                    }
                    else
                    {
                        <td class="centerAlign">@ViewBag.Schedule_Performance_Annual_Truncated</td>
                    }
                    }
                    <td class="centerAlign">@string.Format("{0:0.##}", Model.AfterEligibility.SpiAnnualSatisfactoryMinValue)&le; I &le;@string.Format("{0:0.##}", Model.AfterEligibility.SpiAnnualSatisfactoryMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.SpiAnnualAlertMinValue)&le; I &lt;@string.Format("{0:0.##}", Model.AfterEligibility.SpiAnnualAlertMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.SpiAnnualProblemMinValue)&le; I &lt;@string.Format("{0:0.##}", Model.AfterEligibility.SpiAnnualProblemMaxValue)</td>
                    <td>&gt;@string.Format("{0:0.##}", Model.AfterEligibility.SpiAnnualOutlierMinValue)</td>
                    <td>
                        @{
                            if (StageController.IsSpecialOperationOrSUPWithoutRelation(Model.OperationId))
                            {
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("Operation.No.Classification")</span>
                            }
                            else if (@ViewBag.Schedule_Performance_Annual_Truncated == -1)
                            {
                                <span class="bold verticalAlignMiddle  blackColor"> </span>
                            }
                            else if (ViewBag.Schedule_Performance_Annual_ExactValue < Model.AfterEligibility.SpiAnnualProblemMaxValue)
                            {
                                <span class="classification problem inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("PROBLEM")</span>
                            }
                            else if (ViewBag.Schedule_Performance_Annual_ExactValue >= Model.AfterEligibility.SpiAnnualAlertMinValue &&
                                ViewBag.Schedule_Performance_Annual_ExactValue < Model.AfterEligibility.SpiAnnualAlertMaxValue)
                            {
                                <span class="classification alert inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("ALERT")</span>
                            }
                            else if (ViewBag.Schedule_Performance_Annual_ExactValue >= Model.AfterEligibility.SpiAnnualSatisfactoryMinValue &&
                                ViewBag.Schedule_Performance_Annual_ExactValue <= Model.AfterEligibility.SpiAnnualSatisfactoryMaxValue)
                            {
                                <span class="classification satisfactory inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("SATISFACTORY")</span>
                            }
                            else if (ViewBag.Schedule_Performance_Annual_ExactValue > Model.AfterEligibility.SpiAnnualOutlierMinValue)
                            {
                                <span class="classification outlier inline-block verticalAlignMiddle marginRight3"></span>
                                <span class="bold verticalAlignMiddle blackColor">@Localization.GetText("OUTLIER")</span>
                            }
                        }
                    </td>

                </tr>
                <tr>
                    <td>@Localization.GetText("Expected additional execution duration  (months)")</td>
                    @if (ViewBag.ExpectedDuration == -2) {

                        ViewBag.ExpectedDuration = null;
                    }
                    <td class="centerAlign">@ViewBag.ExpectedDuration</td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("For tracking purpose only")</td>
                </tr>
                <tr>
                    <td>@Localization.GetText("% outputs achieved of the plan at operation start up")</td>
                    <td class="centerAlign">@Model.Averageweighted</td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("For tracking purpose only")</td>
                </tr>
                <tr>
                    <td>@Localization.GetText("% outputs achieved of the re-planned end of project (EOP)")</td>
                    <td class="centerAlign">@Model.AverageweightedAnnual</td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("For tracking purpose only")</td>
                </tr>
                <tr>
                    <td>@Localization.GetText("Environmental and social safeguard performance rating")</td>
                    <td class="centerAlign">0</td>
                   <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>
                   <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("N/A")</td>
                    <td class="centerAlign">@Localization.GetText("For tracking purpose only")</td>
                </tr>
            </tbody>
        </table>
    }