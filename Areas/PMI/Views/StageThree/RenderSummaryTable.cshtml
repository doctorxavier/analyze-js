@using IDB.MW.Domain.Models.Architecture.Enumerations
@using IDB.Presentation.MVC4.Areas.PMI.Controllers

@model IDB.MW.Domain.Models.Supervision.PMI.PMIDetailsModel

@{
    Layout = null;
}

@if (StageController.IsSpecialOperation((List<string>)ViewBag.OperationType))
{
        <table id="tableUIPMI002" class="grid w100">
            <thead>
                <tr>
                    <th rowspan="2">@Localization.GetText("Indicator") (I)</th>
                    <th rowspan="2">@Localization.GetText("Project Indicator Value")</th>
                    <td class="gridHeader" colspan="4">@Localization.GetText("Benchmark Indicator Value")</td>
                    <th rowspan="2">@Localization.GetText("Traffic light")</th>
                </tr>
                <tr class="subHeader">
                    <th><span class="gridSubHeader">@Localization.GetText("Satisfactory")</span></th>
                    <th><span class="gridSubHeader">@Localization.GetText("Alert")</span></th>
                    <th><span class="gridSubHeader">@Localization.GetText("Problem")</span></th>
                    <th><span class="gridSubHeader">@Localization.GetText("Outlier")</span></th>
                </tr>
            </thead>
            <tbody class="alignLeft">
               <tr>

                     <td>@Localization.GetText("# of months elapsed after 95% disbursements reached")</td>
              
                    <td class="centerAlign">@Model.Disbur95 @Localization.GetText("months")</td>
                    <td>0≤ I ≤@string.Format("{0:0.##}", Model.Maxlevel) @Localization.GetText("months")</td>
                    <td>@string.Format("{0:0.##}", Model.Maxlevel)< I @string.Format("{0:≤0.##}", Model.Alert) @Localization.GetText("months")</td>
                    <td>>@string.Format("{0:0.##}", Model.Alert) @Localization.GetText("months")</td>
					<td>N/A</td>
                    <td>@Localization.GetText("For tracking purpose only")</td>
             
                      </tr>
                        <tr>
                    <td>@Localization.GetText("% outputs achieved of the plan at operation start up")</td>
                    <td class="centerAlign">@Model.Averageweighted</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("For tracking purpose only")</td>
                </tr>
                <tr>
                    <td>@Localization.GetText("% outputs achieved of the re-planned end of project (EOP)")</td>
                    <td class="centerAlign">@Model.AverageweightedAnnual</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("For tracking purpose only")</td>
                </tr>
                <tr>
                    <td>@Localization.GetText("Environmental and social safeguard performance rating")</td>
                    <td class="centerAlign">@ViewBag.Enviromental</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>                    
                    <td>@Localization.GetText("For tracking purpose only")</td>
                </tr>
            </tbody>
        </table>
    }
    else
    {
    
        <table id="tableUIPMI002" class="grid w100">
            <thead>
                <tr>
                    <th rowspan="2">@Localization.GetText("Indicator") (I)</th>
                    <th rowspan="2"> @Localization.GetText("Project Indicator Value")</th>
                    <td class="gridHeader" colspan="4"> @Localization.GetText("Benchmark Indicator Value")</td>
                    <th rowspan="2"> @Localization.GetText("Traffic light")</th>
                </tr>
                <tr class="subHeader">
                    <th><span class="gridSubHeader"> @Localization.GetText("Satisfactory")</span></th>
                    <th><span class="gridSubHeader"> @Localization.GetText("Alert")</span></th>
                    <th><span class="gridSubHeader"> @Localization.GetText("Problem")</span></th>
                    <th><span class="gridSubHeader"> @Localization.GetText("Outlier")</span></th>
                </tr>
            </thead>
            <tbody class="alignLeft">
               <tr>

                    <td>@Localization.GetText("# of months elapsed after 95% disbursements reached")</td>
              
                    <td class="centerAlign">@Model.Disbur95 @Localization.GetText("months")</td>
                    <td>0≤ I ≤@string.Format("{0:0.##}", Model.Alert) @Localization.GetText("months")</td>
                    <td>@string.Format("{0:0.##}", Model.Alert)< I @string.Format("{0:≤0.##}", Model.Problem) @Localization.GetText("months")</td>
                    <td>>@string.Format("{0:0.##}", Model.Problem) @Localization.GetText("months")</td>
					<td>@Localization.GetText("N/A")</td>
                    <td>
                       @{
                           if (StageController.IsSpecialOperationOrSUPWithoutRelation(Model.OperationId))
                           {
                            <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("Operation.No.Classification")</span>
                           }
                           else if (Model.Disbur95 >= 0 && Model.Disbur95 <= Model.Alert)
                           {
                               <span class="classification satisfactory inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("SATISFACTORY")</span>
                           }
                           else if (Model.Disbur95 > Model.Alert && Model.Disbur95 <= Model.Problem)
                           {
                               <span class="classification alert inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("ALERT")</span>
                           }
                           else if (Model.Disbur95 > Model.Problem)
                           {
                               <span class="classification problem inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("PROBLEM")</span>
                           }
                        }
                    </td>
             
                      </tr>
                <tr>
                    <td> @Localization.GetText("Accumulated disbursements to country's historic disbursements")</td>
                    <td class="centerAlign">@ViewBag.Disbursementshort</td>
                    <td class="centerAlign">1≥ I >@(ViewBag.UpperLimit < 0 ? 0 : double.Parse(String.Format("{0:0.##}",ViewBag.UpperLimit)))</td>
                    <td>@(ViewBag.UpperLimit < 0 ? 0 : double.Parse(String.Format("{0:0.##}",ViewBag.UpperLimit)))≥ I ≥@(ViewBag.Problem < 0 ? 0 : double.Parse(String.Format("{0:0.##}",ViewBag.Problem)))</td>
                    <td>@(ViewBag.Problem< 0 ? 0 : double.Parse(String.Format("{0:0.##}",ViewBag.Problem)))> I ≥0</td>
                    <td>N/A</td>
                    <td>
                        @{
                            if (StageController.IsSpecialOperationOrSUPWithoutRelation(Model.OperationId))
                            {
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("Operation.No.Classification")</span>
                            }
                            else if (Model.AfterEligibility.Accumulated_disbursements <= 1 && Model.AfterEligibility.Accumulated_disbursements >= Convert.ToDecimal(ViewBag.UpperLimit))
                            {
                                <span class="classification satisfactory inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("SATISFACTORY")</span>
                            }
                            else if ( Model.AfterEligibility.Accumulated_disbursements >=  Convert.ToDecimal(ViewBag.Problem) &&  Model.AfterEligibility.Accumulated_disbursements <  Convert.ToDecimal(ViewBag.UpperLimit)) //
                            {
                                <span class="classification alert inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("ALERT")</span>
                            }
                            else if ( Model.AfterEligibility.Accumulated_disbursements >= 0 &&  Model.AfterEligibility.Accumulated_disbursements <=  Convert.ToDecimal(ViewBag.Problem))
                            {
                                <span class="classification problem inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("PROBLEM")</span>
                            }
                        }
                    </td>
                </tr>
                <tr>
                    <td>@Localization.GetText("Cost Performance Index")-@Localization.GetText("CPI")</td>
                    <td class="centerAlign">@ViewBag.Cost_Performance</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.CpiSatisfactoryMinValue)≤ I ≤@string.Format("{0:0.##}", Model.AfterEligibility.CpiSatisfactoryMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.CpiAlertMinValue)≤ I <@string.Format("{0:0.##}", Model.AfterEligibility.CpiAlertMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.CpiProblemMinValue)≤ I <@string.Format("{0:0.##}", Model.AfterEligibility.CpiProblemMaxValue)</td>
                    <td>>@string.Format("{0:0.##}", Model.AfterEligibility.CpiOutlierMinValue)</td>
                    <td>
                        @{
                            if (StageController.IsSpecialOperationOrSUPWithoutRelation(Model.OperationId))
                            {
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("Operation.No.Classification")</span>
                            }
                            else if (@ViewBag.Cost_Performance == " ")
                            {
                                <span class="bold verticalAlignMiddle  blackColor"> </span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Cost_Performance_Calcule) <  Model.AfterEligibility.CpiProblemMaxValue)
                            {
                                <span class="classification problem inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("PROBLEM")</span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Cost_Performance_Calcule) >=  Model.AfterEligibility.CpiAlertMinValue && Convert.ToDecimal(ViewBag.Cost_Performance_Calcule) <  Model.AfterEligibility.CpiAlertMaxValue)
                            {
                                <span class="classification alert inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("ALERT")</span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Cost_Performance_Calcule) >=  Model.AfterEligibility.CpiSatisfactoryMinValue && Convert.ToDecimal(ViewBag.Cost_Performance_Calcule) <=  Model.AfterEligibility.CpiSatisfactoryMaxValue)
                            {
                                <span class="classification satisfactory inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("SATISFACTORY")</span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Cost_Performance_Calcule) > Model.AfterEligibility.CpiOutlierMinValue)
                            {
                                <span class="classification outlier inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("OUTLIER")</span>
                            }
                        }

                    </td>
                </tr>
                <tr>
                    <td>@Localization.GetText("Cost Performance Index (annual)")-@Localization.GetText("CPI(a)")</td>
                    <td class="centerAlign">@ViewBag.Cost_Performance_Annual</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.CpiAnnualSatisfactoryMinValue)≤ I ≤@string.Format("{0:0.##}", Model.AfterEligibility.CpiAnnualSatisfactoryMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.CpiAnnualAlertMinValue)≤ I <@string.Format("{0:0.##}", Model.AfterEligibility.CpiAnnualAlertMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.CpiAnnualProblemMinValue)≤ I <@string.Format("{0:0.##}", Model.AfterEligibility.CpiAnnualProblemMaxValue)</td>
                    <td>>@string.Format("{0:0.##}", Model.AfterEligibility.CpiAnnualOutlierMinValue)</td>
                    <td>
                        @{
                            if (StageController.IsSpecialOperationOrSUPWithoutRelation(Model.OperationId))
                            {
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("Operation.No.Classification")</span>
                            }
                            else if (@ViewBag.Cost_Performance_Annual == " ")
                            {
                                <span class="bold verticalAlignMiddle  blackColor"> </span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Cost_Performance_Annual_Calcule) <  Model.AfterEligibility.CpiAnnualProblemMaxValue)
                            {
                                <span class="classification problem inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("PROBLEM")</span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Cost_Performance_Annual_Calcule) >=  Model.AfterEligibility.CpiAnnualAlertMinValue && Convert.ToDecimal(ViewBag.Cost_Performance_Annual_Calcule) <  Model.AfterEligibility.CpiAnnualAlertMaxValue)
                            {
                                <span class="classification alert inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("ALERT")</span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Cost_Performance_Annual_Calcule) >=  Model.AfterEligibility.CpiAnnualSatisfactoryMinValue && Convert.ToDecimal(ViewBag.Cost_Performance_Annual_Calcule) <=  Model.AfterEligibility.CpiAnnualSatisfactoryMaxValue)
                            {
                                <span class="classification satisfactory inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("SATISFACTORY")</span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Cost_Performance_Annual_Calcule) >  Model.AfterEligibility.CpiAnnualOutlierMinValue)
                            {
                                <span class="classification outlier inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("OUTLIER")</span>
                            }
                        }
                    </td>
                </tr>
                <tr>
                    <td>@Localization.GetText("Schedule Performance Index")-@Localization.GetText("SPI")</td>
                    <td class="centerAlign">@ViewBag.Schedule_Performance</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.SpiSatisfactoryMinValue)≤ I ≤@string.Format("{0:0.##}", Model.AfterEligibility.SpiSatisfactoryMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.SpiAlertMinValue)≤ I <@string.Format("{0:0.##}", Model.AfterEligibility.SpiAlertMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.SpiProblemMinValue)≤ I <@string.Format("{0:0.##}", Model.AfterEligibility.SpiProblemMaxValue)</td>
                    <td>>@string.Format("{0:0.##}", Model.AfterEligibility.SpiOutlierMinValue)</td>
                    <td>
                        @{
                            if (StageController.IsSpecialOperationOrSUPWithoutRelation(Model.OperationId))
                            {
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("Operation.No.Classification")</span>
                            }
                            else if (@ViewBag.Schedule_Performance == " ")
                            {
                                <span class="bold verticalAlignMiddle  blackColor"> </span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Schedule_Performance_Calcule) <  Model.AfterEligibility.SpiProblemMaxValue)
                            {
                                <span class="classification problem inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("PROBLEM")</span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Schedule_Performance_Calcule) >=  Model.AfterEligibility.SpiAlertMinValue && Convert.ToDecimal(ViewBag.Schedule_Performance_Calcule) <  Model.AfterEligibility.SpiAlertMaxValue)
                            {
                                <span class="classification alert inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("ALERT")</span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Schedule_Performance_Calcule) >=  Model.AfterEligibility.SpiSatisfactoryMinValue && Convert.ToDecimal(ViewBag.Schedule_Performance_Calcule) <=  Model.AfterEligibility.SpiSatisfactoryMaxValue)
                            {
                                <span class="classification satisfactory inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("SATISFACTORY")</span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Schedule_Performance_Calcule) >  Model.AfterEligibility.SpiOutlierMinValue)
                            {
                                <span class="classification outlier inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("OUTLIER")</span>
                            }
                        }

                    </td>
                </tr>
                <tr>                    
                    <td> @Localization.GetText("Schedule Performance Index (annual)")-@Localization.GetText("SPI(a)")</td>
                    <td class="centerAlign">@ViewBag.Schedule_Performance_Annual</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.SpiAnnualSatisfactoryMinValue)≤ I ≤@string.Format("{0:0.##}", Model.AfterEligibility.SpiAnnualSatisfactoryMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.SpiAnnualAlertMinValue)≤ I <@string.Format("{0:0.##}", Model.AfterEligibility.SpiAnnualAlertMaxValue)</td>
                    <td>@string.Format("{0:0.##}", Model.AfterEligibility.SpiAnnualProblemMinValue)≤ I <@string.Format("{0:0.##}", Model.AfterEligibility.SpiAnnualProblemMaxValue)</td>
                    <td>>@string.Format("{0:0.##}", Model.AfterEligibility.SpiAnnualOutlierMinValue)</td>
                    <td>
                        @{
                            if (StageController.IsSpecialOperationOrSUPWithoutRelation(Model.OperationId))
                            {
                                <span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("Operation.No.Classification")</span>
                            }
                            else if (@ViewBag.Schedule_Performance_Annual == " ")
                            {
                                <span class="bold verticalAlignMiddle  blackColor"> </span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Schedule_Performance_Annual_Calcule) < Model.AfterEligibility.SpiAnnualProblemMaxValue)
                            {
                                <span class="classification problem inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("PROBLEM")</span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Schedule_Performance_Annual_Calcule) >=  Model.AfterEligibility.SpiAnnualAlertMinValue && Convert.ToDecimal(ViewBag.Schedule_Performance_Annual_Calcule) < Model.AfterEligibility.SpiAnnualAlertMaxValue)
                            {
                                <span class="classification alert inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("ALERT")</span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Schedule_Performance_Annual_Calcule) >= Model.AfterEligibility.SpiAnnualSatisfactoryMinValue && Convert.ToDecimal(ViewBag.Schedule_Performance_Annual_Calcule) <= Model.AfterEligibility.SpiAnnualSatisfactoryMaxValue)
                            {
                                <span class="classification satisfactory inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle  blackColor">@Localization.GetText("SATISFACTORY")</span>
                            }
                            else if (Convert.ToDecimal(ViewBag.Schedule_Performance_Annual_Calcule) > Model.AfterEligibility.SpiAnnualOutlierMinValue)
                            {
                                <span class="classification outlier inline-block verticalAlignMiddle marginRight3"></span><span class="bold verticalAlignMiddle blackColor">@Localization.GetText("OUTLIER")</span>
                            }
                        }
                    </td>
                </tr>
                <tr>
                    <td>@Localization.GetText("Expected additional execution duration  (months)")</td>
                    @if (ViewBag.ExpectedDuration == -2)
                    {
                        ViewBag.ExpectedDuration = null;
                    }
                    <td class="centerAlign">@ViewBag.ExpectedDuration</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td> @Localization.GetText("For tracking purpose only")</td>
                </tr>
                <tr>
                   <td>@Localization.GetText("% outputs achieved of the plan at operation start up")</td>
                    <td class="centerAlign">@Model.Averageweighted</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td> @Localization.GetText("For tracking purpose only")</td>
                </tr>
                <tr>
                     <td>@Localization.GetText("% outputs achieved of the re-planned end of project (EOP)")</td>
                    <td class="centerAlign">@Model.AverageweightedAnnual</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td> @Localization.GetText("For tracking purpose only")</td>
                </tr>
                <tr>
                   <td>@Localization.GetText("Environmental and social safeguard performance rating")</td>
                    <td class="centerAlign">0</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td>@Localization.GetText("N/A")</td>
                    <td> @Localization.GetText("For tracking purpose only")</td>
                </tr>

  
            </tbody>
        </table>
    
    
    
    }
    
    