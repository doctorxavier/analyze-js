@using Areas.DEM
@using IDB.MW.Application.DEMModule.ViewModels
@using IDB.MW.Domain.Values.Dem
@using IDB.Presentation.MVC4.Areas.DEM.Helpers
@using IDB.MW.Application.Core.ViewModels

@model RiskViewModel

<input type="hidden" id="hiddenModel" value="@ViewBag.SerializedViewModel" />
<div class="header">
</div>
<div class="row grouping-section pl15">
    <div class="col-md-12">
        <div class="col-md-12 lblcontent">
            @Confluence.Label(Localization.GetText("R6.DEM.Risk.RiskRatelbl"))
            @Confluence.Label(DemGlobalValues.EQUAL_WITH_SPACES)
            @Confluence.Label(Localization.GetText("R6.DEM.Risk.RiskRatelblEnding"))
            @Confluence.LabelAsterisk()
        </div>
        <div class="col-md-12 mb15 noFloat">
            <span data-pagemode="read">
                @Confluence.LabelBold(Model.RiskRateDescription)
            </span>
            <span data-pagemode="edit">
                @Confluence.InputDropDown(value: Model.RiskRateValue,
                    name: "RiskRate",
                    elements: Model.RiskRateList,
                    required: true,
                    orderAsc: false)
            </span>
        </div>
        @if (!Model.IsUserConvergenceReadAfterApproved)
        {
        <div id="RiskManagementOverallRiskRateCommentsId" class="contentComment paddingLeftRisksCommentsBox paddingPRisksCommentsBox">
            <div class="row pl15" id="commentsRate">
                @foreach (var coments in Model.UserCommentsRate)
                {
                    bool isCommentEditable = DEMCommentsHelper.IsCommentEditable(coments.CheckListStatus);

                    string commentClass = DEMCommentsHelper
                        .CommentBoxClassAccordingDemCurrentVersion(coments.CheckListStatus, coments.IsNewCommentLastVersion);

                    <span class="demLineComment lastComment">
                        @Confluence.CommentsSection(
                          contendRead: OverallRiskRateCommentsRead(coments, Model.RowRateId, commentClass),
                          contentEdit: Model.IsFinalVersionCompletedDem ?
                          OverallRiskRateCommentsRead(coments, Model.RowRateId, commentClass) :
                          DEMHelpers.InputNewCommentBox(
                              section1: Confluence.Label(coments.FullName + " (" + coments.RoleName + ")"),
                              section2: Confluence.Label(coments.Date),
                              section3: Confluence.Label(coments.Stage),
                              section4: isCommentEditable ?
                                  Confluence.ButtonTrash(text: "", action: "deleteTableCommentRiskRow",
                                      dataAttributes: new Dictionary<string, string> {
                                             { "commentId", coments.CommentId.ToString() },
                                             { "idb-fieldname", "btnDeleteComment" },
                                             { "buttonCriterion", "commentsRateId" } }) : null,
                              value: coments.Comment,
                              required: false,
                              maxLength: 1000,
                              name: "txtCommentRate-" + coments.CommentId + "-" + Model.RowRateId,
                              dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                              disabled: !isCommentEditable,
                              isReadOnly: !isCommentEditable,
                              isNewMark: false,
                              isEditMode: isCommentEditable,
                              htmlClass: commentClass))
                    </span>
                }
            </div>
            <div class="mb15 mt10 commentsRateId risksCommentsLabel">
                <span data-pagemode="read">
                    @Confluence.CommentsActionSection(Confluence.LabelLink(
                     Localization.GetText("R6.DEM.General.ShowComments"),
                     name: "showOrHideCommentsRiskRate",
                     action: "showOrHideCommentsRisk",
                     htmlClass: "addNewCommentLabelLink",
                     dataAttributes: new Dictionary<string, string> { { "commentsSectionId", "commentsRate" } }))
                </span>
                <span data-pagemode="edit">
                    @if (!Model.IsFinalVersionCompletedDem)
                    {
                        if (Model.UserCommentsRate.Any(q => q.CheckListStatus == Model.CurrentCheckListVersion.ToUpper()))
                        {
                        @Confluence.ButtonAddComment(text: "", name: "addNewComment",
                                     action: "newCommentRisk",
                                     required: true,
                                     htmlClass: "hide",
                                     dataAttributes:
                                     new Dictionary<string, string> {
                               { "commentsSectionId", "commentsRate" },
                               { "criterionId", ("txtCommentRate-0-" + Model.RowRateId.ToString()) } })
                        }
                        else
                        {
                        @Confluence.ButtonAddComment(text: "",
                                      name: "addNewComment",
                                      action: "newCommentRisk",
                                      required: true,
                                      dataAttributes:
                                          new Dictionary<string, string> {
                                    { "commentsSectionId", "commentsRate" },
                                    { "criterionId", ("txtCommentRate-0-" + Model.RowRateId.ToString()) } })
                        }
                    }

                    @Confluence.LabelLink(Localization.GetText("R6.DEM.General.ShowComments"),
                     name: "showOrHideCommentsRiskRateEdit",
                     action: "showOrHideCommentsRisk",
                     htmlClass: "addNewCommentLabelLink",
                     dataAttributes: new Dictionary<string, string> { { "commentsSectionId", "commentsRate" } })
                </span>
            </div>
        </div>
        }
        <div class="col-md-12 lblcontent">
            @Confluence.Label(Localization.GetText("MrBlue.SafeguardToolkit.EnviromentalPerfomance"))
        </div>
        <div class="col-md-12 mb15 noFloat">
            <span>
                @Confluence.LabelBold(Model.RiskClassificationDescription)
            </span>
        </div>
        @if (!Model.IsUserConvergenceReadAfterApproved)
        {
        <div id="RiskManagementEnvironmentalAndSocialCategoryCommentsId" class="contentComment paddingLeftRisksCommentsBox paddingPRisksCommentsBox">
            <div class="row pl15" id="commentsClassification">
                @foreach (var coments in Model.UserCommentsClassification)
                {
                    bool isCommentEditable = DEMCommentsHelper.IsCommentEditable(coments.CheckListStatus);
                    string commentClass = DEMCommentsHelper
                        .CommentBoxClassAccordingDemCurrentVersion(coments.CheckListStatus, coments.IsNewCommentLastVersion);

                    <span class="demLineComment lastComment">
                        @Confluence.CommentsSection(
                         contendRead: EnvironmentalAndSocialCategoryCommentsRead(coments, Model.RowClassificationId, commentClass),
                         contentEdit: Model.IsFinalVersionCompletedDem ?
                             EnvironmentalAndSocialCategoryCommentsRead(coments, Model.RowClassificationId, commentClass) :
                             DEMHelpers.InputNewCommentBox(
                                  section1: Confluence.Label(coments.FullName + " (" + coments.RoleName + ")"),
                                  section2: Confluence.Label(coments.Date),
                                  section3: Confluence.Label(coments.Stage),
                                  section4: isCommentEditable ?
                                  Confluence.ButtonTrash(text: "", action: "deleteTableCommentRiskRow",
                                  dataAttributes: new Dictionary<string, string> {
                                         { "commentId", coments.CommentId.ToString() },
                                         { "idb-fieldname", "btnDeleteComment" }, { "buttonCriterion", "commentsClassificationId" } }) : null,
                                  value: coments.Comment,
                                  required: false,
                                  maxLength: 1000,
                                  name: "txtCommentClassification-" + coments.CommentId + "-" + Model.RowClassificationId,
                                  dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtCommentClassification" } },
                                  disabled: !isCommentEditable,
                                  isReadOnly: !isCommentEditable,
                                  isNewMark: false,
                                  isEditMode: isCommentEditable,
                                  htmlClass: commentClass))
                    </span>
                }
            </div>
            <div class="mb15 mt10 commentsClassificationId paddingLeftRisksCommentsBox enviromentalPerfomancetRisksCommentsBox">
                <span data-pagemode="read">
                    @Confluence.CommentsActionSection(Confluence.LabelLink(
                     Localization.GetText("R6.DEM.General.ShowComments"),
                         name: "showOrHideCommentsClassification",
                         action: "showOrHideCommentsRisk",
                         htmlClass: "addNewCommentLabelLink",
                         dataAttributes:
                         new Dictionary<string, string> { { "commentsSectionId", "commentsClassification" } }))
                </span>
                <span data-pagemode="edit">
                    @if (!Model.IsFinalVersionCompletedDem)
                    {
                        if (Model.UserCommentsClassification.Any(q => q.CheckListStatus == Model.CurrentCheckListVersion.ToUpper()))
                        {
                            @Confluence.ButtonAddComment(text: "", name: "addNewComment",
                                      action: "newCommentRisk",
                                      required: true,
                                      htmlClass: "hide",
                                      dataAttributes: new Dictionary<string, string> {
                                    { "commentsSectionId", "commentsClassification" },
                                    { "criterionId", ("txtCommentClassification-0-" + Model.RowRateId.ToString()) } });
                        }
                        else
                        {
                            @Confluence.ButtonAddComment(text: "", name: "addNewComment",
                                      action: "newCommentRisk",
                                      required: true,
                                      dataAttributes: new Dictionary<string, string> {
                                    { "commentsSectionId", "commentsClassification" },
                                    { "criterionId", ("txtCommentClassification-0-" + Model.RowRateId.ToString()) } });
                        }
                    }

                    @Confluence.LabelLink(Localization.GetText("R6.DEM.General.ShowComments"),
                     name: "showOrHideCommentsClassificationEdit",
                     action: "showOrHideCommentsRisk",
                     htmlClass: "addNewCommentLabelLink",
                     dataAttributes: new Dictionary<string, string> { { "commentsSectionId", "commentsClassification" } })
                </span>
            </div>
        </div>
        }
    </div>
</div>
<br />
<div class="grouping-section" style="margin-bottom:8px !important;">
    @Confluence.LabelSubTitleGroup(Localization.GetText("R6.DEM.Risk.RisksMatrixHeader"),
        dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "lblRiskTitle" } })
</div>
<div>
    <div class="dataTables_wrapper no-footer">
        <table id="tableRiskMatrix" class="tableNormal">
            <thead>
                <tr data-id="" class="custom even odd" role="row">
                    <th class="text-center col-md-1">@Localization.GetText("R6.DEM.Risk.RiskAssessmentHeader")</th>
                    <th class="text-center col-md-6">@Localization.GetText("R6.DEM.Risk.RisksMatrixHeader")</th>
                    <th class="text-center col-md-5">@Localization.GetText("R6.DEM.Main.InfoAndRefsTitle")</th>
                    <th class="text-center"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var listItem in Model.RiskMatrix)
                {
                    <tr data-id="@listItem.RowId" class="custom even odd DemInputRow" role="row">
                        <td class="text-center">
                            <span data-pagemode="read">
                                @Confluence.InputCheckbox(isChecked: listItem.RiskAssessment, name: "RisksAssess", disabled: true)
                            </span>
                            <span data-pagemode="edit">
                                @Confluence.InputCheckbox(isChecked: listItem.RiskAssessment, name: "RisksAssess", disabled: false)
                            </span>
                        </td>
                        <td>
                            <span>@Confluence.Label(listItem.RiskMatrix)</span>
                        </td>
                        <td class="pr70">
                            <span data-pagemode="read">@Confluence.Label(listItem.InfoAndReferences)</span>
                            <span data-pagemode="edit">
                                @if (!listItem.RiskAssessment)
                                {
                                    @Confluence.Label(listItem.InfoAndReferences)
                                    @Confluence.InputText(value: listItem.InfoAndReferences,
                                        name: "RiskMatrixInfoReferences",
                                        maxLength: 1000,
                                        width: "100%",
                                        required: false,
                                        htmlClass: "hide")
                                }
                                else
                                {
                                    @Confluence.InputText(value: listItem.InfoAndReferences,
                                        name: "RiskMatrixInfoReferences",
                                        maxLength: 1000,
                                        width: "100%",
                                        required: false)

                                    @Confluence.Label(listItem.InfoAndReferences, htmlClass: "hide labelHide")
                                }
                            </span>
                        </td>
                        <td class="IconTr">
                            <span class="iconDemNew"></span>

                            @{
                                bool isThereAnyCommentCreated = false;
                                if (listItem.UserComments != null)
                                {
                                    if (listItem.UserComments.Any() &&
                                        listItem.UserComments.Any(x => x.CheckListStatus == Model.CurrentVersion))
                                    {
                                        isThereAnyCommentCreated = true;

                                        if (listItem.UserComments.Count == 1)
                                        {
                                            if (listItem.UserComments.First().CommentId == 0)
                                            {
                                                isThereAnyCommentCreated = false;
                                            }
                                        }
                                    }
                                }

                                string showActiveRow = isThereAnyCommentCreated ? "blueArrow" : string.Empty;
                            }

                            <button class="buttonShowRow" onclick="CollapseRowTable(this)">
                                <span class="caret @showActiveRow"></span>
                            </button>
                        </td>

                    </tr>
                                if (!Model.IsUserConvergenceReadAfterApproved)
                                {
                                    foreach (var coments in listItem.UserComments)
                                    {
                        <tr data-row-parent-id="@listItem.RowId" class="" style="display: none;">
                            <td colspan="3">
                                <div class="row pl5">
                                    @{
                                        bool isCommentEditable = DEMCommentsHelper.IsCommentEditable(coments.CheckListStatus);
                                        string commentClass = DEMCommentsHelper
                                            .CommentBoxClassAccordingDemCurrentVersion(coments.CheckListStatus, coments.IsNewCommentLastVersion);
                                    }

                                    @Confluence.CommentsSection(
                                                          contendRead: coments.CommentId != 0 ?
                                                              TableRiskMatrixCommentsRead(coments, listItem.RowId, commentClass) : null,
                                                          contentEdit: Model.IsFinalVersionCompletedDem ?
                                                              (coments.CommentId != 0 ?
                                                              TableRiskMatrixCommentsRead(coments, listItem.RowId, commentClass) : null) :
                                                              DEMHelpers.InputNewCommentBox(
                                                                  section1: Confluence.Label(coments.FullName + " (" + coments.RoleName + ")"),
                                                                  section2: Confluence.Label(coments.Date),
                                                                  section3: Confluence.Label(coments.Stage),
                                                                  section4: coments.IsEditable ?
                                                                      Confluence.ButtonTrash(text: "", action: "deleteTableCommentRow",
                                                                      dataAttributes: new Dictionary<string, string> {
                                                     { "commentId", coments.CommentId.ToString() },
                                                     { "idb-fieldname", "btnDeleteComment" } }, htmlClass: "riskTrashDeleteComment") : null,
                                                                  value: coments.Comment,
                                                                  required: false,
                                                                  maxLength: 1000,
                                                                  name: "textComment-" + coments.CommentId + "-" + listItem.RowId,
                                                                  dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                                                                  disabled: !isCommentEditable,
                                                                  isReadOnly: !isCommentEditable, isNewMark: false,
                                                                  isEditMode: isCommentEditable,
                                                                  htmlClass: "fromTable " + commentClass + " riskMatrixComment"))
                                </div>
                            </td>
                           <td></td>
                       </tr>
                                                }
                                            }
                                        }
            </tbody>
        </table>
    </div>
</div>

<br />

<div class="grouping-section" style="margin-bottom:8px !important;">
    @Confluence.LabelSubTitleGroup(Localization.GetText("R6.DEM.Risk.MitigationMeasuresHeader"),
        dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "lblRiskTitle" } })
</div>
<div>
    <div class="dataTables_wrapper no-footer">
        <table id="tableMitigationMeasures" class="tableNormal">
            <thead>
                <tr data-id="" class="custom even odd" role="row">
                    <th class="text-center col-md-1">@Localization.GetText("R6.DEM.Risk.RiskAssessmentHeader")</th>
                    <th class="text-center col-md-6">@Localization.GetText("R6.DEM.Risk.MitigationMeasuresHeader")</th>
                    <th class="text-center col-md-5">@Localization.GetText("R6.DEM.Main.InfoAndRefsTitle")</th>
                    <th class="text-center"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var listItem in Model.MitigationMeasures)
                {
                    <tr data-id="@listItem.RowId" class="custom even odd DemInputRow" role="row">
                        <td class="text-center">
                            <span data-pagemode="read">
                                @Confluence.InputCheckbox(isChecked: listItem.RiskAssessment, name: "MitigationMeasure", disabled: true)
                            </span>
                            <span data-pagemode="edit">
                                @Confluence.InputCheckbox(isChecked: listItem.RiskAssessment, name: "MitigationMeasure", disabled: false)
                            </span>
                        </td>
                        <td>
                            <span>@Confluence.Label(listItem.MitigationMeasures)</span>
                        </td>
                        <td class="pr70">
                            <span data-pagemode="read">@Confluence.Label(listItem.InfoAndReferences)</span>
                            <span data-pagemode="edit">
                                @if (!listItem.RiskAssessment)
                                {
                                    @Confluence.Label(listItem.InfoAndReferences)
                                    @Confluence.InputText(value: listItem.InfoAndReferences,
                                        name: "InfoReferences",
                                        maxLength: 1000,
                                        width: "100%",
                                        required: false,
                                        htmlClass: "hide")

                                }
                                else
                                {
                                    @Confluence.InputText(value: listItem.InfoAndReferences,
                                        name: "InfoReferences",
                                        maxLength: 1000,
                                        width: "100%",
                                        required: false)

                                    @Confluence.Label(listItem.InfoAndReferences, htmlClass: "hide labelHide")
                                }
                            </span>
                        </td>
                        <td class="IconTr">
                            <span class="iconDemNew"></span>
                            @{
                                bool isThereAnyCommentCreated = false;
                                if (listItem.UserComments != null)
                                {
                                    if (listItem.UserComments.Any() &&
                                        listItem.UserComments.Any(x => x.CheckListStatus == Model.CurrentVersion))
                                    {
                                        isThereAnyCommentCreated = true;

                                        if (listItem.UserComments.Count == 1)
                                        {
                                            if (listItem.UserComments.First().CommentId == 0)
                                            {
                                                isThereAnyCommentCreated = false;
                                            }
                                        }
                                    }
                                }

                                string showActiveRow = isThereAnyCommentCreated ? "blueArrow" : string.Empty;
                            }
                            <button class="buttonShowRow" onclick="CollapseRowTable(this)">
                                <span class="caret @showActiveRow"></span>
                            </button>
                        </td>
                    </tr>
                    if (!Model.IsUserConvergenceReadAfterApproved)
                    {
                        foreach (var coments in listItem.UserComments)
                        {
                        <tr data-row-parent-id="@listItem.RowId" class="" style="display: none;">
                            <td colspan="3">
                                <div class="row pl5">
                                    @{
                                        bool isCommentEditable = DEMCommentsHelper.IsCommentEditable(coments.CheckListStatus);
                                        string commentClass = DEMCommentsHelper
                                            .CommentBoxClassAccordingDemCurrentVersion(coments.CheckListStatus, coments.IsNewCommentLastVersion);
                                    }
                                    @Confluence.CommentsSection(
                                                             contendRead: coments.CommentId != 0 ? (
                                                                  TableMitigationMeasuresCommentsRead(coments, listItem.RowId, commentClass)) : null,
                                                              contentEdit: Model.IsFinalVersionCompletedDem ?
                                                                  (coments.CommentId != 0 ?
                                                                  TableMitigationMeasuresCommentsRead(coments, listItem.RowId, commentClass) : null) :
                                                                  DEMHelpers.InputNewCommentBox(
                                                                     section1: Confluence.Label(coments.FullName + " (" + coments.RoleName + ")"),
                                                                     section2: Confluence.Label(coments.Date),
                                                                     section3: Confluence.Label(coments.Stage),
                                                                     section4: isCommentEditable ?
                                                                         Confluence.ButtonTrash(text: "", action: "deleteTableCommentRow",
                                                                             dataAttributes: new Dictionary<string, string> {
                                                            { "commentId", coments.CommentId.ToString() },
                                                            { "idb-fieldname", "btnDeleteComment" } }, htmlClass: "riskTrashDeleteComment") : null,
                                                                     value: coments.Comment,
                                                                     required: false,
                                                                     maxLength: 1000,
                                                                     name: "textComment-" + coments.CommentId + "-" + listItem.RowId,
                                                                     dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                                                                     disabled: !isCommentEditable,
                                                                     isReadOnly: !isCommentEditable,
                                                                     isNewMark: false,
                                                                     isEditMode: isCommentEditable,
                                                                     htmlClass: "fromTable " + commentClass + " riskMatrixComment"))
                                            </div>
                                        </td>
                                        <td></td>
                                    </tr>
                                                }
                                            }
                                        }
            </tbody>
        </table>
        <div data-pagemode="edit">
            @Confluence.InputHidden(value: "", name: "commentDeleteId")
        </div>

    </div>
</div>

@helper OverallRiskRateCommentsRead(UserCommentDEMViewModel comment, int rowId, string commentClass)
{
@DEMHelpers.InputNewCommentBox(
         section1: Confluence.Label(comment.FullName + " (" + comment.RoleName + ")"),
         section2: Confluence.Label(comment.Date),
         section3: Confluence.Label(comment.Stage),
         value: comment.Comment,
         required: false,
         name: "txtCommentRate-" + comment.CommentId + "-" + rowId,
         dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
         disabled: false,
         isReadOnly: true,
         isNewMark: false,
         htmlClass: commentClass)
}

@helper EnvironmentalAndSocialCategoryCommentsRead(UserCommentDEMViewModel comment, int rowClassificationId, string commentClass)
{
@DEMHelpers.InputNewCommentBox(
                                     section1: Confluence.Label(comment.FullName + " (" + comment.RoleName + ")"),
                                     section2: Confluence.Label(comment.Date),
                                     section3: Confluence.Label(comment.Stage),
                                     value: comment.Comment,
                                     required: false,
                                     name: "txtCommentClassification-" + comment.CommentId + "-" + rowClassificationId,
                                     dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtCommentClassification" } },
                                     disabled: false,
                                     isReadOnly: true,
                                     isNewMark: false,
                                     htmlClass: commentClass)
}

@helper TableRiskMatrixCommentsRead(UserCommentDEMViewModel comment, int rowId, string commentClass)
{
    @DEMHelpers.InputNewCommentBox(
                                             section1: Confluence.Label(comment.FullName + " (" + comment.RoleName + ")"),
                                             section2: Confluence.Label(comment.Date),
                                             section3: Confluence.Label(comment.Stage),
                                             value: comment.Comment,
                                             required: false,
                                             name: "textComment-" + comment.CommentId + "-" + rowId,
                                             dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                                             disabled: false,
                                             isReadOnly: true,
                                             isNewMark: false,
                                             htmlClass: "fromTable " + commentClass + " riskMatrixComment")
}

@helper TableMitigationMeasuresCommentsRead(UserCommentDEMViewModel comment, int rowId, string commentClass)
{
    @DEMHelpers.InputNewCommentBox(
                                                section1: Confluence.Label(comment.FullName + " (" + comment.RoleName + ")"),
                                                section2: Confluence.Label(comment.Date),
                                                section3: Confluence.Label(comment.Stage),
                                                value: comment.Comment,
                                                required: false,
                                                name: "textComment-" + comment.CommentId + "-" + rowId,
                                                dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                                                disabled: false,
                                                isReadOnly: true,
                                                isNewMark: false,
                                                htmlClass: "fromTable " + commentClass + " riskMatrixComment")
}
