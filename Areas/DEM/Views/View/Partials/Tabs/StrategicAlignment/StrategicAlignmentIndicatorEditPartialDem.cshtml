@using System.Collections.Generic
@using System.Linq
@using Areas.DEM

@using IDB.Architecture.Language
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Application.OPUSModule.ViewModels.OperationDataService
@using IDB.Presentation.MVC4.Areas.OPUS.Models
@using IDB.Presentation.MVC4.Areas.DEM.Helpers
@using IDB.MW.Application.DEMModule.ViewModels

@model List<SAIndicatorDataViewModel>
<div id="justificationList">
    @foreach (var indicator in Model)
    {
        var classSubindicator = indicator.SubindicatorId.HasValue ? "paddingLeft5Percent" : string.Empty;
        var attrSubindicator = indicator.SubindicatorId.HasValue ? indicator.IndicatorId.ToString() : string.Empty;

        var attrContentIndicator = indicator.SubindicatorId.HasValue ?
            indicator.IndicatorId.ToString() + "-" + indicator.SubindicatorId.ToString() :
            indicator.IndicatorId.ToString();

        var atributeNameSubIndicator = "x";
        var atributeIdSubIndicator = string.Empty;

        var attributes = new Dictionary<string, string>();
        attributes.Add("id", indicator.IndicatorId.ToString());
        attributes.Add("target-section", attrContentIndicator);
        attributes.Add("isValid", indicator.IsValid.ToString().ToLower());
        if (indicator.SubindicatorId.HasValue)
        {
            atributeNameSubIndicator = "data-persist-subindicatorId";
            atributeIdSubIndicator = indicator.SubindicatorId.ToString();
            attributes.Add("persist-subindicatorId", indicator.SubindicatorId.ToString());
        }

        var classSubIndicator = indicator.SubindicatorId == null ? "clearfix" : string.Empty;

        <div class="row @classSubindicator" data-parent-indicator="@attrSubindicator">
            <div class="col-md-12 mb10">
                <div data-pagemode="edit">
                    @Confluence.InputText(
                    indicator.IsValid.ToString(),
                    name: "isValid",
                    htmlClass: "hide",
                    dataAttributes: attributes)
                    @Confluence.InputCheckbox(
                    isChecked: indicator.IsChecked,
                    name: "indicator-Check",
                    label: indicator.IndicatorName,
                    forceValidation: false,
                    disabled: indicator.IsValid ? false : indicator.SubindicatorId == null ? false : true,
                    htmlClass: "titleLabel",
                    dataAttributes: attributes)
                </div>
                <div data-pagemode="read">
                    @Confluence.InputCheckbox(
                    isChecked: indicator.IsChecked,
                    name: "indicator-Check-dis",
                    label: indicator.IndicatorName,
                    forceValidation: false,
                    htmlClass: "titleLabel",
                    disabled: true)
                </div>
            </div>
            <div data-section="@attrContentIndicator">
                @if (indicator.IsComboVisible && indicator.IsComboVisibleSG && indicator.SubindicatorId == null)
                {
                    <div class="col-md-11 paddingLeft70 mb20 resultsMatrixImpactIndicatorsSA">
                        <div class="col-md-4">
                            @Confluence.Label(
                            Localization.GetText("R6.DEM.CountryDevelopmentResults.ResultsMatrixImpactIndicators"),
                            htmlClass: "titleLabel")
                            <div data-pagemode="edit">
                                @(Html.MultiDropDown("impactIndicators-Combo")
                                .Items(ViewBag.ImpactIndicators)
                                .AddAttributes("data-id", indicator.IndicatorId.ToString())
                                .AddAttributes("data-isValid", indicator.IsValid.ToString().ToLower())
                                .AddAttributes(atributeNameSubIndicator, atributeIdSubIndicator)
                                .CanSelectGroup()
                                .Disable(indicator.SubindicatorId == null ? !indicator.IsValid : indicator.IsDeleted.Value ? true : !indicator.IsValid)
                                .SelectedItems(indicator.ImpactIndicator)
                                .HtmlClass("indicatorsCombo"))
                            </div>
                            <div data-pagemode="read">
                                @{
                                    IEnumerable<MultiDropDownItem> impactIndicatorsItem = ((IEnumerable<MultiDropDownItem>)ViewBag.ImpactIndicators);
                                    List<string> impactIndicatorsTex = impactIndicatorsItem.GetSelectedText(indicator.ImpactIndicator);
                                }
                                @foreach (var item in impactIndicatorsTex)
                                {
                                    <div data-pagemode="read">
                                        <label class="labelNormal bold">@item.HtmlEncode()</label>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Confluence.Label(Localization.GetText("R6.DEM.CountryDevelopmentResults.ResultsMatrixOutcomeIndicators"), htmlClass: "titleLabel")
                            <div data-pagemode="edit">
                                @(Html.MultiDropDown("outcomeIndicators-Combo")
                                .Items(ViewBag.OutcomeIndicators)
                                .AddAttributes("data-id", indicator.IndicatorId.ToString())
                                .AddAttributes("data-isValid", indicator.IsValid.ToString().ToLower())
                                .AddAttributes(atributeNameSubIndicator, atributeIdSubIndicator)
                                .CanSelectGroup()
                                .Disable(indicator.SubindicatorId == null ? !indicator.IsValid : indicator.IsDeleted.Value ? true : !indicator.IsValid)
                                .SelectedItems(indicator.OutcomeIndicator)
                                .HtmlClass("indicatorsCombo"))
                            </div>
                            <div data-pagemode="read">
                                @{
                                    IEnumerable<MultiDropDownItem> outcomeIndicatorsItem = ((IEnumerable<MultiDropDownItem>)ViewBag.OutcomeIndicators);
                                    List<string> outcomeIndicatorsText = outcomeIndicatorsItem.GetSelectedText(indicator.OutcomeIndicator);
                                }
                                @foreach (var item in outcomeIndicatorsText)
                                {
                                    <div data-pagemode="read">
                                        <label class="labelNormal bold">@item.HtmlEncode()</label>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Confluence.Label(Localization.GetText("R6.DEM.CountryDevelopmentResults.ResultsMatrixOutputIndicators"),
                            htmlClass: "titleLabel")
                            <div data-pagemode="edit">
                                @(Html.MultiDropDown("outputs-Combo")
                                .Items(ViewBag.Outputs)
                                .AddAttributes("data-id", indicator.IndicatorId.ToString())
                                .AddAttributes("data-isValid", indicator.IsValid.ToString().ToLower())
                                .AddAttributes(atributeNameSubIndicator, atributeIdSubIndicator)
                                .CanSelectGroup()
                                .Disable(indicator.SubindicatorId == null ? !indicator.IsValid : indicator.IsDeleted.Value ? true : !indicator.IsValid)
                                .SelectedItems(indicator.Output)
                                .HtmlClass("indicatorsCombo"))
                            </div>
                            <div data-pagemode="read">
                                @{
                                    IEnumerable<MultiDropDownItem> outputsItems = ((IEnumerable<MultiDropDownItem>)ViewBag.Outputs);
                                    List<string> outputstext = outputsItems.GetSelectedText(indicator.Output);
                                }
                                @foreach (var item in outputstext)
                                {
                                    <div data-pagemode="read">
                                        <label class="labelNormal bold">@item.HtmlEncode()</label>
                                    </div>
                                }
                            </div>
                        </div>
                        @if (indicator.IsERMCompleted)
                    {
                            <div class="col-md-12">
                                @Confluence.InputText("x", name: "validationERMCombos", required: false,
                                htmlClass: "hide",
                                width: "100%",
                                disabled: (!indicator.IsValid),
                                dataAttributes: new Dictionary<string, string>
                                {
                                    { "parsley-valitationermcombos", "data-section=" + attrContentIndicator }
                                })
                            </div>
                        }
                    </div>
                if (indicator.IsERMCompleted)
                {
                    <div name="instructionMessage" data-pagemode="edit" class="col-md-11 paddingLeft85 mb30"
                            data-target-section=attrContentIndicator>
                        @Confluence.Label(Localization.GetText("OP.OD.RMCOMBO.MESSAGE"))
                    </div>
                    }
                }
                @if (indicator.SubindicatorId == null)
                {
                    <div class="col-md-11 paddingLeft70 mb30 resultsMatrixImpactIndicatorsSA" style="margin-left:15px;">
                        <div>
                            @Confluence.Label(Localization.GetText("OP.OD.Justification.Title"), htmlClass: "titleLabel")
                            @if (indicator.IsComboVisible)
                            {
                                <span class="asteriskColor">*</span>
                            }
                        </div>
                        <div data-pagemode="edit">
                            @Confluence.InputTextArea(
                           value: indicator.Justification,
                           name: "justification",
                           id: "justification" + @attributes["id"],
                           maxLength: 1500,
                           dataAttributes: attributes,
                           width: "96.5%",
                           required: indicator.IsComboVisible,
                           disabled:
                           indicator.SubindicatorId == null ? !indicator.IsValid : indicator.IsDeleted.Value ? true : !indicator.IsValid,
                           height: "100px")                          
                        </div>
                        <div data-pagemode="read">
                            <label class="labelNormal bold">@indicator.Justification.HtmlEncode()</label>
                        </div>
                    </div>
                }
                <div class="@classSubIndicator"></div>
            </div>

            @{ var strategicAlignmentCommentsIndicatorId = "StrategicAlignmentCommentsIndicator-" +
                            Convert.ToString(indicator.StrategicAlignmentId); }
            <div id="@strategicAlignmentCommentsIndicatorId"
                 class="StrategicAlignmentCommentsIndicator paddingLeftStrategicCommentsBox">
                @{
                    var divIndicator = string.Empty;
                    var contenidoColapsableDem = string.Empty;
                    contenidoColapsableDem = "ContenidoColapsableDem" + Convert.ToString(indicator.StrategicAlignmentId);
                    int isOneComment = 0;
                    var showNewCommentAddComment = string.Empty;

                    if (indicator.SubindicatorId == null)
                    {
                        divIndicator = "divCommentsIndicator" + Convert.ToString(indicator.IndicatorId);
                        showNewCommentAddComment = "sectionAddLinkCommentStrategic" + Convert.ToString(indicator.IndicatorId);

                    }
                    else
                    {
                        divIndicator = "divCommentsIndicator" +
                            Convert.ToString(indicator.IndicatorId) +
                            Convert.ToString(indicator.SubindicatorId);

                        showNewCommentAddComment = "sectionAddLinkCommentStrategic" +
                            Convert.ToString(indicator.IndicatorId) +
                            Convert.ToString(indicator.SubindicatorId);
                    }

                    int countComment = indicator.UserCommentIndicatorList.Count();

                }
                <div id="@contenidoColapsableDem" class="ContenidoColapsableDem">
                    <div class="col-md-11 contentComment" id="@divIndicator">
                        @if ((indicator.UserCommentIndicatorList != null) && (indicator.UserCommentIndicatorList.Count() > 0))
                        {
                            int i = 0;

                            foreach (var comment in indicator.UserCommentIndicatorList)
                            {
                                i++;
                                bool showLineComment = true;
                                if ((countComment == 1) || (i == countComment))
                                {
                                    showLineComment = false;
                                }

                                bool isCommentEditable = DEMCommentsHelper.IsCommentEditable(comment.CheckListVersion);
                                string commentClass = DEMCommentsHelper
                                    .CommentBoxClassAccordingDemCurrentVersion(comment.CheckListVersion, comment.IsNewCommentLastVersion);

                                if (isCommentEditable)
                                {
                                    isOneComment = 1;
                                }

                                <div class="sectionCommentStrategic mb20 showNewCommentLastVersion lastComment
                             @(comment.IsNewCommentLastVersion ? " isNewCommentLastVersion" : " isNotNewCommentLastVersion")">
                                    @Confluence.CommentsSection(
                             contendRead: SectionStrategicIndicatorCommentsRead(comment, showLineComment, commentClass),
                             contentEdit: indicator.IsFinalVersionCompletedSaDem ?
                                 SectionStrategicIndicatorCommentsRead(comment, showLineComment, commentClass) :
                                 DEMHelpers.InputNewCommentBox(section1: Confluence.Label(comment.FullName + " (" + comment.Role + ")"),
                                 section2: Confluence.Label(comment.Date),
                                 section3: Confluence.Label(comment.Stage.ToUpper()),
                                 section4: (isCommentEditable) ? Confluence.ButtonTrash(text: "",
                                     action: "deleteCommentIndicator",
                                     disabled: indicator.IsValid ? false : indicator.SubindicatorId == null ? false : true,
                                     dataAttributes: new Dictionary<string, string>
                                         {
                                             { "commentId", Convert.ToString(comment.CommentId) },
                                             { "colapsableDem", Convert.ToString(contenidoColapsableDem) },
                                             {"sectionAddLinkCommentStrategic", Convert.ToString(showNewCommentAddComment)},
                                             { "idb-fieldname", "btnDeleteComment" },
                                         }) : null,
                                 value: @Html.Raw(comment.Comment).ToString(),
                                 required: false,
                                 maxLength: 1000,
                                 name: "updateCommentTextIndicator",
                                 dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment02" } },
                                 disabled: !isCommentEditable,
                                 isNewMark: false,
                                 isEditMode: isCommentEditable,
                                 showLine: showLineComment,
                                 htmlClass: commentClass))
                                </div>

                                <div data-pagemode="edit">
                                    @if (isCommentEditable)
                                    {
                                        <div class="sectionUpdateComment">
                                            @Confluence.InputHidden(value: Convert.ToString(comment.CommentId),
                                        name: "updateCommentIdIndicator")
                                            @Confluence.InputHidden(value: Convert.ToString(indicator.IndicatorId),
                                        name: "updateIndicadorIdIndicator")
                                            @Confluence.InputHidden(
                                        value: Convert.ToString(indicator.SubindicatorId != null ? indicator.SubindicatorId : 0),
                                        name: "updateSubIndicadorIdIndicator")
                                        </div>
                                    }
                                </div>
                            }
                        }
                    </div>
                    <span data-pagemode="edit">@Confluence.InputHidden(value: "", name: "deleteCommentsIndicator")</span>
                </div>
                <div class="hiddenAddCommentStrategic" id="@showNewCommentAddComment">
                    <div class="col-md-11 paddingLeftRisksCommentsBox mb30" style="">
                        <div data-pagemode="edit">
                            @Confluence.InputHidden(value: Convert.ToString(isOneComment), name: "hiddenOneCommentStrategic")
                            @Confluence.CommentsActionSection(
                        indicator.IsFinalVersionCompletedSaDem ? null :
                        Confluence.ButtonAddComment(text: "",
                            name: "addNewCommentStrategicAlignment",
                            action: "newCommentIndicator",
                            required: true,
                            disabled: indicator.IsValid ? false : indicator.SubindicatorId == null ? false : true,
                            dataAttributes: new Dictionary<string, string> {
                                {"indicatorId", Convert.ToString(indicator.IndicatorId)},
                                {"subIndicatorId", Convert.ToString(indicator.SubindicatorId != null ? indicator.SubindicatorId : 0)},
                                {"colapsableDem", Convert.ToString(contenidoColapsableDem)},
                                {"sectionAddLinkCommentStrategic", Convert.ToString(showNewCommentAddComment)},
                                { "idb-fieldname", "btnNewComment" } }),
                        Confluence.LabelLink(Localization.GetText("R6.DEM.General.ShowComments"),
                                             name: "showOrHideCommentsSA" + Convert.ToString(indicator.IndicatorId) + "Edit",
                                             action: "showOrHideCommentsStrategicAlignment",
                                             htmlClass: "addNewCommentLabelLink",
                                             dataAttributes: new Dictionary<string, string> {
                                                 { "indicatorId", Convert.ToString(indicator.IndicatorId)},
                                                 { "subIndicatorId", Convert.ToString(indicator.SubindicatorId != null ? indicator.SubindicatorId : 0)},
                                                 { "idb-fieldname", "btnNewComment" } }))
                        </div>
                        <div data-pagemode="read">
                            @Confluence.LabelLink(Localization.GetText("R6.DEM.General.ShowComments"),
                                                  name: "showOrHideCommentsSA" + Convert.ToString(indicator.IndicatorId),
                                                  action: "showOrHideCommentsStrategicAlignment",
                                                  htmlClass: "addNewCommentLabelLink",
                                                  dataAttributes: new Dictionary<string, string> {
                                                      { "indicatorId", Convert.ToString(indicator.IndicatorId)},
                                                      { "subIndicatorId", Convert.ToString(indicator.SubindicatorId != null ? indicator.SubindicatorId : 0)},
                                                      { "idb-fieldname", "btnNewComment" }
                                                  })
                        </div>
                    </div>
                </div>
            </div>
        </div>

        if (indicator.SubindicatorList.Any())
        {
            @Html.Partial("~/Areas/DEM/Views/View/Partials/Tabs/StrategicAlignment/StrategicAlignmentIndicatorEditPartialDem.cshtml", indicator.SubindicatorList)
        }
    }
</div>
    @helper SectionStrategicIndicatorCommentsRead(
    UserCommentIndicatorViewModel comment,
    bool showLineComment,
    string commentClass)
    {
        @DEMHelpers.InputNewCommentBox(
                                       section1: Confluence.Label(comment.FullName + " (" + comment.Role + ")"),
                                       section2: Confluence.Label(comment.Date),
                                       section3: Confluence.Label(comment.Stage.ToUpper()),
                                       value: @Html.Raw(comment.Comment).ToString(),
                                       required: false,
                                       name: "updateCommentTextIndicator",
                                       dataAttributes: new Dictionary<string, string>
                                       { { "idb-fieldname", "txtTextComment01" } },
                                       disabled: false,
                                       isReadOnly: false,
                                       isNewMark: false,
                                       showLine: showLineComment,
                                       htmlClass: commentClass)
    }
