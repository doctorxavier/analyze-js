@using IDB.MW.Application.OPUSModule.ViewModels.OperationDataService
@using IDB.MVCControls.General.Helpers
@using IDB.Architecture.Language
@using IDB.Presentation.MVC4.Areas.DEM.Helpers
@using IDB.MW.Application.DEMModule.ViewModels
@using Areas.DEM

@model SACountryProgramViewModel

<div class="row">
    <div class="col-md-12">
        <div class="row pl15">
            <div class="col-md-4 padding0">
                @Confluence.Label(Localization.GetText("OP.OD.CountryProgram.Title"), htmlClass: "display-block mb5 subtitle")
                @if (Model.IsOperationOPR)
                {
                    @Confluence.LabelLink(Model.NameLink,
                        name: "linktoprofile",
                        dataAttributes: new Dictionary<string, string> {{"url", Model.OPCUrlLink}})
                }
                else
                {
                    @Confluence.Label(Localization.GetText("R6.DEM.CountryProgram.DocumentUnderReview"))
                }
            </div>
            <div class="col-md-8 padding0 alignleft">
                @Confluence.LabelsGroup(Localization.GetText("R6.DEM.StrategicAlignment.OPR_DocumentNumber"),
                    contentAlways: Confluence.Label(Model.DocumentCountryProgram),
                    asterisk: false)
            </div>
        </div>
    </div>

</div>
<div class="row mb20">
    <div class="col-md-12">
        <div class="col-md-12 mb10 pl0">
            @Confluence.Label(Localization.GetText("R6.DEM.CountryProgram.IncludePipeline"),
                htmlClass: "display-block subtitle mb5 labelDataExtraTwo")
            @Confluence.Label(Model.IncludedInPipeline, htmlClass: "labelDataExtra")
        </div>
    </div>
</div>

@if (Model.IsModuleDEM && !Model.IsUserConvergenceReadAfterApproved)
{
    int isOneComment = 0;
    int countComment = Model.UserCommentCountryProgramList.Count();
    bool IsAnyCommentFromCurrentVersionCreated = (Model.UserCommentCountryProgramList != null)
        && (Model.UserCommentCountryProgramList.Any(x => x.CheckListStatus == Model.CurrentVersion));

    <div id="StrategicAlignmentCommentsCountryProgram" class="paddingLeftStrategicCommentsBox">
        <div id="colapseSectionCountryProgram">
            <div class="col-md-11 contentComment" id="divCommentsCountryProgram" style="padding-left: 0px;">
                @if ((Model.UserCommentCountryProgramList != null)
                    && (Model.UserCommentCountryProgramList.Count() > 0))
                {
                    int countAux = 0;

                    foreach (var comment in Model.UserCommentCountryProgramList)
                    {
                        countAux++;
                        bool showLineComment = true;
                        if ((countComment == 1) || (countAux == countComment))
                        {
                            showLineComment = false;
                        }

                        bool isCommentEditable = DEMCommentsHelper.IsCommentEditable(comment.CheckListStatus);
                        string commentClass = DEMCommentsHelper.CommentBoxClassAccordingDemCurrentVersion(comment.CheckListStatus, comment.IsNewCommentLastVersion);
                        isOneComment = isCommentEditable ? 1 : isOneComment;

                        <div class="sectionCountryProgramHide mb20 lastComment">
                            @Confluence.CommentsSection(
                               contendRead: CommentsSectionCountryProgramRead(comment, showLineComment, commentClass),
                               contentEdit: CommentsSectionCountryProgramRead(comment, showLineComment, commentClass))
                        </div>
                    }
                }
            </div>
        </div>

        <div class="hiddenAddCommentSectionCountryProgram" id="sectionAddLinkCommentCountryProgram">
            <div class="col-md-11 paddingLeftRisksCommentsBox mb30 countryStrategyComments" style="margin-left:0px;">
                <div data-pagemode="read">
                    @Confluence.LabelLink(Localization.GetText("R6.DEM.General.ShowComments"),
                        name: "showOrHideCommentsCountryProgramEdit",
                        action: "showOrHideCommentsSectionCountryProgram",
                        htmlClass: "addNewCommentLabelLink",
                        dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "btnNewComment" } })
                </div>
                <div data-pagemode="edit">
                    @Confluence.LabelLink(Localization.GetText("R6.DEM.General.ShowComments"),
                        name: "showOrHideCommentsCountryProgram",
                        action: "showOrHideCommentsSectionCountryProgram",
                        htmlClass: "addNewCommentLabelLink",
                        dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "btnNewComment" } })
                </div>
            </div>
        </div>
    </div>
}

    <div name="regionRelevanceOperation" class="row mb20 @(Model.RelevanceVisible == false ? "hide" : "")">
    <div class="col-md-12 mb5">
        @Confluence.Label(Localization.GetText("OP.OD.CountryProgram.RelevanceOperation"))
        <span class="asteriskColor">*</span>
    </div>
    <div class="col-md-12">
        @*<div>
            <label class="labelNormal bold">@Model.RelevanceOperation.HtmlEncode()</label>
            @DEMHelpers.InputMultiLanguageSimpleAreaReadDem(new IDB.MVCControls.Confluence.Models.MultiLanguageBoxSimpleModel
            {
                EnAreaValue = Model.EnAreaValue,
                EnRequired = true,
                EsAreaValue = Model.EsAreaValue,
                EsRequired = true,
                FrAreaValue = Model.FrAreaValue,
                PtAreaValue = Model.PtAreaValue,
                EnDataAttributes = new Dictionary<string, string> { { "enAreaValue", Model.EnAreaValue } },
                EsDataAttributes = new Dictionary<string, string> { { "esAreaValue", Model.EsAreaValue } },
                EnAreaName = "enRelevanceArea",
                EsAreaName = "esRelevanceArea",
                PtAreaName = "ptRelevanceArea",
                FrAreaName = "frRelevanceArea",
                MaxLength = 1000
            })
        </div>*@
    </div>
</div>

<div data-pagemode="edit">
    @Confluence.InputHidden(value: Convert.ToString(Model.IncludeOPR), name: "hiddenIndicativePipelines")
    @Confluence.InputHidden(value: Convert.ToString(Model.IsOperationOPR), name: "hiddenIsOperationOpr")
</div>

@helper CommentsSectionCountryProgramRead(
    UserCommentCountryProgramViewModel comment, 
    bool showLineComment, 
    string commentClass)
{
    @DEMHelpers.InputNewCommentBox(
                                section1: Confluence.Label(comment.FullName + " (" + comment.Role + ")"),
                                section2: Confluence.Label(comment.Date),
                                section3: Confluence.Label(comment.Stage.ToUpper()),
                                value: @Html.Raw(comment.Comment).ToString(),
                                required: false,
                                name: "updateCommentTextCountryProgram",
                                dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                                disabled: false,
                                isReadOnly: false,
                                isNewMark: false,
                                showLine: showLineComment,
                                htmlClass: commentClass)
}
