@using System.Collections.Generic
@using System.Linq
@using Areas.DEM

@using IDB.Architecture.Language
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Application.DEMModule.ViewModels
@using IDB.MW.Application.OPUSModule.ViewModels.OperationDataService
@using IDB.Presentation.MVC4.Areas.DEM.Helpers
@using IDB.MW.Application.DEMModule.ViewModels

@model List<SAIndicatorDataViewModel>

@foreach (SAIndicatorDataViewModel indicator in Model)
{
    var classSubindicator = indicator.SubindicatorId.HasValue ? "paddingLeft5Percent" : string.Empty;
    var attrSubindicator = indicator.SubindicatorId.HasValue ? indicator.IndicatorId.ToString() : string.Empty;

    var attrContentIndicator = indicator.SubindicatorId.HasValue ?
        indicator.IndicatorId.ToString() + "-" + indicator.SubindicatorId.ToString() :
        indicator.IndicatorId.ToString();

    var attributes = new Dictionary<string, string>();
    attributes.Add("target-section", attrContentIndicator);

    <div class="row @classSubindicator" data-parent-indicator="@attrSubindicator">
        <div class="col-md-12 mb10">
            @Confluence.InputCheckbox(
                isChecked: indicator.IsChecked,
                name: "indicator-Check-dis",
                label: indicator.IndicatorName,
                forceValidation: false,
                htmlClass: "titleLabel",
                disabled: true,
                dataAttributes: attributes)
        </div>
        <div data-section="@attrContentIndicator">
            @if (indicator.IsComboVisible && indicator.IsComboVisibleSG && indicator.SubindicatorId == null)
                {
                <div class="col-md-11 paddingLeft70 mb20 resultsMatrixImpactIndicatorsSA">
                    <div class="col-md-4">
                        @Confluence.Label(
                            Localization.GetText("R6.DEM.CountryDevelopmentResults.ResultsMatrixImpactIndicators"),
                            htmlClass: "titleLabel")

                        @foreach (var item in indicator.ImpactIndicatorText)
                        {
                            <div data-pagemode="read">
                                <label class="labelNormal bold">@item.HtmlEncode()</label>
                            </div>
                            <div data-pagemode="edit">
                                <label class="labelNormal bold">@item.HtmlEncode()</label>
                            </div>
                        }
                    </div>
                    <div class="col-md-4">
                        @Confluence.Label(
                            Localization.GetText("R6.DEM.CountryDevelopmentResults.ResultsMatrixOutcomeIndicators"),
                            htmlClass: "titleLabel")

                        @foreach (var item in indicator.OutcomeIndicatorText)
                        {
                            <div data-pagemode="read">
                                <label class="labelNormal bold">@item.HtmlEncode()</label>
                            </div>
                            <div data-pagemode="edit">
                                <label class="labelNormal bold">@item.HtmlEncode()</label>
                            </div>
                        }
                    </div>
                    <div class="col-md-4">
                        @Confluence.Label(
                            Localization.GetText("R6.DEM.CountryDevelopmentResults.ResultsMatrixOutputIndicators"),
                            htmlClass: "titleLabel")

                        @foreach (var item in indicator.OutputText)
                        {
                            <div data-pagemode="read">
                                <label class="labelNormal bold">@item.HtmlEncode()</label>
                            </div>
                            <div data-pagemode="edit">
                                <label class="labelNormal bold">@item.HtmlEncode()</label>
                            </div>
                        }
                    </div>
                </div>
            }
            @if (indicator.SubindicatorId == null)
            {
                <div class="col-md-11 paddingLeft70 mb30 resultsMatrixImpactIndicatorsSA" style="margin-left:15px;">
                    <div>
                        @Confluence.Label(Localization.GetText("OP.OD.Justification.Title"), htmlClass: "titleLabel")
                    </div>
                    <div>
                        <label class="labelNormal bold">
                            @indicator.Justification.HtmlEncode()
                        </label>
                    </div>
                </div>
            }
            <div class="clearfix"></div>
        </div>

        @if (!indicator.IsUserConvergenceReadAfterApproved)
        {
                var strategicAlignmentCommentsIndicatorId = "StrategicAlignmentCommentsIndicator-" +
                                                                  Convert.ToString(indicator.StrategicAlignmentId);
            

                <div id="@strategicAlignmentCommentsIndicatorId">
                    @{
                var divIndicator = string.Empty;
                var contenidoColapsableDem = string.Empty;
                contenidoColapsableDem = "ContenidoColapsableDem" + Convert.ToString(indicator.StrategicAlignmentId);

                var showNewCommentAddComment = string.Empty;

                if (indicator.SubindicatorId == null)
                {
                    divIndicator = "divCommentsIndicator" + Convert.ToString(indicator.IndicatorId);
                    showNewCommentAddComment = "sectionAddLinkCommentStrategic" + Convert.ToString(indicator.IndicatorId);
                }
                else
                {
                    divIndicator = "divCommentsIndicator" + Convert.ToString(indicator.IndicatorId) +
                        Convert.ToString(indicator.SubindicatorId);

                    showNewCommentAddComment = "sectionAddLinkCommentStrategic" + Convert.ToString(indicator.IndicatorId) +
                        Convert.ToString(indicator.SubindicatorId);
                }

                int countComment = indicator.UserCommentIndicatorList.Count();
                    }
                    <div id="@contenidoColapsableDem">
                        <div class="col-md-11 contentComment" id="@divIndicator">
                            @if ((indicator.UserCommentIndicatorList != null) && (indicator.UserCommentIndicatorList.Count() > 0))
                    {
                        int i = 0;

                        foreach (UserCommentIndicatorViewModel comment in indicator.UserCommentIndicatorList)
                        {
                            i++;
                            bool showLineComment = true;
                            if ((countComment == 1) || (i == countComment))
                            {
                                showLineComment = false;
                            }

                            bool isCommentEditable = DEMCommentsHelper.IsCommentEditable(comment.CheckListVersion);

                            string commentClass = DEMCommentsHelper
                                .CommentBoxClassAccordingDemCurrentVersion(comment.CheckListVersion, comment.IsNewCommentLastVersion);

                    <div class="sectionCommentStrategic mb20 lastComment saLightBlueComments">
                        @Confluence.CommentsSection(
                                   contendRead: 
                                       SectionStrategicAlignmentCommentsRead(comment, showLineComment, commentClass),
                                   contentEdit: 
                                       SectionStrategicAlignmentCommentsRead(comment, showLineComment, commentClass)
                                       )
                    </div>
                        }
                    }
                        </div>
                        <span data-pagemode="edit">@Confluence.InputHidden(value: "", name: "deleteCommentsIndicator")</span>
                    </div>
                    <div class="hiddenAddCommentStrategic" id="@showNewCommentAddComment">
                <div class="col-md-11 paddingLeftRisksCommentsBox mb30 saLightBlueComments" >
                            <div data-pagemode="edit">
                                @Confluence.LabelLink(Localization.GetText("R6.DEM.General.ShowComments"),
                            name: "showOrHideCommentsSA" + Convert.ToString(indicator.IndicatorId) + "Edit",
                            action: "showOrHideCommentsStrategicAlignment",
                            htmlClass: "addNewCommentLabelLink",
                            dataAttributes: new Dictionary<string, string> {
                                {"indicatorId", Convert.ToString(indicator.IndicatorId)},
                                {"subIndicatorId", Convert.ToString(indicator.SubindicatorId != null ? indicator.SubindicatorId : 0)},
                                { "idb-fieldname", "btnNewComment" } })
                            </div>
                            <div data-pagemode="read">
                                @Confluence.LabelLink(Localization.GetText("R6.DEM.General.ShowComments"),
                            name: "showOrHideCommentsSA" + Convert.ToString(indicator.IndicatorId),
                            action: "showOrHideCommentsStrategicAlignment",
                            htmlClass: "addNewCommentLabelLink",
                            dataAttributes: new Dictionary<string, string> {
                                {"indicatorId", Convert.ToString(indicator.IndicatorId)},
                                {"subIndicatorId", Convert.ToString(indicator.SubindicatorId != null ? indicator.SubindicatorId : 0)},
                                { "idb-fieldname", "btnNewComment" } })
                            </div>
                        </div>
                    </div>
                </div>
                }
    </div>
     if (indicator.SubindicatorList.Any())
     {
         @Html.Partial(
             "~/Areas/DEM/Views/View/Partials/Tabs/StrategicAlignment/StrategicAlignmentIndicatorReadPartialDem.cshtml", 
             indicator.SubindicatorList)
     }
 }

@helper SectionStrategicAlignmentCommentsRead(
    UserCommentIndicatorViewModel comment, 
    bool showLineComment, 
    string commentClass)
{
    @DEMHelpers.InputNewCommentBox(
                                        section1: Confluence.Label(comment.FullName + " (" + comment.Role + ")"),
                                        section2: Confluence.Label(comment.Date),
                                        section3: Confluence.Label(comment.Stage.ToUpper()),
                                        value: Html.Raw(comment.Comment).ToString(),
                                        required: false,
                                        name: "updateCommentTextIndicator",
                                        dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                                        disabled: false,
                                        isReadOnly: true,
                                        isNewMark: false,
                                        showLine: showLineComment,
                                        htmlClass: commentClass)

}
