@using System.Linq
@using Areas.DEM

@using IDB.Architecture.Language
@using IDB.MW.Application.OPUSModule.ViewModels.OperationDataService
@using IDB.MW.Infrastructure.Configuration
@using IDB.Presentation.MVC4.Areas.DEM.Helpers
@using IDB.MW.Application.DEMModule.ViewModels

@model SACountryStrategyViewModel
@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var validationPercentRegExp = appSettings.ValidationPercentRegExp;
}
@if (Model.IsCountryStrategyApproved && !Model.HasApprCompleted)
{
    <div class="row">
        <div class="grouping-section">
            <div class="groupColumn col-md-4" style="border-right: none;">
                <div class="col-md-12 lblcontent">
                    @Confluence.Label(Localization.GetText("OP.OD.CountryStrategy.Title"))
                </div>
                <div class="col-md-12">
                    @Confluence.LabelLink(Model.NameLink, name: "linktoprofile", disabled: false, dataAttributes: new Dictionary<string, string> { { "url", Model.UrlLink } })
                </div>
            </div>
            <div class="groupColumn col-md-4">
                <div class="col-md-12 lblcontent">
                    @Confluence.Label(Localization.GetText("OP.OD.CountryStrategy.GNDocumentNumber"))
                </div>
                <div class="col-md-12 lblvalue">
                    @Confluence.LabelBold(Model.GNDocumentNumber)
                </div>
            </div>
        </div>
    </div>
}
else if (Model.CurrentObjectivesList.Any())
{
    <div class="row">
        <div class="grouping-section">
            <div class="groupColumn col-md-4" style="border-right: none;">
                <div class="col-md-12 lblcontent">
                    @Confluence.Label(Localization.GetText("OP.OD.CountryStrategy.Title"))
                </div>
                <div class="col-md-12">
                    @Confluence.LabelBold(Model.NameLink)
                </div>
            </div>
            <div class="groupColumn col-md-4">
                <div class="col-md-12 lblcontent">
                    @Confluence.Label(Localization.GetText("OP.OD.CountryStrategy.GNDocumentNumber"))
                </div>
                <div class="col-md-12 lblvalue">
                    @Confluence.LabelBold(Model.GNDocumentNumber)
                </div>
            </div>
        </div>
    </div>
}


<div class="row mb20">
    @if (Model.IsObjecticeAligned == true || Model.IsObjecticeAligned == null)
    {
        <div data-content="aligned-read">
            @if (Model.CurrentObjectivesList.Any())
            {
                <div class="col-md-12 mb20">
                    @Confluence.Label(text: Localization.GetText("OP.OD.CountryStrategy.Objective"))
                    <span class="asteriskColor"> *</span>
                </div>
            }
        </div>
    }
    else
    {
        <div data-content="notAligned-read">
            @if (Model.CurrentObjectivesList.Any())
            {
                <div class="col-md-12 mb20">
                    @Confluence.Label(text: Localization.GetText("OP.OD.CountryStrategy.ObjectiveNotAligned"))
                    <span class="asteriskColor"> *</span>
                </div>
            }
        </div>
    }
    @if (Model.CurrentObjectivesList.Any())
    {
        <div class="pl15 mb20">
            @foreach (var objective in Model.CurrentObjectivesList)
            {
                <div class="col-md-12 padding0 mb10 @(objective.OperationCsObjectiveId == null ? "hide" : "")" 
                     data-type="operationObjective" 
                     data-id="@(!objective.IsObjectiveAligned ? "SOCA-" + objective.ObjectiveId.ToString() : objective.ObjectiveId.ToString())">

                    <div class="col-md-5 padding0 selected-objective">
                        @Confluence.LabelBold(objective.NameObjective)
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (Model.IsModuleDEM && !Model.IsUserConvergenceReadAfterApproved)
{
    int countComment = Model.UserCommentCountryList.Count();

    <div id="StrategicAlignmentCommentsCountryStrategy">

        <div id="colapseSectionCountryStrategy">
            <div class="col-md-11 contentComment" id="divCommentsCountryStrategy" style="padding-left: 0px;">
                @if ((Model.UserCommentCountryList != null) && (Model.UserCommentCountryList.Count() > 0))
                {
                    int countAux = 0;

                    foreach (var comment in Model.UserCommentCountryList)
                    {
                        countAux++;
                        bool showLineComment = true;
                        if ((countComment == 1) || (countAux == countComment))
                        {
                            showLineComment = false;
                        }

                        string commentClass = 
                            DEMCommentsHelper.CommentBoxClassAccordingDemCurrentVersion(comment.CheckListStatus, comment.IsNewCommentLastVersion);

                        <div class="sectionCountryStrategyHide mb20 showNewCommentLastVersion lastComment">
                            @Confluence.CommentsSection(
                               contendRead: CommentsSectionCountryStrategyRead(comment, showLineComment, commentClass),
                               contentEdit: CommentsSectionCountryStrategyRead(comment, showLineComment, commentClass))
                        </div>
                    }
                }
            </div>
        </div>

        <div class="hiddenAddCommentSectionCountryStrategy" id="sectionAddLinkCommentCountryStrategy">
            <div class="col-md-11 paddingLeftRisksCommentsBox mb30 countryStrategyComments" style="margin-left:0px;">
                <div data-pagemode="edit">
                    @Confluence.LabelLink(Localization.GetText("R6.DEM.General.ShowComments"),
                        name: "showOrHideCommentsCountryStrategyEdit",
                        action: "showOrHideCommentsSectionCountryStrategy",
                        htmlClass: "addNewCommentLabelLink",
                        dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "btnNewComment" } })
                </div>
                <div data-pagemode="read">
                    @Confluence.LabelLink(Localization.GetText("R6.DEM.General.ShowComments"),
                        name: "showOrHideCommentsCountryStrategy",
                        action: "showOrHideCommentsSectionCountryStrategy",
                        htmlClass: "addNewCommentLabelLink",
                        dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "btnNewComment" } })
                </div>
            </div>
        </div>
    </div>
}

@helper CommentsSectionCountryStrategyRead(
    UserCommentCountryStrategyViewModel comment, 
    bool showLineComment, 
    string commentClass)
{
    @DEMHelpers.InputNewCommentBox(
                                section1: Confluence.Label(comment.FullName + " (" + comment.Role + ")"),
                                section2: Confluence.Label(comment.Date),
                                section3: Confluence.Label(comment.Stage.ToUpper()),
                                value: @Html.Raw(comment.Comment).ToString(),
                                required: false,
                                name: "updateCommentTextCountryStrategy",
                                dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                                disabled: false,
                                isReadOnly: true,
                                isNewMark: comment.IsNewCommentLastVersion,
                                showLine: showLineComment,
                                htmlClass: commentClass)

}
