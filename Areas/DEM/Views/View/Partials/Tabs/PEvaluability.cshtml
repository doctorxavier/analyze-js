@using Areas.DEM
@using IDB.MW.Application.DEMModule.ViewModels
@using IDB.Presentation.MVC4.Areas.DEM.Helpers
@using IDB.MW.Application.Core.ViewModels

@model EvaluabilityTabViewModel

    <input type="hidden" id="hiddenModel" value="@ViewBag.SerializedViewModel" />
    <div class="header">
        <div class="row">
            <div class="col-md-12">
                <div class="float-right pt5">
                    @Confluence.ButtonColapseAll(
                        new List<string> { "tableEvaluability", "tableEconomicAnalysis", "tableMonitoringAndEvaluation" }, 
                        dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "btnCollapse" } })
                </div>
            </div>
        </div>
    </div>

    <div>
        <div class="dataTables_wrapper no-footer">
            <table id="tableEvaluability" class="tableNormal">
                <thead>
                    <tr>
                        <th class="tree icon DemSubtitleAlignment">
                            <span class="icon" onclick="CollapseTable(this)">-</span>
                            <span class=""></span>
                        </th>
                        <td colspan="5" class="DemSubtitleAlignment">
                            @Confluence.LabelSubTitleGroup(Localization.GetText("R6.DEM.Evaluability.ProgramLogic"))
                        </td>
                    </tr>
                    <tr data-id="">
                        <td class="tree"><span></span><span class=""></span></td>
                        <th class="col-md-1">@Localization.GetText("R6.DEM.Evaluability.Evaluability")</th>
                        <th class="col-md-1 text-center">@Localization.GetText("R6.DEM.Evaluability.Score")</th>
                        <th class="col-md-6">@Localization.GetText("R6.DEM.Evaluability.CriteriaDescription")</th>
                        <th class="col-md-4">@Localization.GetText("R6.DEM.Main.InfoAndRefsTitle")</th>
                        <th class="col-md-2"></th>
                    </tr>
                </thead>
                <tbody>
                    @PrintEvaluabilityTableBody(Model.ProgramLogic)
                </tbody>
            </table>
        </div>
    </div>
    <div>
        <div class="dataTables_wrapper no-footer">
            <table id="tableEconomicAnalysis" class="tableNormal">
                <thead>
                    <tr>
                        <th class="tree icon DemSubtitleAlignment">
                            <span class="icon" onclick="CollapseTable(this)">-</span>
                            <span class=""></span>
                        </th>
                        <td colspan="5" class="DemSubtitleAlignment">
                            @Confluence.LabelSubTitleGroup(Localization.GetText("R6.DEM.Evaluability.EconomicAnalysis"))
                        </td>
                    </tr>
                    <tr data-id="">
                        <td class="tree"><span></span><span class=""></span></td>
                        <th class="col-md-1">@Localization.GetText("R6.DEM.Evaluability.Evaluability")</th>
                        <th class="col-md-1 text-center">@Localization.GetText("R6.DEM.Evaluability.Score")</th>
                        <th class="col-md-6">@Localization.GetText("R6.DEM.Evaluability.CriteriaDescription")</th>
                        <th class="col-md-4">@Localization.GetText("R6.DEM.Main.InfoAndRefsTitle")</th>
                        <th class="col-md-2"></th>
                    </tr>
                </thead>
                <tbody>
                    @PrintEvaluabilityTableBodyTwo(Model.EconomicAnalysis)
                </tbody>
            </table>
        </div>
    </div>

    <div>
        <div class="dataTables_wrapper no-footer">
            <table id="tableMonitoringAndEvaluation" class="tableNormal">
                <thead>
                    <tr>
                        <th class="tree icon DemSubtitleAlignment">
                            <span class="icon" onclick="CollapseTable(this)">-</span>
                            <span class=""></span>
                        </th>
                        <td colspan="5" class="DemSubtitleAlignment">
                            @Confluence.LabelSubTitleGroup(Localization.GetText("R6.DEM.Evaluability.MonitoringEvaluation"))
                        </td>
                    </tr>
                    <tr data-id="">
                        <td class="tree"><span></span><span class=""></span></td>
                        <th class="col-md-1">@Localization.GetText("R6.DEM.Evaluability.Evaluability")</th>
                        <th class="col-md-1 text-center">@Localization.GetText("R6.DEM.Evaluability.Score")</th>
                        <th class="col-md-6">@Localization.GetText("R6.DEM.Evaluability.CriteriaDescription")</th>
                        <th class="col-md-4">@Localization.GetText("R6.DEM.Main.InfoAndRefsTitle")</th>
                        <th class="col-md-2"></th>
                    </tr>
                </thead>
                <tbody>
                    @PrintEvaluabilityTableBodyTwo(Model.MonitoringAndEvaluation)
                </tbody>
            </table>
            <div data-pagemode="edit">
                @Confluence.InputHidden(value: "", name: "commentDeleteId")
            </div>
        </div>
    </div>


@helper PrintEvaluabilityTableBody(IList<SheetEvaluabilitySimple> collection)
{
    foreach (SheetEvaluabilitySimple listItem in collection)
    {
        @PrintRow(listItem)

        foreach (var child1 in listItem.Childs)
        {
            @PrintRow(child1, listItem.IdSheet.ToString())

            foreach (var child2 in child1.Childs)
            {
                @PrintRow(child2, child1.IdSheet.ToString())

                foreach (var child3 in child2.Childs)
                {
                    @PrintRow(child3, child2.IdSheet.ToString())

                    foreach (var child4 in child3.Childs)
                    {
                        @PrintRow(child4, child3.IdSheet.ToString())
                    }
                }
            }
        }
    }
}

@helper PrintEvaluabilityTableBodyTwo(IList<SheetEvaluabilitySimple> collection)
{

    foreach (SheetEvaluabilitySimple listItem in collection)
    {
        @PrintRowTwo(listItem)

        foreach (var child1 in listItem.Childs)
        {
            @PrintRowTwo(child1, listItem.IdSheet.ToString())

            foreach (var child2 in child1.Childs)
            {
                @PrintRowTwo(child2, child1.IdSheet.ToString())

                foreach (var child3 in child2.Childs)
                {
                    @PrintRowTwo(child3, child2.IdSheet.ToString())

                    foreach (var child4 in child3.Childs)
                    {
                        @PrintRowTwo(child4, child3.IdSheet.ToString())
                    }
                }
            }
        }
    }
}

@helper PrintRow(SheetEvaluabilitySimple child, string parentSheetId = null)
{
    var levelClass = !child.IsChild ? "DemTableHeaderLevel" + child.Level : string.Empty;
    var paddingClass = child.IsChild ? "DemChildPadding" : string.Empty;
    var childClass = child.IsChild ? "ChildClass" : "HeaderLevel" + child.Level;

    var parentSheetIdValue = parentSheetId == null ? string.Empty : parentSheetId;

    <tr data-id="@child.IdSheet" data-levelparent-id="@parentSheetId" 
        class="custom even odd @levelClass DemScoreFind @child.CssItem rowWithGrey" 
        role="row" 
        style="height: 56px;">

        <td class="tree hiddenBorder"><span></span></td>
        <td class="text-center @childClass">
            <span data-pagemode="read">
                @if (!child.HexCode.Equals("0300100030002"))
                {
                    @Confluence.InputCheckbox(isChecked: child.CheckAdd, name: "chkEvaluability", disabled: true)
                }
            </span>
            <span data-pagemode="edit" class="containerButtonCheck">
                @if (!child.HexCode.Equals("0300100030002"))
                {
                    @Confluence.InputCheckbox(
                        isChecked: child.CheckAdd,
                        name: "chkEvaluability",
                        disabled: !child.IsChild,
                        htmlClass: "js_buttonCheck",
                        dataAttributes: new Dictionary<string, string> { { "scoreid", Convert.ToString(child.Score) } })
                }
            </span>
        </td>
        <td class="text-center">
            <span data-pagemode="read">
                @Confluence.Label(child.IsScore ? child.CheckAdd ? child.Score.ToString() : "0.00" : "",
                    htmlClass: "js_containerData score")
            </span>
            <span data-pagemode="edit" class="editEvaluabilityClose">
                @Confluence.Label(child.IsScore ? child.CheckAdd ? child.Score.ToString() : "0.00" : "",
                    htmlClass: "js_containerData score")
            </span>
        </td>

        <td>
                @if (child.IsChild)
                {
                    <span class="level2">
                        @Confluence.Label(child.Criteria, htmlClass: "level2")
                    </span>
                }
                else
                {
                    <span>
                    @Confluence.Label(child.Criteria)
                    </span>
                }

</td>
        <td class="pr50">

            @if (string.IsNullOrEmpty(levelClass))
            {   <span data-pagemode="read">@Confluence.Label(child.InfoAndReferences)</span>

                <span data-pagemode="edit">
                    @if (!child.CheckAdd)
                    {
                        @Confluence.Label(child.InfoAndReferences)
                        @Confluence.InputText(value: child.InfoAndReferences,
                            name: "InvInfoReferences",
                            width: "95%",
                            maxLength: 1000,
                            required: false,
                            htmlClass: "hide",
                            placeholder: Localization.GetText("R7.DEM.Additionality.Justification"))
                    }
                    else
                    {
                        @Confluence.InputText(value: child.InfoAndReferences,
                            name: "InvInfoReferences",
                            width: "95%",
                            maxLength: 1000,
                            required: false,
                            placeholder: Localization.GetText("R7.DEM.Additionality.Justification"))

                        @Confluence.Label(child.InfoAndReferences, htmlClass: "hide labelHide")
                    }
                </span>
            }
        </td>

        <td class="IconTr">
            <span class="iconDemNew"></span>
            @if (child.IsChild)
            {
                if (child.CriterionAditionalInfo != null)
                {

                    <span class="is-relative">
                        @Confluence.Information(child.CriterionAditionalInfo)
                    </span>
                }

                bool isThereAnyCommentCreated = false;
                if (child.UserComments != null)
                {
                    if (child.UserComments.Any() &&
                        child.UserComments.Any(x => x.CheckListStatus == Model.CurrentVersion))
                    {
                        isThereAnyCommentCreated = true;

                        if (child.UserComments.Count == 1)
                        {
                            if (child.UserComments.First().CommentId == 0)
                            {
                                isThereAnyCommentCreated = false;
                            }
                        }
                    }
                }

                string showActiveRow = isThereAnyCommentCreated ? "blueArrow" : string.Empty;

                <button class="buttonShowRow" onclick=" CollapseRowTable(this) ">
                    <span class="caret @showActiveRow"></span>
                </button>
            }
        </td>
    </tr>
if (child.IsChild)
{
    if (!Model.IsUserConvergenceReadAfterApproved)
    {
        int i = 0;
        int countComment = child.UserComments.Count();
        foreach (var comment in child.UserComments)
        {
            i++;
            bool showLineComment = true;
            if ((countComment == 1) || (i == countComment))
            {
                showLineComment = false;
            }

            bool isCommentEditable = DEMCommentsHelper.IsCommentEditable(comment.CheckListStatus);
            string commentClass = DEMCommentsHelper
                .CommentBoxClassAccordingDemCurrentVersion(comment.CheckListStatus, comment.IsNewCommentLastVersion);

            <tr data-row-parent-id="@child.IdSheet" style="display: none;">
                <td class="tree"><span></span></td>
                <td colspan="5">
                    <div class="row">
                        <div class="col-md-12">
                            @Confluence.CommentsSection(
                         contendRead: comment.CommentId != 0 ? (
                                    PrintRowCommentsRead(comment, child.CriterionId, child.IdSheet, isCommentEditable, showLineComment, commentClass)) : null,
                         contentEdit: Model.IsFinalVersionCompletedDem ? comment.CommentId != 0 ? (
                                    PrintRowCommentsRead(comment, child.CriterionId, child.IdSheet, isCommentEditable, showLineComment, commentClass)) : null :
                             DEMHelpers.InputNewCommentBox(
                                 section1: Confluence.Label(comment.FullName + " (" + comment.RoleName + ")"),
                                 section2: Confluence.Label(comment.Date),
                                 section3: Confluence.Label(comment.Stage),
                                 section4: isCommentEditable ?
                                     Confluence.ButtonTrash(text: "", action: "deleteTableCommentRow",
                                         dataAttributes: new Dictionary<string, string> { { "commentId", comment.CommentId.ToString() },
                                                { "idb-fieldname", "btnDeleteComment" } }) : null,
                                 value: comment.Comment,
                                 required: false,
                                 maxLength: 1000,
                                 name: "textComment-" + comment.CommentId + "-" + child.CriterionId + "-" + child.IdSheet,
                                 dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                                 showLine: showLineComment,
                                 disabled: !isCommentEditable,
                                 isReadOnly: !isCommentEditable,
                                 isNewMark: false,
                                 isEditMode: isCommentEditable,
                                 htmlClass: "fromTable " + commentClass))
                        </div>
                    </div>
                </td>
            </tr>
            }
        }
    }
}

@helper PrintRowTwo(SheetEvaluabilitySimple child, string parentSheetId = null)
{
var levelClass = !child.IsChild ? "DemTableHeaderLevel" + child.Level : string.Empty;
var paddingClass = child.IsChild ? "DemChildPadding" : string.Empty;
var childClass = child.IsChild ? "ChildClass" : "HeaderLevel" + child.Level;

var parentSheetIdValue = parentSheetId == null ? string.Empty : parentSheetId;

    <tr data-id="@child.IdSheet" data-levelparent-id="@parentSheetId" 
        class="custom even odd @levelClass DemScoreFind @child.CssItem rowWithGrey" 
        role="row" 
        style="height: 56px;">

        <td class="tree hiddenBorder"><span></span></td>
        <td class="text-center @childClass">
            <span data-pagemode="read">

                @Confluence.InputCheckbox(isChecked: child.CheckAdd, name: "chkEvaluability", disabled: true)

            </span>
            <span data-pagemode="edit" class="containerButtonCheck">

                @Confluence.InputCheckbox(isChecked: child.CheckAdd, 
                    name: "chkEvaluability", 
                    disabled: !child.IsChild, 
                    htmlClass: "js_buttonCheck", 
                    dataAttributes: new Dictionary<string, string> { { "scoreid", Convert.ToString(child.Score) } })

            </span>
        </td>

        <td class="text-center">
            <span data-pagemode="read">
                @Confluence.Label(child.IsScore ? child.CheckAdd ? child.Score.ToString() : "0.00" : "", 
                    htmlClass: "js_containerData score")
            </span>
            <span data-pagemode="edit" class="editEvaluabilityClose">
                @Confluence.Label(child.IsScore ? child.CheckAdd ? child.Score.ToString() : "0.00" : "", 
                    htmlClass: "js_containerData score")
            </span>
        </td>

        <td>
            @if (child.IsChild)
            {
                <span class="level2">
                    @Confluence.Label(child.Criteria, htmlClass: "level2")
                </span>
            }
            else
            {
                <span>
                    @Confluence.Label(child.Criteria)
                </span>
            }
        </td>
        <td class="pr50">

            @if (string.IsNullOrEmpty(levelClass))
            {   <span data-pagemode="read">@Confluence.Label(child.InfoAndReferences)</span>

                <span data-pagemode="edit">
                    @if (!child.CheckAdd)
                    {
                        @Confluence.Label(child.InfoAndReferences)
                        @Confluence.InputText(value: child.InfoAndReferences,
                            name: "InvInfoReferences",
                            width: "95%",
                            maxLength: 1000,
                            required: false,
                            htmlClass: "hide",
                            placeholder: Localization.GetText("R7.DEM.Additionality.Justification"))
                    }
                    else
                    {
                        @Confluence.InputText(value: child.InfoAndReferences, 
                            name: "InvInfoReferences", 
                            width: "95%", 
                            maxLength: 1000, 
                            required: false, 
                            placeholder: Localization.GetText("R7.DEM.Additionality.Justification"))

                        @Confluence.Label(child.InfoAndReferences, htmlClass: "hide labelHide")
                    }
                </span>
            }
        </td>

        <td class="IconTr">
            <span class="iconDemNew"></span>
            @if (child.IsChild)
            {
                if (child.CriterionAditionalInfo != null)
                {
                    <span class="is-relative">
                        @Confluence.Information(child.CriterionAditionalInfo)
                    </span>
                }

                bool isThereAnyCommentCreated = false;
                if (child.UserComments != null)
                {
                    if (child.UserComments.Any() &&
                        child.UserComments.Any(x => x.CheckListStatus == Model.CurrentVersion))
                    {
                        isThereAnyCommentCreated = true;

                        if (child.UserComments.Count == 1)
                        {
                            if (child.UserComments.First().CommentId == 0)
                            {
                                isThereAnyCommentCreated = false;
                            }
                        }
                    }
                }

                string showActiveRow = isThereAnyCommentCreated ? "blueArrow" : string.Empty;

                <button class="buttonShowRow" onclick=" CollapseRowTable(this)">
                    <span class="caret @showActiveRow"></span>
                </button>
            }
        </td>
    </tr>
if (child.IsChild)
{
    if (!Model.IsUserConvergenceReadAfterApproved)
    {
        int i = 0;
        int countComment = child.UserComments.Count();
        foreach (var comment in child.UserComments)
        {
            i++;
            bool showLineComment = true;
            if ((countComment == 1) || (i == countComment))
            {
                showLineComment = false;
            }

            bool isCommentEditable = DEMCommentsHelper.IsCommentEditable(comment.CheckListStatus);
            string commentClass = DEMCommentsHelper
                .CommentBoxClassAccordingDemCurrentVersion(comment.CheckListStatus, comment.IsNewCommentLastVersion);

            <tr data-row-parent-id="@child.IdSheet" style="display: none;">
                <td class="tree"><span></span></td>
                <td colspan="5">
                    <div class="row">
                        <div class="col-md-12">
                            @Confluence.CommentsSection(
                         contendRead: comment.CommentId != 0 ? (
                                    PrintRowTwoCommentsRead(comment, child.CriterionId, child.IdSheet, showLineComment, commentClass)) : null,
                         contentEdit: Model.IsFinalVersionCompletedDem ?
                             comment.CommentId != 0 ? (
                                    PrintRowTwoCommentsRead(comment, child.CriterionId, child.IdSheet, showLineComment, commentClass)) : null :
                             DEMHelpers.InputNewCommentBox(
                                 section1: Confluence.Label(comment.FullName + " (" + comment.RoleName + ")"),
                                 section2: Confluence.Label(comment.Date),
                                 section3: Confluence.Label(comment.Stage),
                                 section4: isCommentEditable ?
                                     Confluence.ButtonTrash(text: "",
                                         action: "deleteTableCommentRow",
                                         dataAttributes:
                                             new Dictionary<string, string> { { "commentId", comment.CommentId.ToString() },
                                                    { "idb-fieldname", "btnDeleteComment" } }) : null,
                                 value: comment.Comment,
                                 required: false,
                                 maxLength: 1000,
                                 name: "textComment-" + comment.CommentId + "-" + child.CriterionId + "-" + child.IdSheet,
                                 dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                                 showLine: showLineComment,
                                 disabled: !isCommentEditable,
                                 isReadOnly: !isCommentEditable,
                                 isNewMark: false,
                                 isEditMode: isCommentEditable,
                                 htmlClass: "fromTable " + commentClass))
                        </div>
                    </div>
                </td>
            </tr>
            }
        }
    }
}

@helper PrintRowCommentsRead(
    UserCommentDEMViewModel comment, 
    int criterionId, 
    int? idSheet, 
    bool isCommentEditable, 
    bool showLineComment, 
    string commentClass)
{
    @DEMHelpers.InputNewCommentBox(
                                        section1: Confluence.Label(comment.FullName + " (" + comment.RoleName + ")"),
                                        section2: Confluence.Label(comment.Date),
                                        section3: Confluence.Label(comment.Stage),
                                        value: comment.Comment,
                                        required: false,
                                        name: "textComment-" + comment.CommentId + "-" + criterionId + "-" + idSheet,
                                        dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                                        disabled: !isCommentEditable,
                                        showLine: showLineComment,
                                        isReadOnly: true,
                                        isNewMark: false,
                                        htmlClass: "fromTable " + commentClass)

}

@helper PrintRowTwoCommentsRead(
    UserCommentDEMViewModel comment, 
    int criterionId, 
    int? idSheet, 
    bool showLineComment, 
    string commentClass)
{
    @DEMHelpers.InputNewCommentBox(
                                        section1: Confluence.Label(comment.FullName + " (" + comment.RoleName + ")"),
                                        section2: Confluence.Label(comment.Date),
                                        section3: Confluence.Label(comment.Stage),
                                        value: comment.Comment,
                                        required: false,
                                        name: "textComment-" + comment.CommentId + "-" + criterionId + "-" + idSheet,
                                        dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                                        disabled: false,
                                        showLine: showLineComment,
                                        isReadOnly: true,
                                        isNewMark: false,
                                        htmlClass: "fromTable " + commentClass)

}

