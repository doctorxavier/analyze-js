@using Areas.DEM
@using IDB.MW.Application.DEMModule.ViewModels
@using IDB.Presentation.MVC4.Areas.DEM.Helpers
@using IDB.MW.Application.Core.ViewModels

@model AdditionalityTabViewModel

<input type="hidden" id="hiddenModel" value="@ViewBag.SerializedViewModel" />
<div class="header">
    <div class="row">
        <div class="col-md-12 pl15">
            <div class="float-right pt5">
                @Confluence.ButtonColapseAll(
                   new List<string> { "tableCountrySystems", "tableIDBInvolvement", "tableTechnicalAssistance", "tableImpactEvaluation" },
                   dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "btnCollapse" } })
            </div>
        </div>
    </div>
</div>
<div>
    <div class="dataTables_wrapper no-footer">
        <input type="hidden" id="hiddenStage" value="@Model.CurrentStage" />
        <table id="tableCountrySystems" class="tableNormal">
            <thead>
                <tr>
                    <th class="tree icon DemSubtitleAlignment">
                        <span class="icon" onclick="CollapseTable(this), CollapseTrContent(this)">-</span>
                        <span class=""></span>
                    </th>
                    <td colspan="5" class="DemSubtitleAlignment">
                        @Confluence.LabelSubTitleGroup(Localization.GetText("R6.DEM.Additionality.CountrySistems"))
                    </td>
                </tr>
                <tr data-id="">
                    <td class="tree"><span></span><span class=""></span></td>
                    <th class="text-center col-md-1">@Localization.GetText("R6.DEM.Main.Additionality")</th>
                    <th class="text-center col-md-5">@Localization.GetText("R6.DEM.Summary.Criteria")</th>
                    <th class="text-center col-md-6">@Localization.GetText("R6.DEM.Main.InfoAndRefsTitle")</th>
                    <th class="text-center"></th>
                </tr>
            </thead>
            <tbody>
                @PrintSimpleTableBody(Model.CountrySystems)
            </tbody>
        </table>
    </div>
</div>
<div>
    <div class="dataTables_wrapper no-footer">
        <table id="tableIDBInvolvement" class="tableNormal">
            <thead>
                <tr>
                    <th class="tree icon DemSubtitleAlignment">
                        <span class="icon" onclick="CollapseTable(this), CollapseTrContent(this)">-</span>
                        <span class=""></span>
                    </th>
                    <td colspan="5" class="DemSubtitleAlignment">
                        @Confluence.LabelSubTitleGroup(Localization.GetText("R6.DEM.Additionality.IDBInvolvement"))
                    </td>
                </tr>
                <tr data-id="">
                    <td class="tree"><span></span><span class=""></span></td>
                    <th class="text-center col-md-1">@Localization.GetText("R6.DEM.Main.Additionality")</th>
                    <th class="text-center col-md-3">@Localization.GetText("R6.DEM.Summary.Criteria")</th>
                    <th class="text-center col-md-4">
                        @Localization.GetText("R6.DEM.Main.InfoAndRefsTitle", Language.EN)
                        <span style="display: block; width: 100%;">
                            @Localization.GetText("R6.DEM.Additionality.InformationReferenceD1", Language.EN)
                        </span>
                    </th>
                    <th class="text-center col-md-4">
                        @Localization.GetText("R6.DEM.Main.InfoAndRefsTitle", Language.ES)
                        <span style="display: block; width: 100%;">
                            @Localization.GetText("R6.DEM.Additionality.InformationReferenceD2", Language.ES)
                        </span>
                    </th>
                    <th class="text-center"></th>
                </tr>
            </thead>
            <tbody>
                @PrintTableBody(Model.IDBInvolvement)
            </tbody>
        </table>
    </div>
</div>
<div>
    <div class="dataTables_wrapper no-footer">
        <table id="tableTechnicalAssistance" class="tableNormal">
            <thead>
                <tr>
                    <th class="tree icon DemSubtitleAlignment">
                        <span class="icon" onclick="CollapseTable(this), CollapseTrContent(this)">-</span>
                        <span class=""></span>
                    </th>
                    <td colspan="5" class="DemSubtitleAlignment">
                        @Confluence.LabelSubTitleGroup(Localization.GetText("R6.DEM.Additionality.TechnicalAssistance"))
                    </td>
                </tr>
                <tr data-id="">
                    <td class="tree"><span></span><span class=""></span></td>
                    <th class="text-center col-md-1">@Localization.GetText("R6.DEM.Main.Additionality")</th>
                    <th class="text-center col-md-3">@Localization.GetText("R6.DEM.Summary.Criteria")</th>
                    <th class="text-center col-md-4">
                        @Localization.GetText("R6.DEM.Main.InfoAndRefsTitle", Language.EN)
                        <span style="display: block; width: 100%;">
                            @Localization.GetText("R6.DEM.Additionality.InformationReferenceD1", Language.EN)
                        </span>
                    </th>
                    <th class="text-center col-md-4">
                        @Localization.GetText("R6.DEM.Main.InfoAndRefsTitle", Language.ES)
                        <span style="display: block; width: 100%;">
                            @Localization.GetText("R6.DEM.Additionality.InformationReferenceD2", Language.ES)
                        </span>
                    </th>
                    <th class="text-center"></th>
                </tr>
            </thead>
            <tbody>
                @PrintTableBody(Model.TechnicalAssistance)
            </tbody>
        </table>
    </div>
</div>
<div>
    <div class="dataTables_wrapper no-footer">
        <table id="tableImpactEvaluation" class="tableNormal">
            <thead>
                <tr>
                    <th class="tree icon DemSubtitleAlignment">
                        <span class="icon" onclick="CollapseTable(this), CollapseTrContent(this)">-</span>
                        <span class=""></span>
                    </th>
                    <td colspan="5" class="DemSubtitleAlignment">
                        @Confluence.LabelSubTitleGroup(Localization.GetText("R6.DEM.Additionality.ImpactEvaluation"))
                    </td>
                </tr>
                <tr data-id="">
                    <td class="tree"><span></span><span class=""></span></td>
                    <th class="text-center col-md-1">@Localization.GetText("R6.DEM.Main.Additionality")</th>
                    <th class="text-center col-md-3">@Localization.GetText("R6.DEM.Summary.Criteria")</th>
                    <th class="text-center col-md-4">
                        @Localization.GetText("R6.DEM.Main.InfoAndRefsTitle", Language.EN)
                        <span style="display: block; width: 100%;">
                            @Localization.GetText("R6.DEM.Additionality.InformationReferenceD1", Language.EN)
                        </span>
                    </th>
                    <th class="text-center col-md-4">
                        @Localization.GetText("R6.DEM.Main.InfoAndRefsTitle", Language.ES)
                        <span style="display: block; width: 100%;">
                            @Localization.GetText("R6.DEM.Additionality.InformationReferenceD2", Language.ES)
                        </span>
                    </th>
                    <th class="text-center"></th>
                </tr>
            </thead>
            <tbody>
                @PrintTableBody(Model.ImpactEvaluation)
            </tbody>
        </table>
        <div data-pagemode="edit">
            @Confluence.InputHidden(value: "", name: "commentDeleteId")
        </div>
    </div>
</div>
@helper PrintSimpleTableBody(IList<SheetAdditionalitySimple> collection)
{
foreach (SheetAdditionalitySimple listItem in collection)
{
        @PrintSimpleRow(listItem)

    foreach (var child1 in listItem.Childs)
    {
            @PrintSimpleRow(child1, listItem.IdSheet.ToString())

        foreach (var child2 in child1.Childs)
        {
                @PrintSimpleRow(child2, child1.IdSheet.ToString())

            foreach (var child3 in child2.Childs)
            {
                    @PrintSimpleRow(child3, child2.IdSheet.ToString())

                    var parentId = child3.IdSheet.ToString();

                    foreach (var child4 in child3.Childs)
                    {
                        @PrintSimpleRow(child4, child3.IdSheet.ToString())
                }
            }
        }
    }
}
}

@helper PrintSimpleRow(SheetAdditionalitySimple child, string parentSheetId = null)
{
var levelClass = !child.IsChild ? "DemTableHeaderLevel" + child.Level : string.Empty;

var childClass = child.IsChild ? "ChildClass" : "HeaderLevel" + child.Level;

var parentSheetIdValue = parentSheetId == null ? string.Empty : parentSheetId;

    <tr data-id="@child.IdSheet" data-levelparent-id="@parentSheetId"
        class="custom even odd @levelClass rowWithGrey"
        role="row"
        style="height: 56px">

        <td class="tree hiddenBorder"><span></span></td>
        <td class="text-center @childClass">
            <span data-pagemode="read">
                @Confluence.InputCheckbox(isChecked: child.CheckAdd, name: "chkAdditionality", disabled: true)
            </span>
            <span data-pagemode="edit">
                @Confluence.InputCheckbox(isChecked: child.CheckAdd, name: "chkAdditionality", disabled: !child.IsChild)
            </span>
        </td>
        <td>
            <span>@Confluence.Label(child.Criteria)</span>
        </td>
        <td class="pr70">
            @if (string.IsNullOrEmpty(levelClass))
            {
            <span data-pagemode="read">@Confluence.Label(child.InfoAndRef)</span>

            <span data-pagemode="edit">
                @if (!child.CheckAdd)
                {
                @Confluence.Label(child.InfoAndRef)
                @Confluence.InputText(value: child.InfoAndRef,
                        name: "txtInfoReferences",
                        width: "100%",
                        maxLength: 1000,
                        required: false,
                        htmlClass: "hide")
                }
                else
                {
                @Confluence.InputText(value: child.InfoAndRef,
                        name: "txtInfoReferences",
                        maxLength: 1000,
                        width: "100%",
                        required: false)

                @Confluence.Label(child.InfoAndRef, htmlClass: "hide labelHide")
                }
            </span>

            }
        </td>
        <td class="IconTr">
            <span class="iconDemNew"></span>
            @if (child.IsChild)
            {
                bool isThereAnyCommentCreated = false;
                if (child.UserComments != null)
                {
                    if (child.UserComments.Any() &&
                        child.UserComments.Any(x => x.CheckListStatus == Model.CurrentVersion))
                    {
                        isThereAnyCommentCreated = true;

                        if (child.UserComments.Count == 1)
                        {
                            if (child.UserComments.First().CommentId == 0)
                            {
                                isThereAnyCommentCreated = false;
                            }
                        }
                    }
                }

                string showActiveRow = isThereAnyCommentCreated ? "blueArrow" : string.Empty;

            <button class="buttonShowRow" onclick="CollapseRowTable(this)">
                <span class="caret @showActiveRow"></span>
            </button>
            }
        </td>

    </tr>
if (child.IsChild)
{
    if (!Model.IsUserConvergenceReadAfterApproved)
    {
        int i = 0;
        int countComment = child.UserComments.Count();
        foreach (var comment in child.UserComments)
        {
            i++;
            bool showLineComment = true;
            if ((countComment == 1) || (i == countComment))
            {
                showLineComment = false;
            }

            bool isCommentEditable = DEMCommentsHelper.IsCommentEditable(comment.CheckListStatus);
            string commentClass = DEMCommentsHelper
                .CommentBoxClassAccordingDemCurrentVersion(comment.CheckListStatus, comment.IsNewCommentLastVersion);

                <tr data-row-parent-id="@child.IdSheet" class="" style="display: none;">
                    <td class="tree"><span></span></td>
                    <td colspan="5">
                        <div class="row">
                            <div class="col-md-12">
                                @Confluence.CommentsSection(
                         contendRead: comment.CommentId != 0 ? (
                                PrintSimpleRowCommentsRead(comment, child.CriterionId, child.IdSheet, showLineComment, commentClass)) : null,
                         contentEdit: Model.IsFinalVersionCompletedDem ?
                                (comment.CommentId != 0 ?
                                    PrintSimpleRowCommentsRead(comment, child.CriterionId, child.IdSheet, showLineComment, commentClass) :
                                 null) :
                             DEMHelpers.InputNewCommentBox(section1: Confluence.Label(comment.FullName + " (" + comment.RoleName + ")"),
                                 section2: Confluence.Label(comment.Date),
                                 section3: Confluence.Label(comment.Stage),
                                 section4: isCommentEditable ?
                                     Confluence.ButtonTrash(text: "", action: "deleteTableCommentRow", dataAttributes: new Dictionary<string, string>
                                     { { "commentId", comment.CommentId.ToString() }, { "idb-fieldname", "btnDeleteComment" } }) : null,
                             value: comment.Comment,
                             required: false,
                             maxLength: 1000,
                             name: "textComment-" + comment.CommentId + "-" + child.CriterionId + "-" + child.IdSheet,
                             dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                             disabled: !isCommentEditable,
                             showLine: showLineComment,
                             isReadOnly: !isCommentEditable,
                             isNewMark: false,
                             isEditMode: isCommentEditable,
                             htmlClass: "fromTable " + commentClass))
                            </div>
                        </div>
                    </td>
                </tr>
        }
    }
}
}

@helper PrintTableBody(IList<SheetAdditionality> collection)
{
foreach (SheetAdditionality listItem in collection)
{
        @PrintRow(listItem)

    foreach (var child1 in listItem.Childs)
    {
            @PrintRow(child1, listItem.IdSheet.ToString())

        foreach (var child2 in child1.Childs)
        {
                @PrintRow(child2, child1.IdSheet.ToString())

            foreach (var child3 in child2.Childs)
            {
                    @PrintRow(child3, child2.IdSheet.ToString())

                    foreach (var child4 in child3.Childs)
                    {
                        @PrintRow(child4, child3.IdSheet.ToString())
                }
            }
        }
    }
}
}

@helper PrintRow(SheetAdditionality child, string parentSheetId = null)
{
var levelClass = !child.IsChild ? "DemTableHeaderLevel" + child.Level : string.Empty;

var childClass = child.IsChild ? "ChildClass" : "HeaderLevel" + child.Level;

var parentSheetIdValue = parentSheetId == null ? string.Empty : parentSheetId;

    <tr data-id="@child.IdSheet"
        data-levelparent-id="@parentSheetId"
        class="custom even odd @levelClass rowWithGrey"
        role="row"
        style="height: 56px">

        <td class="tree hiddenBorder"><span></span></td>
        <td class="text-center @childClass">
            <span data-pagemode="read">
                @Confluence.InputCheckbox(isChecked: child.CheckAdd, name: "chkAdditionality", disabled: true)
            </span>
            <span data-pagemode="edit">
                @Confluence.InputCheckbox(isChecked: child.CheckAdd, name: "chkAdditionality", disabled: !child.IsChild)
            </span>
        </td>
        <td>
            <span>@Confluence.Label(child.Criteria)</span>
        </td>
        <td class="pr70">
            @if (string.IsNullOrEmpty(levelClass))
            {   <span data-pagemode="read">@Confluence.Label(child.InfoAndRef)</span>

            <span data-pagemode="edit">
                @if (!child.CheckAdd)
                {
                    @Confluence.Label(child.InfoAndRef)
                    @Confluence.InputText(value: child.InfoAndRef,
                     name: "txtInvInfoReferences",
                     width: "100%",
                     maxLength: 1000,
                     required: false,
                     htmlClass: "hide",
                     placeholder: Localization.GetText("R7.DEM.Additionality.Justification", Language.EN))
                }
                else
                {
                    @Confluence.InputText(value: child.InfoAndRef,
                     name: "txtInvInfoReferences",
                     width: "100%",
                     maxLength: 1000,
                     required: true,
                          placeholder: Localization.GetText("R7.DEM.Additionality.Justification", Language.EN))

                    @Confluence.Label(child.InfoAndRef, htmlClass: "hide labelHide")
                }
            </span>
            }
        </td>

        <td class="pr70">
            @if (string.IsNullOrEmpty(levelClass))
            {
                <span data-pagemode="read">@Confluence.Label(child.InfoAndRefResumen)</span>
                <span data-pagemode="edit">

                    @if (!child.CheckAdd)
                    {
                        @Confluence.Label(child.InfoAndRefResumen)
                        @Confluence.InputText(value: child.InfoAndRefResumen,
                     name: "txtInvInfoReferencesR",
                     width: "100%",
                     maxLength: 1000,
                     required: false,
                     htmlClass: "hide",
                     placeholder: Localization.GetText("R7.DEM.Additionality.Justification", Language.ES))
                    }
                    else
                    {
                        @Confluence.InputText(value: child.InfoAndRefResumen,
                     name: "txtInvInfoReferencesR",
                     width: "100%", maxLength: 1000,
                     required: true,
                     placeholder: Localization.GetText("R7.DEM.Additionality.Justification", Language.ES))

                        @Confluence.Label(child.InfoAndRefResumen, htmlClass: "hide labelHide")
                    }

                </span>
            }
        </td>
        <td class="IconTr">
            <span class="iconDemNew"></span>
            @if (child.IsChild)
            {
                bool isThereAnyCommentCreated = false;
                if (child.UserComments != null)
                {
                    if (child.UserComments.Any() &&
                        child.UserComments.Any(x => x.CheckListStatus == Model.CurrentVersion))
                    {
                        isThereAnyCommentCreated = true;

                        if (child.UserComments.Count == 1)
                        {
                            if (child.UserComments.First().CommentId == 0)
                            {
                                isThereAnyCommentCreated = false;
                            }
                        }
                    }
                }

                string showActiveRow = isThereAnyCommentCreated ? "blueArrow" : string.Empty;

                <button class="buttonShowRow" onclick="CollapseRowTable(this)">
                    <span class="caret @showActiveRow"></span>
                </button>
            }
        </td>

    </tr>
if (child.IsChild)
{
    if (!Model.IsUserConvergenceReadAfterApproved)
    {
        int i = 0;
        int countComment = child.UserComments.Count();
        foreach (var comment in child.UserComments)
        {
            i++;
            bool showLineComment = true;
            if ((countComment == 1) || (i == countComment))
            {
                showLineComment = false;
            }

            bool isCommentEditable = DEMCommentsHelper.IsCommentEditable(comment.CheckListStatus);
            string commentClass = DEMCommentsHelper
                .CommentBoxClassAccordingDemCurrentVersion(comment.CheckListStatus, comment.IsNewCommentLastVersion);

                <tr data-row-parent-id="@child.IdSheet" class="" style="display: none;">
                    <td class="tree"><span></span></td>
                    <td colspan="5">
                        <div class="row">
                            <div class="col-md-12">
                                @Confluence.CommentsSection(
                      contendRead: comment.CommentId != 0 ?
                            (PrintRowCommentsRead(comment, child.CriterionId, child.IdSheet, showLineComment, commentClass)) : null,
                      contentEdit: Model.IsFinalVersionCompletedDem ?
                         (comment.CommentId != 0 ?
                            PrintRowCommentsRead(comment, child.CriterionId, child.IdSheet, showLineComment, commentClass) : null) :
                         DEMHelpers.InputNewCommentBox(
                              section1: Confluence.Label(comment.FullName + " (" + comment.RoleName + ")"),
                              section2: Confluence.Label(comment.Date),
                              section3: Confluence.Label(comment.Stage),
                              section4: isCommentEditable ?
                                  Confluence.ButtonTrash(text: "", action: "deleteTableCommentRow", dataAttributes: new Dictionary<string, string>
                                  { { "commentId", comment.CommentId.ToString() }, { "idb-fieldname", "btnDeleteComment" } }) : null,
                         value: comment.Comment,
                         required: false,
                         maxLength: 1000,
                         name: "textComment-" + comment.CommentId + "-" + child.CriterionId + "-" + child.IdSheet,
                         dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                         disabled: !isCommentEditable,
                         showLine: showLineComment,
                         isReadOnly: !isCommentEditable,
                         isNewMark: false,
                         isEditMode: isCommentEditable,
                         htmlClass: "fromTable " + commentClass))
                            </div>
                        </div>
                    </td>
                </tr>
        }
    }
}
}

@helper PrintSimpleRowCommentsRead(
    UserCommentDEMViewModel comment,
    int criterionId,
    int idSheet,
    bool showLineComment,
    string commentClass)
{
    @DEMHelpers.InputNewCommentBox(
                                section1: Confluence.Label(comment.FullName + " (" + comment.RoleName + ")"),
                                section2: Confluence.Label(comment.Date),
                                section3: Confluence.Label(comment.Stage),
                                value: comment.Comment,
                                required: false,
                                name: "textComment-" + comment.CommentId + "-" + criterionId + "-" + idSheet,
                                dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                                disabled: false,
                                showLine: showLineComment,
                                isReadOnly: true,
                                isNewMark: false,
                                htmlClass: "fromTable " + commentClass)

}


@helper PrintRowCommentsRead(UserCommentDEMViewModel comment, int criterionId, int idSheet, bool showLineComment, string commentClass)
{
    @DEMHelpers.InputNewCommentBox(section1: Confluence.Label(comment.FullName + " (" + comment.RoleName + ")"),
                                   section2: Confluence.Label(comment.Date),
                                   section3: Confluence.Label(comment.Stage),
                                   value: comment.Comment,
                                   required: false,
                                   name: "textComment-" + comment.CommentId + "-" + criterionId + "-" + idSheet,
                                   dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "txtTextComment01" } },
                                   disabled: false,
                                   showLine: showLineComment,
                                   isReadOnly: true,
                                   isNewMark: false,
                                   htmlClass: "fromTable " + commentClass)

}