@using System.Globalization
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MW.DomainModel.Entities.PCRModule.Enums
@using IDB.MW.Domain.Values
@using IDB.Presentation.MVC4.Helpers
@using IDB.Architecture.Language
@using IDB.MW.Application.PCRModule.ViewModels.ChecklistService
@model List<IDB.MW.Application.PCRModule.ViewModels.ChecklistService.PCRGeneralRowViewModel>

@{   
    var teamLeaderPreValStyle = string.Empty;
    var spdPreValStyle = string.Empty;
    var teamLeaderValStyle = string.Empty;
    var spdValStyle = string.Empty;

    if (ViewBag.CurrentStage != null)
    {
        switch ((PCRStageTypeEnum)ViewBag.CurrentStage)
        {
            case PCRStageTypeEnum.TeamLeaderPreValidationStage:
                teamLeaderPreValStyle = "highlight-core";
                break;
            case PCRStageTypeEnum.SPDPreValidationStage:
                spdPreValStyle = "highlight-core";
                break;
            case PCRStageTypeEnum.TeamLeaderValidationStage:
                teamLeaderValStyle = "highlight-core";
                break;
            case PCRStageTypeEnum.SPDValidationStage:
                spdValStyle = "highlight-core";
                break;
        }
    }

    var config = Html.RenderDataTable(Model.Where(x => !x.IsCore).ToList());
    config.Name("nonCoreCriteriaTable")
        .PrimaryKey(m => m.PCRGeneralId.ToString(CultureInfo.InvariantCulture))
        .Columns(columns =>
        {
            columns.Bound(c => c.Description).Persistent();

            if ((int)ViewBag.CurrentStage >= (int)PCRStageTypeEnum.TeamLeaderPreValidationStage)
            {
                columns.Bound(
                    c => GetValue(c.PCRGeneralType, c.ScoreBasedOnTeamLeaderPreValidation))
                .CssClass(teamLeaderPreValStyle)
                .SecuredCommentToolTip(
                    m => m.ScoreBasedOnTeamLeaderPreValidationTooltip,
                    m => m.ScoreBasedOnTeamLeaderPreValidationTitle,
                    IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
                .Attribute("data-initialValue", m => "true")
                .Attribute("data-valueScore", m => "true")
                .MakeEditableIf(
                    ViewBag.CurrentStage == PCRStageTypeEnum.TeamLeaderPreValidationStage &&
                        ViewBag.WritePermissionStage,
                        (Func<PCRGeneralRowViewModel, HelperResult>)(c =>
                            EditValue(
                                c.PCRGeneralType, c.ScoreBasedOnTeamLeaderPreValidation, false)),
                            (Action<ColumnDefinition<PCRGeneralRowViewModel>>)(c =>
                                { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                            (Action<ColumnDefinition<PCRGeneralRowViewModel>>)(c =>
                                { c.Persistent(); }));
            }
            else
            {
                columns.Bound(c => "")
                    .CssClass(teamLeaderPreValStyle)
                    .Persistent()
                    .SecuredCommentToolTip(
                        m => m.ScoreBasedOnTeamLeaderPreValidationTooltip,
                        m => m.ScoreBasedOnTeamLeaderPreValidationTitle,
                        IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
                    .Attribute("data-initialValue", m => "true")
                    .Attribute("data-valueScore", m => "true");
            }

            if ((int)ViewBag.CurrentStage >= (int)PCRStageTypeEnum.SPDPreValidationStage)
            {
                columns.Bound(
                    c => GetValue(c.PCRGeneralType, c.ScoreBasedOnSPDPreValidation))
                .CssClass(spdPreValStyle)
                .SecuredCommentToolTip(
                    m => m.ScoreBasedOnSPDPreValidationTooltip,
                    m => m.ScoreBasedOnSPDPreValidationTitle,
                    IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
                .Attribute("data-initialValue", m => "true")
                .Attribute("data-valueScore", m => "true")
                .MakeEditableIf(
                    ViewBag.CurrentStage == PCRStageTypeEnum.SPDPreValidationStage &&
                        ViewBag.WritePermissionStage,
                        (Func<PCRGeneralRowViewModel, HelperResult>)(c =>
                            EditValue(c.PCRGeneralType, c.ScoreBasedOnSPDPreValidation, false)),
                            (Action<ColumnDefinition<PCRGeneralRowViewModel>>)(c => 
                                { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                            (Action<ColumnDefinition<PCRGeneralRowViewModel>>)(c =>
                                { c.Persistent(); }));
            }
            else
            {
                columns.Bound(c => "")
                    .CssClass(spdPreValStyle)
                    .Persistent()
                    .SecuredCommentToolTip(
                        m => m.ScoreBasedOnSPDPreValidationTooltip,
                        m => m.ScoreBasedOnSPDPreValidationTitle,
                        IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
                    .Attribute("data-valueScore", m => "true");
            }

            if ((int)ViewBag.CurrentStage >= (int)PCRStageTypeEnum.TeamLeaderValidationStage)
            {
                columns.Bound(
                    c => GetValue(c.PCRGeneralType, c.ScoreBasedOnTeamLeaderValidation))
                .CssClass(teamLeaderValStyle)
                .SecuredCommentToolTip(
                    m => m.ScoreBasedOnTeamLeaderValidationTooltip,
                    m => m.ScoreBasedOnTeamLeaderValidationTitle,
                    IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
                .Attribute("data-initialValue", m => "true")
                .Attribute("data-valueScore", m => "true")
                .MakeEditableIf(
                    ViewBag.CurrentStage == PCRStageTypeEnum.TeamLeaderValidationStage &&
                        ViewBag.WritePermissionStage,
                        (Func<PCRGeneralRowViewModel, HelperResult>)(c =>
                            EditValue(c.PCRGeneralType, c.ScoreBasedOnTeamLeaderValidation, false)),
                            (Action<ColumnDefinition<PCRGeneralRowViewModel>>)(c =>
                                { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                            (Action<ColumnDefinition<PCRGeneralRowViewModel>>)(c =>
                                { c.Persistent(); }));
            }
            else
            {
                columns.Bound(c => "")
                    .CssClass(teamLeaderValStyle)
                    .Persistent()
                    .SecuredCommentToolTip(
                        m => m.ScoreBasedOnTeamLeaderValidationTooltip,
                        m => m.ScoreBasedOnTeamLeaderValidationTitle,
                        IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
                    .Attribute("data-valueScore", m => "true");
            }

            if ((int)ViewBag.CurrentStage >= (int)PCRStageTypeEnum.SPDValidationStage)
            {
                columns.Bound(
                    c => GetValue(c.PCRGeneralType, c.ScoreBasedOnSPDValidation))
                .CssClass(spdValStyle)
                .SecuredCommentToolTip(
                    m => m.ScoreBasedOnSPDValidationTooltip,
                    m => m.ScoreBasedOnSPDValidationTitle,
                    IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
                .Attribute("data-initialValue", m => "true")
                .Attribute("data-valueScore", m => "true")
                .MakeEditableIf(
                    ViewBag.CurrentStage == PCRStageTypeEnum.SPDValidationStage &&
                        ViewBag.WritePermissionStage,
                        (Func<PCRGeneralRowViewModel, HelperResult>)(c =>
                            EditValue(c.PCRGeneralType, c.ScoreBasedOnSPDValidation, false)),
                            (Action<ColumnDefinition<PCRGeneralRowViewModel>>)(c =>
                                { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                            (Action<ColumnDefinition<PCRGeneralRowViewModel>>)(c =>
                                { c.Persistent(); }));
            }
            else
            {
                columns.Bound(c => "")
                    .CssClass(spdValStyle)
                    .Persistent()
                    .SecuredCommentToolTip(
                        m => m.ScoreBasedOnSPDValidationTooltip,
                        m => m.ScoreBasedOnSPDValidationTitle,
                        IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
                    .Attribute("data-valueScore", m => "true");
            }

            columns.Bound(c => GetValue(c.PCRGeneralType, c.ScoreBasedOnCurrentStage))
                .Persistent().CssClass("GeneralCurrent  highlight");
            columns.Bound(c => "").Attribute("data-pagemode", x => "edit").CssClass("pcr-column-white  highlight")
                .EditableTemplate(@<button class="btn btn-xs toggleRow">&nbsp;</button>);
        })
        .RowTemplates(rows => rows.Create(RowTemplateType.AllRows, m => ControlTemplatesPCR.GridNonCoreCriteriaCommentsRow(m.CommentList, config.ResolvedPrimaryKey(m), (PCRStageTypeEnum)ViewBag.CurrentStage, m.CommentList.FirstOrDefault(x => x.PCRGeneralStageType == (PCRStageTypeEnum)ViewBag.CurrentStage), ViewBag.WritePermissionStage, ViewBag.StageName, ViewBag.UserName)));

    config.TableClass = config.DefaultTableClass + "highlight-last checklist-row-template";
    config.UseCustomHeader = true;
    config.CustomHeader = (@<thead>
                                <tr>
                                    <th>@Localization.GetText("PCR.Checklist.TabGeneral.NonCore.ColDescription")</th>
                                    <th colspan="5" class="text-center">@Localization.GetText("PCR.Checklist.TabGeneral.NonCore.ColClassification")</th>
                                    <th class="pcr-column-white" data-pagemode="edit"></th>
                                </tr>
                                <tr>
                                    <th></th>
                                    <th>@Localization.GetText("PCR.Checklist.TabGeneral.NonCore.ColTLPreVal")</th>
                                    <th>@Localization.GetText("PCR.Checklist.TabGeneral.NonCore.ColSPDDPreVal")</th>
                                    <th>@Localization.GetText("PCR.Checklist.TabGeneral.NonCore.ColTLVal")</th>
                                    <th>@Localization.GetText("PCR.Checklist.TabGeneral.NonCore.ColSPDVal")</th>
                                    <th>@Localization.GetText("PCR.Checklist.TabGeneral.NonCore.ColCurrent")</th>
                                    <th class="pcr-column-white" data-pagemode="edit"></th>
                                </tr>
                            </thead>);
}

@functions {

    static HelperResult EditValue(PCRGeneralTypeEnum pcrGeneralType, decimal? value, bool requiredSatisfactory)
    {
        return pcrGeneralType == PCRGeneralTypeEnum.EnvironmentalAndSocialSafeguards ? ControlTemplatesPCR.GridNonCoreEnvironmentalSelectList(value, "cboScore", false) : ControlTemplatesPCR.GridSatisfactorySelectList(value, "cboScore", requiredSatisfactory, true);
    }

    static string GetValue(PCRGeneralTypeEnum pcrGeneralType, decimal? value)
    {
        var result = string.Empty;
        if (pcrGeneralType == PCRGeneralTypeEnum.EnvironmentalAndSocialSafeguards)
        {
            if (value.HasValue)
            {
                if (value.Value == 0M)
                {
                    result = Localization.GetText("PCR.Summary.NonCoreCriterion.Unsatisfactory");
                }
                else if (value.Value == 1M)
                {
                    result = Localization.GetText("PCR.Summary.NonCoreCriterion.Satisfactory");
                }
                else if (value.Value == -1M)
                {
                    result = Localization.GetText("PCR.Summary.NonCoreCriterion.NA");
                }
                else if(value.Value == 2M)
                {
                    result = Localization.GetText("PCR.Summary.NonCoreCriterion.PartiallyUnsatisfactory");
                }
                else if(value.Value == 3M)
                {
                    result = Localization.GetText("PCR.Summary.NonCoreCriterion.PartiallySatisfactory");
                }
            }
        }
        else
        {
            if (value.HasValue)
            {
                if (value.Value == 0M)
                {
                    result = Localization.GetText("PCR.Summary.NonCoreCriterion.Unsatisfactory");
                }
                else if (value.Value == 1M)
                {
                    result = Localization.GetText("PCR.Summary.NonCoreCriterion.Satisfactory");
                }
                else if (value.Value == -1M)
                {
                    result = Localization.GetText("PCR.Summary.NonCoreCriterion.NA");
                }
            }
        }

        return result;
    }
}
@Html.Partial("Controls/DataTable", config)