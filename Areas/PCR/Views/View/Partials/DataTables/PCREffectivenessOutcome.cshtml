@using System.Globalization
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MVCControls.General.Helpers
@using IDB.MW.DomainModel.Entities.PCRModule.Enums
@using IDB.Presentation.MVC4.Helpers
@using IDB.MW.Application.PCRModule.ViewModels.ChecklistService
@model IDB.MW.Application.PCRModule.ViewModels.ChecklistService.OutcomeViewModel



@{
    var teamLeaderPreValStyle = string.Empty;
    var spdPreValStyle = string.Empty;
    var teamLeaderValStyle = string.Empty;
    var spdValStyle = string.Empty;

    if (ViewBag.CurrentStage != null)
    {
        switch ((PCRStageTypeEnum)ViewBag.CurrentStage)
        {
            case PCRStageTypeEnum.TeamLeaderPreValidationStage:
                teamLeaderPreValStyle = "highlight-outcome";
                break;
            case PCRStageTypeEnum.SPDPreValidationStage:
                spdPreValStyle = "highlight-outcome";
                break;
            case PCRStageTypeEnum.TeamLeaderValidationStage:
                teamLeaderValStyle = "highlight-outcome";
                break;
            case PCRStageTypeEnum.SPDValidationStage:
                spdValStyle = "highlight-outcome";
                break;
        }
    }
    var config = Html.RenderDataTable(Model.OutcomeIndicatorList);
    config.Name("outcomesTable")
        .PrimaryKey(m => m.OutcomeIndicatorId.ToString(CultureInfo.InvariantCulture), Model.OutcomeId.ToString())
        .Columns(columns =>
        {
            columns.Bound(c => c.Description).Persistent();
            columns.Bound(c => c.Baseline, f => FormatHelper.Format(f, "#,0.00"))
                .Persistent()
                .CssClass("highlight");
            columns.Bound(c => c.Eoppa, f => FormatHelper.Format(f, "#,0.00"))
                .Persistent()
                .CssClass("highlight");
            columns.Bound(c => c.Eopa, f => FormatHelper.Format(f, "#,0.00"))
                .Persistent()
                .CssClass("highlight");

            columns.Bound(
                c => c.AchievedBasedOnTeamLeaderPreValidation,
                    f => FormatHelper.Format(f, "#0.00"))
            .CssClass(teamLeaderPreValStyle)
            .SecuredCommentToolTip(
                m => m.AchievedBasedOnTeamLeaderPreValidationTooltip,
                m => m.AchievedBasedOnTeamLeaderPreValidationTitle,
                IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
            .Attribute("data-initialValue", m => "true")
            .Attribute("data-valueScore", m => "true")
            .MakeEditableIf(
                ViewBag.CurrentStage == PCRStageTypeEnum.TeamLeaderPreValidationStage &&
                    ViewBag.WritePermissionStage,
                    (Func<OutcomeIndicatorRowViewModel, HelperResult>)(modelRow =>
                        ControlTemplatesPCR.GridEditDecimal(
                            modelRow.AchievedBasedOnTeamLeaderPreValidation,
                            "txtOutcomeAchieved",
                            4,
                            false,
                            "0,1")),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Persistent(); }));

            columns.Bound(
                c => c.AttributableBasedOnTeamLeaderPreValidation, FormatHelper.ConvertBooleanYesNo)
            .CssClass(teamLeaderPreValStyle)
            .SecuredCommentToolTip(
                m => m.AttributableBasedOnTeamLeaderPreValidationTooltip,
                m => m.AttributableBasedOnTeamLeaderPreValidationTitle,
                IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
            .Attribute("data-initialValueAttributable", m => "true")
            .Attribute("data-valueAttributable", m => "true")
            .MakeEditableIf(
                ViewBag.CurrentStage == PCRStageTypeEnum.TeamLeaderPreValidationStage &&
                    ViewBag.WritePermissionStage,
                    (Func<OutcomeIndicatorRowViewModel, HelperResult>)(modelRow =>
                        ControlTemplates.DropDownBool(
                        modelRow.AttributableBasedOnTeamLeaderPreValidation,
                        "cboOutcomeAttributable",
                        false)),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Persistent(); }));

            columns.Bound(
                c => c.AchievedBasedOnSPDPreValidation,
                    f => FormatHelper.Format(f, "#0.00"))
            .CssClass(spdPreValStyle)
            .SecuredCommentToolTip(
                m => m.AchievedBasedOnSPDPreValidationTooltip,
                m => m.AchievedBasedOnSPDPreValidationTitle,
                IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
            .Attribute("data-initialValue", m => "false")
            .Attribute("data-valueScore", m => "true")
            .MakeEditableIf(
                ViewBag.CurrentStage == PCRStageTypeEnum.SPDPreValidationStage &&
                    ViewBag.WritePermissionStage,
                    (Func<OutcomeIndicatorRowViewModel, HelperResult>)(modelRow =>
                        ControlTemplatesPCR.GridEditDecimal(
                            modelRow.AchievedBasedOnSPDPreValidation,
                            "txtOutcomeAchieved",
                            4,
                            false,
                            "0,1")),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Persistent(); }));

            columns.Bound(
                c => c.AttributableBasedOnSPDPreValidation, FormatHelper.ConvertBooleanYesNo)
            .CssClass(spdPreValStyle)
            .SecuredCommentToolTip(
                m => m.AttributableBasedOnSPDPreValidationTooltip,
                m => m.AttributableBasedOnSPDPreValidationTitle,
                IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
            .Attribute("data-initialValueAttributable", m => "false")
            .Attribute("data-valueAttributable", m => "true")
            .MakeEditableIf(
                ViewBag.CurrentStage == PCRStageTypeEnum.SPDPreValidationStage &&
                    ViewBag.WritePermissionStage,
                    (Func<OutcomeIndicatorRowViewModel, HelperResult>)(modelRow =>
                        ControlTemplates.DropDownBool(
                            modelRow.AttributableBasedOnSPDPreValidation,
                            "cboOutcomeAttributable",
                            false)),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Persistent(); }));

            columns.Bound(
                c => c.AchievedBasedOnTeamLeaderValidation,
                    f => FormatHelper.Format(f, "#0.00"))
            .CssClass(teamLeaderValStyle)
            .SecuredCommentToolTip(
                m => m.AchievedBasedOnTeamLeaderValidationTooltip,
                m => m.AchievedBasedOnTeamLeaderValidationTitle,
                IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
            .Attribute("data-initialValue", m => "false")
            .Attribute("data-valueScore", m => "true")
            .MakeEditableIf(
                ViewBag.CurrentStage == PCRStageTypeEnum.TeamLeaderValidationStage &&
                    ViewBag.WritePermissionStage,
                    (Func<OutcomeIndicatorRowViewModel, HelperResult>)(modelRow =>
                        ControlTemplatesPCR.GridEditDecimal(
                            modelRow.AchievedBasedOnTeamLeaderValidation,
                            "txtOutcomeAchieved",
                            4,
                            false,
                            "0,1")),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Persistent(); }));

            columns.Bound(
                c => c.AttributableBasedOnTeamLeaderValidation, FormatHelper.ConvertBooleanYesNo)
            .CssClass(teamLeaderValStyle)
            .SecuredCommentToolTip(
                m => m.AttributableBasedOnTeamLeaderValidationTooltip,
                m => m.AttributableBasedOnTeamLeaderValidationTitle,
                IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
            .Attribute("data-initialValueAttributable", m => "false")
            .Attribute("data-valueAttributable", m => "true")
            .MakeEditableIf(
                ViewBag.CurrentStage == PCRStageTypeEnum.TeamLeaderValidationStage &&
                    ViewBag.WritePermissionStage,
                    (Func<OutcomeIndicatorRowViewModel, HelperResult>)(modelRow =>
                        ControlTemplates.DropDownBool(
                            modelRow.AttributableBasedOnTeamLeaderValidation,
                            "cboOutcomeAttributable",
                            false)),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Persistent(); }));

            columns.Bound(
                c => c.AchievedBasedOnSPDValidation,
                    f => FormatHelper.Format(f, "#0.00"))
            .CssClass(spdValStyle)
            .SecuredCommentToolTip(
                m => m.AchievedBasedOnSPDValidationTooltip,
                m => m.AchievedBasedOnSPDValidationTitle,
                IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
            .Attribute("data-initialValue", m => "false")
            .Attribute("data-valueScore", m => "true")
            .MakeEditableIf(
                ViewBag.CurrentStage == PCRStageTypeEnum.SPDValidationStage &&
                    ViewBag.WritePermissionStage,
                    (Func<OutcomeIndicatorRowViewModel, HelperResult>)(modelRow =>
                        ControlTemplatesPCR.GridEditDecimal(
                            modelRow.AchievedBasedOnSPDValidation,
                            "txtOutcomeAchieved",
                            4,
                            false,
                            "0,1")),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Persistent(); }));

            columns.Bound(
                c => c.AttributableBasedOnSPDValidation, FormatHelper.ConvertBooleanYesNo)
            .CssClass(spdValStyle)
            .SecuredCommentToolTip(
                m => m.AttributableBasedOnSPDValidationTooltip,
                m => m.AttributableBasedOnSPDValidationTitle,
                IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
            .Attribute("data-initialValueAttributable", m => "false")
            .Attribute("data-valueAttributable", m => "true")
            .MakeEditableIf(
                ViewBag.CurrentStage == PCRStageTypeEnum.SPDValidationStage &&
                    ViewBag.WritePermissionStage,
                    (Func<OutcomeIndicatorRowViewModel, HelperResult>)(modelRow =>
                        ControlTemplates.DropDownBool(
                            modelRow.AttributableBasedOnSPDValidation,
                            "cboOutcomeAttributable",
                            false)),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                    (Action<ColumnDefinition<OutcomeIndicatorRowViewModel>>)(c =>
                        { c.Persistent(); }));

            columns.Bound(c => c.AchievedBasedOnCurrentStage, f => FormatHelper.Format(f, "#0.00"))
                .Persistent().CssClass("AchievCurrentStage");
            columns.Bound(c => c.AttributableBasedOnCurrentStage, FormatHelper.ConvertBooleanYesNo)
                .Persistent().CssClass("AttBCurrentStage");
            columns.Bound(c => c.AttributableBasedOnCurrentStage.HasValue && c.AttributableBasedOnCurrentStage.Value ? (c.AchievedBasedOnCurrentStage.HasValue && c.AchievedBasedOnCurrentStage.Value != 0M ? FormatHelper.Format(c.AchievedBasedOnCurrentStage.Value, "#0.00").ToString() : FormatHelper.Format(0M, "#0.00").ToString()) : (!c.AttributableBasedOnCurrentStage.HasValue && !c.AchievedBasedOnCurrentStage.HasValue ? "" : FormatHelper.Format(0M, "#0.00").ToString()))
                .Persistent().CssClass("AttAchievCurrentStage");
            columns.Bound(c => "").Attribute("data-pagemode", x => "edit").CssClass("pcr-column-white")
                .EditableTemplate(@<button class="btn btn-xs toggleRow">&nbsp;</button>);
        })
        .RowTemplates(rows => rows.Create(RowTemplateType.AllRows, m => ControlTemplatesPCR.GridOutcomeCommentsRow(m.CommentsList, config.ResolvedPrimaryKey(m), ViewBag.CurrentStage, m.CommentsList.FirstOrDefault(x => x.PCRStageType == ViewBag.CurrentStage && x.IsAttributableComment), m.CommentsList.FirstOrDefault(x => x.PCRStageType == ViewBag.CurrentStage && !x.IsAttributableComment), ViewBag.WritePermissionStage, ViewBag.StageName, ViewBag.UserName)));

    config.TableClass = config.DefaultTableClass + "highlight-last-three checklist-row-template";
    config.UseCustomHeader = true;
    config.CustomHeader = (@<thead>
        <tr>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColDescription")</th>
            <th colspan="3">@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColResultMatrix")</th>
            <th colspan="2">@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColTLPreVal")</th>
            <th colspan="2">@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColSPDPreVal")</th>
            <th colspan="2">@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColTLVal")</th>
            <th colspan="2">@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColSPDVal")</th>
            <th colspan="3" class="text-center">@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColCurrent")</th>
            <th class="pcr-column-white" data-pagemode="edit"></th>
        </tr>
        <tr>
            <th></th>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.Baseline")</th>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.Eoppa")</th>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.Eopa")</th>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColAchieved")</th>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColAttributable")</th>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColAchieved")</th>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColAttributable")</th>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColAchieved")</th>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColAttributable")</th>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColAchieved")</th>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColAttributable")</th>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColAchieved")</th>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColAttributable")</th>
            <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Outcome.ColAttrAchievement")</th>
            <th class="pcr-column-white" data-pagemode="edit"></th>
        </tr>
    </thead>);
}

@Html.Partial("Controls/DataTable", config)