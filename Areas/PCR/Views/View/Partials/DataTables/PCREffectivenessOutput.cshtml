@using System.Globalization
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MVCControls.General.Helpers
@using IDB.MW.DomainModel.Entities.PCRModule.Enums
@using IDB.Presentation.MVC4.Helpers
@using IDB.MW.Application.PCRModule.ViewModels.ChecklistService
@model IDB.MW.Application.PCRModule.ViewModels.ChecklistService.ComponentViewModel

@{
    var teamLeaderPreValStyle = string.Empty;
    var SPDPreValStyle = string.Empty;
    var teamLeaderValStyle = string.Empty;
    var SPDValStyle = string.Empty;

    if (ViewBag.CurrentStage != null)
    {
        switch ((PCRStageTypeEnum)ViewBag.CurrentStage)
        {
            case PCRStageTypeEnum.TeamLeaderPreValidationStage:
                teamLeaderPreValStyle = "highlight-output";
                break;
            case PCRStageTypeEnum.SPDPreValidationStage:
                SPDPreValStyle = "highlight-output";
                break;
            case PCRStageTypeEnum.TeamLeaderValidationStage:
                teamLeaderValStyle = "highlight-output";
                break;
            case PCRStageTypeEnum.SPDValidationStage:
                SPDValStyle = "highlight-output";
                break;
        }
    }
    
    var config = Html.RenderDataTable(Model.OutputList);
    config.Name("outputTable")
        .PrimaryKey(m => m.OutputId.ToString(CultureInfo.InvariantCulture), Model.ComponentId.ToString())
        .Columns(columns =>
        {
            columns.Bound(c => c.Description).Persistent();
            columns.Bound(c => c.AchievedBasedOnResultMatrix, f => FormatHelper.Format(f, "#0.00"))
                .CssClass("highlight")
                .Persistent();

            columns.Bound(
                c => c.AchievedBasedOnTeamLeaderPreValidation,
                    f => FormatHelper.Format(f, "#0.00"))
            .CssClass(teamLeaderPreValStyle)
            .SecuredCommentToolTip(
                m => m.AchievedBasedOnTeamLeaderPreValidationTooltip,
                m => m.AchievedBasedOnTeamLeaderPreValidationTitle,
                IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
            .Attribute("data-initialValue", m => "true")
            .Attribute("data-valueScore", m => "true")
            .MakeEditableIf(
                ViewBag.CurrentStage == PCRStageTypeEnum.TeamLeaderPreValidationStage &&
                    ViewBag.WritePermissionStage,
                    (Func<OutputRowViewModel, HelperResult>)(modelRow =>
                        ControlTemplatesPCR.GridEditDecimal(
                            modelRow.AchievedBasedOnTeamLeaderPreValidation,
                            "txtOutputAchieved",
                            4,
                            false,
                            "0,1")),
                (Action<ColumnDefinition<OutputRowViewModel>>)(c =>
                    { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                (Action<ColumnDefinition<OutputRowViewModel>>)(c =>
                    { c.Persistent(); }));

            columns.Bound(
                c => c.AchievedBasedOnSPDPreValidation,
                    f => FormatHelper.Format(f, "#0.00"))
            .CssClass(SPDPreValStyle)
            .SecuredCommentToolTip(
                m => m.AchievedBasedOnSPDPreValidationTooltip,
                m => m.AchievedBasedOnSPDPreValidationTitle,
                IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
            .Attribute("data-initialValue", m => "false")
            .Attribute("data-valueScore", m => "true")
            .Attribute("data-valueOutput", m => "true")
            .MakeEditableIf(
                ViewBag.CurrentStage == PCRStageTypeEnum.SPDPreValidationStage &&
                    ViewBag.WritePermissionStage,
                    (Func<OutputRowViewModel, HelperResult>)(modelRow =>
                        ControlTemplatesPCR.GridEditDecimal(
                            modelRow.AchievedBasedOnSPDPreValidation,
                            "txtOutputAchieved",
                            4,
                            false,
                            "0,1")),
                (Action<ColumnDefinition<OutputRowViewModel>>)(c =>
                    { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                (Action<ColumnDefinition<OutputRowViewModel>>)(c =>
                    { c.Persistent(); }));

            columns.Bound(
                c => c.AchievedBasedOnTeamLeaderValidation,
                    f => FormatHelper.Format(f, "#0.00"))
            .CssClass(teamLeaderValStyle)
            .SecuredCommentToolTip(
                m => m.AchievedBasedOnTeamLeaderValidationTooltip,
                m => m.AchievedBasedOnTeamLeaderValidationTitle,
                IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
            .Attribute("data-initialValue", m => "false")
            .Attribute("data-valueScore", m => "true")
            .Attribute("data-valueOutput", m => "true")
            .MakeEditableIf(
                ViewBag.CurrentStage == PCRStageTypeEnum.TeamLeaderValidationStage &&
                    ViewBag.WritePermissionStage,
                    (Func<OutputRowViewModel, HelperResult>)(modelRow =>
                        ControlTemplatesPCR.GridEditDecimal(
                            modelRow.AchievedBasedOnTeamLeaderValidation,
                            "txtOutputAchieved",
                            4,
                            false,
                            "0,1")),
                (Action<ColumnDefinition<OutputRowViewModel>>)(c =>
                    { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                (Action<ColumnDefinition<OutputRowViewModel>>)(c =>
                    { c.Persistent(); }));

            columns.Bound(
                c => c.AchievedBasedOnSPDValidation,
                    f => FormatHelper.Format(f, "#0.00"))
            .CssClass(SPDValStyle)
            .SecuredCommentToolTip(
                m => m.AchievedBasedOnSPDValidationTooltip,
                m => m.AchievedBasedOnSPDValidationTitle,
                IDBContext.Current.HasPermission(Permission.PCR_COMMENT_READ_PERMISSION))
            .Attribute("data-initialValue", m => "false")
            .Attribute("data-valueScore", m => "true")
            .Attribute("data-valueOutput", m => "true")
            .MakeEditableIf(
                ViewBag.CurrentStage == PCRStageTypeEnum.SPDValidationStage &&
                    ViewBag.WritePermissionStage,
                    (Func<OutputRowViewModel, HelperResult>)(modelRow =>
                        ControlTemplatesPCR.GridEditDecimal(
                            modelRow.AchievedBasedOnSPDValidation,
                            "txtOutputAchieved",
                            4,
                            false,
                            "0,1")),
                (Action<ColumnDefinition<OutputRowViewModel>>)(c =>
                    { c.Attribute("data-tooltip-hideonedit", m => "true"); }),
                (Action<ColumnDefinition<OutputRowViewModel>>)(c =>
                    { c.Persistent(); }));

            columns.Bound(c => c.AchievedBasedOnCurrentStage, f => FormatHelper.Format(f, "#0.00"))
                .CssClass("AchievCurrentStage highlight")
                .Persistent();
            columns.Bound(c => "").Attribute("data-pagemode", x => "edit").CssClass("pcr-column-white")
                .EditableTemplate(@<button class="btn btn-xs toggleRow">&nbsp;</button>); 
        })
        .RowTemplates(rows => rows.Create(RowTemplateType.AllRows, m => ControlTemplatesPCR.GridOutputCommentsRow(m.CommentsList, config.ResolvedPrimaryKey(m), ViewBag.CurrentStage, m.CommentsList.FirstOrDefault(x => x.PCRStageType == ViewBag.CurrentStage), ViewBag.WritePermissionStage, ViewBag.StageName, ViewBag.UserName)));

    config.TableClass = config.DefaultTableClass + "highlight-last checklist-row-template";
    config.UseCustomHeader = true;
    config.CustomHeader = (@<thead>
                                <tr>
                                    <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Output.ColDescription")</th>
                                    <th colspan="6" class="text-center">@Localization.GetText("PCR.Checklist.TabEffectiveness.Output.ColAchieved")</th>
                                    <th class="pcr-column-white" data-pagemode="edit"></th>
                                </tr>
                                <tr>
                                    <th></th>
                                    <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Output.ColResultMatrix")</th>
                                    <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Output.ColTLPreVal")</th>
                                    <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Output.ColSPDPreval")</th>
                                    <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Output.ColTLVal")</th>
                                    <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Output.ColSPDVal")</th>
                                    <th>@Localization.GetText("PCR.Checklist.TabEffectiveness.Output.ColCurrent")</th>
                                    <th class="pcr-column-white" data-pagemode="edit"></th>
                                </tr>
                            </thead>);
}

@Html.Partial("Controls/DataTable", config)