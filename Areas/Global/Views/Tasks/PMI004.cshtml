@using IDB.MW.Domain.Models.Global
@using IDB.MW.Domain.Entities
@model IDB.MW.Domain.Models.Supervision.Workflow.BasicPMIWorkflowIds
@{
	Layout = null;
}
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Messages/jquery_notification.css")" />
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/kendo/kendo.common.min.css")" />
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/esmartGeneral.css")" />
<link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/Risks/esmartGeneral.css")"/>
<script type="text/javascript" src="@Url.Content("~/Scripts/correctBackground/correctBackground.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Index/Index.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Task/AddCommentTask.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>

@{
	Layout = null;

	string instructions = string.Empty;
	string actualClassification = string.Empty;

	int resultsMatrixId = Model.ResultsMatrixId;
	int intervalId = Model.interval.IntervalId;
	int cycleId = Model.interval.CycleId;
	string operationNumber = Model.OperationNumber;
	var taskViewModel = (CompleteTaskViewModel)ViewBag.taskViewModel;
	if (ViewBag.Description != null) {
		instructions = ViewBag.Description;
	}
	if (ViewBag.Classification != null) {
		actualClassification = ViewBag.Classification;
	}
}

<script type="text/javascript">
	$(document).ready(function () {
		

		$("#classification").kendoDropDownList({
			dataTextField: "text",
			dataValueField: "value",
			height: 100
		});
	});
</script>

@{
	var tasks = (List<MyTasksViewModel>)ViewBag.tasks;
	tasks = tasks.OrderBy(task => task.WorkflowInstanceTaskId).ToList();
	MyTasksViewModel previous = null;
	var nc_coo_index = tasks.FindIndex(task => task.Status.Contains('-') &&
		task.Status.Split('-')[1] == "PMI_NC_COO");
	var currentTask = tasks.First(task
		=> task.WorkflowInstanceTaskId == Model.CompleteTaskView.TaskId);

	if (nc_coo_index != -1) {
		previous = tasks[nc_coo_index - 1];
	} else {
		var taskIndex = tasks.FindIndex(task => task.WorkflowInstanceTaskId ==
			Model.CompleteTaskView.TaskId);
		previous = tasks[taskIndex - 1];
	}
}


<section class="central">
	<h2 class="hide">Seccion central de Contenido</h2>
	<div class="mod_contenido_central modEditingBasicData">
		@{Html.RenderAction(
			"AdditionalValidators", "Tasks", new {
				area = "Global",
				Code = "WF-PMI-004",
				Editable = false,
				TaskId = Model.CompleteTaskView.TaskId
			});
		}
		<div class="operationData dataDetails marginTop2Bottom1">
			<div class="operationData min_padding_left dataSocial">
				<div class="data6">
					<p class="dataTitle">@Localization.GetText("Instructions")</p>
					<p>@instructions</p>
				</div>
				<div class="data6">
					@Html.Hidden("Clasification",Model.PreviousClasification)
				</div>

				@{
					Html.RenderAction("VerifyContent", "VerifyContent", new { area = "ResultsMatrix", resultsMatrixId, intervalId, cycleId });

				}

			</div>
		</div>
		<div class="operationData marginTop2Bottom1" style="padding-left: 40px;">

			<h4 class="headingh3 min_bootom_headingh3">@Localization.GetText("Comments")</h4>
			<table id="commentTableUIRI001" class="grid w100 noInnerPadding fixedValues" style="position: relative; left: 2.6%">
				@for (int i = 0; i < @Model.UserComments.Count(); i++) {
                
					<tr>
						<td>
							<div class="padding10 leftAlign">
								<div class="verticalMargin10 w100">
									<div class="verticalMargin10 inline-block" style="padding-right: 10px;">@(Model.UserComments[i].Modified == null ? "" : Model.UserComments[i].Modified.Value.ToString("dd MMM yy"))</div>
									<div class="verticalMargin10 inline-block bold marginLeft3">@Model.UserComments[i].ModifiedBy</div>
								</div>
								<div class="verticalMargin10 w100">
									@Html.HiddenFor(x => x.UserComments[i].UserCommentId)
									@Html.HiddenFor(x => x.UserComments[i].ModifiedBy)
									@Html.HiddenFor(x => x.UserComments[i].Modified)
									@Html.HiddenFor(x => x.UserComments[i].Text)
									<div class="verticalMargin10 inline-block bold marginLeft3">@Model.UserComments[i].Text</div>
								</div>
							</div>
						</td>
					</tr>
	}
			</table>
		</div>
	</div>
</section>
