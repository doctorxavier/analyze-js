<div class="row">
    <div class="col-md-3">
        @Confluence.LabelMainTitle("Automatic submit")<br/><br/>
        @Confluence.ButtonBlue(Localization.GetText("VER.GLOBAL.Submit"), action: "automaticSubmit", dataAttributes: new Dictionary<string, string>() {{"idb-fieldname", "btnEditBscDt"}})

        @Confluence.LabelMainTitle("Sync VMR participant from AD")<br /><br />
        @Confluence.ButtonBlue(Localization.GetText("Synchronize"), action: "SyncVmrParticipantsWithAd", dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "btnEditBscDt" } })
    </div>
    <div class="col-md-3">
        @Confluence.LabelMainTitle("Minute Batch")<br /><br />
        @Confluence.ButtonBlue(Localization.GetText("VER.GLOBAL.Submit"), action: "minuteBatch", dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "btnEditBscDtbatch" } })
    </div>
    <div class="col-md-6">
        @Confluence.LabelMainTitle("Execution date")<br/><br/>
        @Confluence.InputDropDown(null, "ddlInstance", ViewBag.InstancesList)<br/>
        @Confluence.InputDatePicker(null, "executionDate")<br/><br/>
        @Confluence.ButtonBlue("Set exectution date of process flow", action: "setExecutionDate", dataAttributes: new Dictionary<string, string>() {{"idb-fieldname", "btnEditBscDt"}})
    </div>
</div>

<div class="row mt10">
    <div class="col-md-3">
        @Confluence.LabelMainTitle("Generate Encripted key")<br />
        @Confluence.InputTextArea(string.Empty, "inputValue", placeholder: "Multiple ids separated by semicolon ';'", width: "100%")<br />
        @Confluence.ButtonBlue("Generate", action: "generateEncriptedKey", dataAttributes: new Dictionary<string, string>() { { "idb-fieldname", "btnEditBscDt" } })
    </div>
</div>

<script type="text/javascript">

    function automaticSubmit() {
        $.ajax({
            type: "POST",
            async: false,
            url: "@Url.Action("AutomaticSubmitTest", "MeetingRoom", new { area = "VMR" })"
        }).done(function(data) {
            if (data === true) {
                showMessage("Automatic submit completed");
            } else {
                showMessage("Error in automatic submit");
            }
        });
    }

    function minuteBatch() {
        $.ajax({
            type: "POST",
            async: false,
            url: "@Url.Action("MinuteBatch", "MeetingRoom", new { area = "VMR" })"
        }).done(function(data) {
            if (data === true) {
                showMessage("Automatic submit batch completed");
            } else {
                showMessage("Error in automatic submit batch");
            }
        });
    }

    function setExecutionDate() {
        var idInstance = $("input[name='ddlInstance']").val();
        var executionDate = $("input[name='executionDate']").val();

        $.ajax({
            type: "POST",
            async: false,
            url: "@Url.Action("SetExecutionDate", "MeetingRoom", new { area = "VMR" })",
            data: { instanceId: idInstance, executionDate: executionDate }
        }).done(function(data) {
            if (data.IsValid === true) {
                showMessage("Date changed successfully");
            } else {
                showMessage("Unrealized change");
            }
        });
    }

    function SyncVmrParticipantsWithAd() {

        $.ajax({
            type: "POST",
            async: false,
            url: "@Url.Action("SyncVmrParticipantsWithAd", "MeetingRoom", new { area = "VMR" })"
        }).done(function(data) {
            if (data.IsValid === true) {
                showMessage("Synchronize participant completed");
            } else {
                showMessage("Failed to sync participants");
            }
        });
    }

    function generateEncriptedKey() {

        var inputValue = $("[name='inputValue']").val();

        $.ajax({
            type: "POST",
            async: false,
            url: "@Url.Action("GenerateEncriptedKey", "MeetingRoom", new { area = "VMR" })",
            data: { inputValue: inputValue }
            
        }).done(function(data) {

            if (data.IsValid === true) {
                var text = '';
                
                var values = data.EncriptedKeys;

                for (i = 0; i < values.length; i++) {
                    text += 'Id: ' + values[i].Key + ' - EncriptedKey: ' + encodeURIComponent(values[i].EncriptedKey) + '<br />';
                }

                showMessage(text);
            } else {
                showMessage(data.ErrorMessage);
            }
        });
    }
</script>
