@model IDB.Presentation.MVC4.Models.Outcomes.CustomDeleteOutcomeModel
@{
    ViewBag.Title = "Delete";
}

@section JavaScript
{
    <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/ResultsMatrix/Impacts/common.js")"></script>
}

<script>
    $(document).ready(function () {

        $("#saveDeleteOutcome").click(function (e) {
            e.preventDefault();
            if (($("#intervalId").val() == 3) || ($("#AccessedByAdministrator").val() === "True" && $("#IsThirdInterval").val() == "True")) {
                hideDefaulDeleteImpactWarningContent();
            } else {
                $("#DeleteImpactForm").submit();
                removeModalContent();
            }
        });

        $("#cancelDeleteOutcome").click(function (e) {
            e.preventDefault();
            removeModalContent();
        });

        $("#saveDeleteOutcomeThirdInterval").click(function (e) {
            e.preventDefault();
            idbg.lockUiRM(null, true);
            $("#DeleteImpactForm").submit();
            removeModalContent();
        });

        $("#cancelDeleteOutcomeThirdInterval").click(function (e) {
            e.preventDefault();
            removeModalContent();
        });

    });

    function hideDefaulDeleteImpactWarningContent() {

        // Hide default controls
        $("#cancelDeleteOutcome").hide();
        $("#saveDeleteOutcome").hide();
        $("#defaultOutcometWarningContainer").hide();

        // Show third interval comtrols
        $("#thirdIntervalOutcomeWarningContainer").show();
        $("#cancelDeleteOutcomeThirdInterval").show();
        $("#saveDeleteOutcomeThirdInterval").show();

    }

    function removeModalContent() {
        $(window.parent.document).find('body').find(".ui-widget-overlay").remove();
        $(".ui-widget-overlay").remove();
        $(".k-window").remove();
    }
</script>

@{
    var impactList = new List<SelectListItem>();

    foreach (var impact in Model.existingImpacts)
    {
        impactList.Add(new SelectListItem()
        {
            Value = impact.OutcomeId.ToString(),
            Text = impact.Statement,
            Selected = impact.Statement.Equals("Delete") ? true : false
        });
    }

    int flagMessage = 0;

    if (Model.AccessedByAdministrator)
    {
        if ((Model.currentImpact.OutcomeIndicators.Any() &&
            Model.existingImpacts.Any()))
        {
            flagMessage = 1;
        }
        else
        {
            flagMessage = 3;
        }
    }
    else
    {
        flagMessage = 0;
    }

}

@using (Html.BeginForm("DeleteOutcome", "Outcomes", FormMethod.Post, new { area = "ResultsMatrix", id = "DeleteImpactForm", @class = "" }))
{

    @Html.HiddenFor(x => x.currentImpact.OutcomeId)
    @Html.HiddenFor(m => m.intervalId)
    @Html.HiddenFor(r => r.resultsMatrixId)
    @Html.HiddenFor(x => x.AccessedByAdministrator);
    @Html.HiddenFor(x => x.IsThirdInterval);

    <div class="contentImpacts">

        <div id="defaultOutcometWarningContainer">

            @if (flagMessage == 1 || flagMessage == 3)
            {
                <div class="dataContent1">
                    <p class="dataTitle">@Localization.GetText("TCM.Outcome.OutcomeName")</p>
                    <p class="dataText">@Model.currentImpact.Statement</p>
                </div>
            }
            <div class="dataContent1">

                @if (flagMessage == 1)
                {
                    <p class="dataText">
                        @Localization.GetText("TCM.DO.DeleteOutcomeStatement.RelatedIndicatorsMessage")
                    </p>
                }
                else
                {
                    if (flagMessage == 0)
                    {
                        <div class="dataText">
                            @Localization.GetText("RM.Outcome.Message.OutcomeValidated")
                        </div>
                    }
                }

            </div>

            @if (flagMessage == 1)
            {
                <div class="dataContent1">
                    <div class="mod_tabla no_sortable">
                        <table class="grid4">
                            <thead>
                                <tr>
                                    <th class="btn_azul_oscuro" data-field="Operation">
                                        @Localization.GetText("Outcome Indicator")
                                    </th>
                                    <th class="btn_azul_oscuro" data-field="LoanNumber">
                                        @Localization.GetText("Outcome")
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (var indicatorIndex = 0; indicatorIndex < Model.currentImpact.OutcomeIndicators.Count(); indicatorIndex++)
                                {
                                    <tr>
                                        <td>
                                            @Html.HiddenFor(x => x.currentImpact.OutcomeIndicators[indicatorIndex].OutcomeIndicatorId)
                                            @Model.currentImpact.OutcomeIndicators[indicatorIndex].Definition
                                        </td>
                                        <td>
                                            <fieldset>
                                                <legend class="hide">Dropdown con opciones</legend>
                                                <ul class="optionList">
                                                    <li class="small">
                                                        @Html.DropDownListFor(
                                                            x => x.currentImpact.OutcomeIndicators[indicatorIndex].ReassignToImpact,
                                                            impactList,
                                                            new
                                                            {
                                                                @class = "optionSelect optionSelectDeleteImpact",
                                                                style = "width: 100% !important;"
                                                            })
                                                    </li>
                                                </ul>
                                            </fieldset>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }

        </div>

        <div id="thirdIntervalOutcomeWarningContainer" style="display: none">
            @if ((Model.intervalId == 3 && ViewData["message"] != null) ||
                (Model.IsThirdInterval && Model.AccessedByAdministrator && ViewData["message"] != null))
            {
                <div class="dataContent1">
                    @ViewData["message"]
                </div>
            }
        </div>
    </div>
    <div class="contentImpacts">
        @if (Model.AccessedByAdministrator)
        {
            <P class="text-center alert alert-warning mt1em mb0 font15">
                @Localization.GetText("TCM.DOI.DeleteOutcomeIndicator.TextDeleteWarning")
            </P>
        }
    </div>

    <div class="pie pieReassign">
        <div class="botones">
            <a title="@Localization.GetText("Cancel")" class="cancel cancelDeleteComponent"
               id="cancelDeleteOutcome" href="javascript:void(0)">@Localization.GetText("Cancel")</a>
            <a title="@Localization.GetText("Cancel")" style="display: none" class="cancel"
               id="cancelDeleteOutcomeThirdInterval" href="javascript:void(0)">@Localization.GetText("Cancel")</a>

            @if (Model.AccessedByAdministrator)
            {
                <label for="delete">
                    <input type="button" value="@Localization.GetText("Delete")"
                           class="btn btn-warning deleteComponent" id="saveDeleteOutcome">
                </label>
            }

            <label for="delete">
                <input type="button" value="@Localization.GetText("Save")" class="btn btn-warning"
                       style="display:none" id="saveDeleteOutcomeThirdInterval">
            </label>
        </div>
    </div>
}
