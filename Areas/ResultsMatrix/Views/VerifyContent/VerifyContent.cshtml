@model IDB.MW.Domain.Models.Architecture.ResultMatrix.Common.ContentVerifyModel
@{
    ViewBag.Title = Localization.GetText("Verify Content");
}

@{
   var pageSize = Convert.ToInt32(Model.Verifications.Count() / 2);
   var page = Math.Ceiling(Convert.ToDouble(Model.Verifications.Count()) / 2);
   var FirstPageCount = 0;
}


<script>
   $(document).ready(function () {

      $("#lnkCloseVerifyContent").click(function () {
         $(window.parent.document).find('body').find(".ui-widget-overlay").remove();
         $(".ui-widget-overlay").remove();
         $(".k-window").remove();
      });

      $("#lnkPageTwo").click(function (e) {
         e.preventDefault();
         $("#tblVerificationOne").hide();
         $("#tblVerificationTwo").show();
      });

      $("#lnkPageOne").click(function (e) {
         e.preventDefault();
         $("#tblVerificationTwo").hide();
         $("#tblVerificationOne").show();
      });

   });
</script>

<div class="contentContainer">
   <div class="verticalMargin10 w100">

      <table id="tblVerificationOne" class="gridVerifyContent w73 inline-block grayColor">
         <thead>
            <tr>
               <th>@Localization.GetText("Verification")</th>
               <th class="compilanceTh">@Localization.GetText("Compliance")</th>
            </tr>
         </thead>
         <tbody class="alignLeft">
            @if (page <= 5)
            {
               foreach (var verificationItem in Model.Verifications)
               {
                  string statusClass = string.Empty;

                  switch (verificationItem.Compliance)
                  {
                     case IDB.MW.Domain.Models.Architecture.Enumerations.VerifyContentCodes.SuccesStatus: statusClass = "successStatus"; break;
                     case IDB.MW.Domain.Models.Architecture.Enumerations.VerifyContentCodes.WarningStatus: statusClass = "warningStatus"; break;
                     case IDB.MW.Domain.Models.Architecture.Enumerations.VerifyContentCodes.ErrorStatus: statusClass = "errorStatus"; break;
                  }
                
               <tr>
                  <td>@Localization.GetText(@verificationItem.Description)</td>
                  <td>
                     <div class="statusContainer">
                        <div class="@statusClass"></div>
                     </div>
                  </td>
               </tr>
               }
            }
            else
            {

               for (int i = 0; i < (pageSize * 2); i++)
               {


                  string statusClass = string.Empty;

                  switch (Model.Verifications[i].Compliance)
                  {
                     case IDB.MW.Domain.Models.Architecture.Enumerations.VerifyContentCodes.SuccesStatus: statusClass = "successStatus"; break;
                     case IDB.MW.Domain.Models.Architecture.Enumerations.VerifyContentCodes.WarningStatus: statusClass = "warningStatus"; break;
                     case IDB.MW.Domain.Models.Architecture.Enumerations.VerifyContentCodes.ErrorStatus: statusClass = "errorStatus"; break;
                  }
                
               <tr>
                  <td>@Localization.GetText(@Model.Verifications[i].Description)</td>
                  <td>
                     <div class="statusContainer">
                        <div class="@statusClass"></div>
                     </div>
                  </td>
               </tr>
                    
                  FirstPageCount++;
               }
            }
         </tbody>
      </table>



      @if (page > 5)
      { 
         <table id="tblVerificationTwo" class="gridVerifyContent w73 inline-block grayColor" style="display: none">
            <thead>
               <tr>
                  <th>@Localization.GetText("Verification")</th>
                  <th class="compilanceTh">@Localization.GetText("Compliance")</th>
               </tr>
            </thead>
            <tbody class="alignLeft">
               @for (int i = FirstPageCount; i < Model.Verifications.Count(); i++)
               {
                  string statusClass = string.Empty;

                  switch (Model.Verifications[i].Compliance)
                  {
                     case IDB.MW.Domain.Models.Architecture.Enumerations.VerifyContentCodes.SuccesStatus: statusClass = "successStatus"; break;
                     case IDB.MW.Domain.Models.Architecture.Enumerations.VerifyContentCodes.WarningStatus: statusClass = "warningStatus"; break;
                     case IDB.MW.Domain.Models.Architecture.Enumerations.VerifyContentCodes.ErrorStatus: statusClass = "errorStatus"; break;
                  }
                     
                  <tr>
                     <td>@Localization.GetText(@Model.Verifications[i].Description)</td>
                     <td>
                        <div class="statusContainer">
                           <div class="@statusClass"></div>
                        </div>
                     </td>
                  </tr>
               }

            </tbody>
         </table>
      }

      <div class="paginationContainer">
         @if (Model.Verifications.Count() > 10)
         {
            <a id="lnkPageOne">1</a><a id="lnkPageTwo">2</a>
         }

      </div>


      <table class="acronymContainer">
         <tr>
            <td>
               <div class="successStatus"></div>
            </td>
            <td class="acronymTd">
               <div>@Localization.GetText("Correct and complete")</div>
            </td>
         </tr>
         <tr>
            <td>
               <div class="warningStatus"></div>
            </td>
            <td class="acronymTd">
               <div>@Localization.GetText("Please review, some contents can be missing or wrong")</div>
            </td>
         </tr>
         <tr>
            <td>
               <div class="errorStatus"></div>
            </td>
            <td class="acronymTd">
               <div>@Localization.GetText("Please review, critical information is missing or wrong")</div>
            </td>
         </tr>
      </table>
      <br />
   </div>

   <div class="pie pieReassign">
      <div class="botones">
         
      </div>
   </div>

</div>
