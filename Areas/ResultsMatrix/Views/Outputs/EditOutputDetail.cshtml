@using IDB.MW.Application.OPUSModule.Enums
@using IDB.MW.Domain.Models.Architecture.Enumerations
@using IDB.Presentation.MVC4.Models.Modal

@model IDB.MW.Domain.Models.Architecture.ResultMatrix.Outputs.OutputModel
@{
   var categoriesList = new List<SelectListItem>();
   if (ViewBag.Categories != null)
   {
      List<IDB.MW.Domain.Models.Architecture.ResultMatrix.Outputs.OutputCategoryModel> cList = ViewBag.Categories;
      cList.ForEach(x =>
          categoriesList.Add(new SelectListItem()
          {
             Value = x.OutputCategoryId.ToString(),
             Text = x.NameEn,
             Selected = x.OutputCategoryId == Model.OutputCategoryId ? true : false
          }));

   }

   int initYear = Model.onPipelineDate.Year;
   var baseLineYearList = new List<SelectListItem>();
   baseLineYearList.Add(new SelectListItem()
   {
      Value = string.Empty,
      Text = string.Empty,
      Selected = true

   });
   for (int i = initYear - 10; i <= initYear + 30; i++)
   {
      baseLineYearList.Add(new SelectListItem()
      {
         Value = i.ToString(),
         Text = i.ToString(),
         Selected = false

      });
   }
}

@section JavaScript {
   <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/ResultsMatrix/Outputs/EditOutput.js")"></script>
    @Scripts.Render("~/bundles/OnlyNewConfluence")
}

@section CSS {
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/ResultsMatrix/Outputs/ResultMatrix_Outputs.css")" />
}

@Confluence.ModalWarning(
    Html.Partial("~/Areas/OPUS/Views/View/Partials/OperationData/StrategicAlignmentResultsMatrixPartial.cshtml"),
    buttons: new List<ModalButtonsViewModel> { new ModalButtonsViewModel { Name = "save", Text = Localization.GetText("Save"), Type = "buttonBlue" } },
    id: "checkRmIndicatorRelationsModal")

<script>
   $(document).hover(function () {
      $('#IsProgender').parent().children("span").text("@Localization.GetText("Pro-Gender")");
      $('#IsProethnicity').parent().children("span").text("@Localization.GetText("Pro-Ethnicity")");
   });

    var hasVisualOutputs = JSON.parse("@Model.HasVisualOutputs".toLowerCase());
</script>

@Html.Hidden("ReassingOutputInfo", Url.Action("EditReassingOutput", "Outputs", new { area = "ResultsMatrix", outputID = Model.OutputId }), new { data_title = "Reassign output interface" })

@Html.Hidden("OutputMeansVerification")
@Html.Hidden("OutputBaseline")
@Html.Hidden("OutputBaselineYear")

@Html.Hidden("hdnIsAutoCalcPhysycalEop", Model.IsAutoCalcPhysycalEop)
@Html.Hidden("hdnMileStoneBasedPmi", Model.MileStoneBasedPmi)
@Html.Hidden("hdnIsProgender", Model.IsProgender)
@Html.Hidden("hdnIsProethnicity", Model.IsProethnicity)
@Html.Hidden("hdnIsDeactivated", Model.IsDeactivated)
@Html.Hidden("WarningMessageURL", Url.Action("IndexChangeMatrixWarningMessage", "Outputs", new { area = "ResultsMatrix", formName = "outputsTarget" }))
@Html.Hidden("WarningMessageVisualOutputURL", Url.Action("IndexChangeMatrixWarningMessageVisualOutput", "Outputs", new { area = "ResultsMatrix", formName = "outputsTarget" }))

@************ Hidden fields for interval *************@
@Html.Hidden("hdnIntervalId", Model.Interval.IntervalId)
@Html.Hidden("hdnCycleId", Model.Interval.CycleId)
@Html.Hidden("hdnAccessedByAdministrator", Model.AccessedByAdministrator)
@Html.Hidden("hdnBeforeDeleteUrl", @Url.Action("CheckIndicatorSAClassificationDelete", "View", new { area = "OPUS" }))


@using (Html.BeginForm("UpdateOutputDetails", "Outputs", FormMethod.Post, new { area = "ResultMatrix", id = "outputsTarget" }))
{
   @Html.HiddenFor(m => m.OutputId)
   <h2 class="hide">Seccion central de Contenido</h2>
   <div class="mod_contenido_central impacts">
      <h3 class="headingh2 tipo1"><a href="@(Url.Action("IndexPhysicalProgress", "Outputs", new { area = "ResultsMatrix", OperationNumber = Model.OperationOperationNumber }))" title="Output Detail">@Localization.GetText("Output")</a></h3>
      <div class="editingButtons" style="display: block;">
         <a class="cancel" href="@(Url.Action("IndexOutputDetail", "Outputs", new { area = "ResultsMatrix", outputID = Model.OutputId }))" title="@Localization.GetText("Cancel")">@Localization.GetText("Cancel")</a>
         <label for="guardar1">
            <input type="button" class="btn-primary_2 save" value="@Localization.GetText("Save")" id="guardar1"
                data-sa-checkindicators-usedforsa="@Model.UsedForStrategicAlignment.ToString()"
                data-sa-checkindicators-placeholder="@Localization.GetText("TCM.SelectOptionParenthesis")"
                data-sa-checkindicators-url="@Url.Action(
                    "CheckRmIndicatorRelationsToSAClassifications",
                    "View",
                    new
                    {
                        area = "OPUS",
                        operationNumber = Model.OperationOperationNumber,
                        elementType = ResultsMatrixElementTypesEnum.Output,
                        rmElementId = Model.OutputId
                    })">
         </label>
      </div>
      <div class="desheadingh3 ">
         <p class="description">@Model.ComponentStatement</p>
      </div>
      <div class="marginLeft4Con7-f02">
         <!-- content flt w75-->
         <h4 class="ftl w75 headingh4 title">@Model.Definition</h4>
         <!-- End content flt w16-->

      </div>
      <div class="ftl marginLeft4Con7-f02 w75">
         <h5 class="headingh4">@Localization.GetText("Output details")</h5>
         <div class="operationData">
            <div style="width: 100%">
               <dl class="ftl w45">
                  <dt class="dataTitle">@Localization.GetText("Means of verification")</dt>
                  <dd class="dataText">@Html.TextBoxFor(x => x.MeansOfVerification, new { id = "MeansOfVerification", @class = "inputTextOutput inputTextOutputVerification" })</dd>

               </dl>
               <div class="data4">
                  <p class="dataTitle">@Localization.GetText("Baseline")</p>

                  <p>
                     @Html.TextBoxFor(x => x.Baseline, new { id = "Baseline", @class = "inputTextOutput btn-style numberInput" })
                  </p>

               </div>
               <div class="data4">
                  <p class="dataTitle">@Localization.GetText("Baseline year")</p>
                  <ul class="optionList" style="margin-top: 0em;">
                     <li class="small">
                        @Html.DropDownListFor(x => x.BaselineYear, baseLineYearList, new { name = "BaselineYear", @class = "optionSelect" })
                     </li>
                  </ul>
               </div>
               <div class="data4">
                  <p class="dataTitle">@Localization.GetText("Category")</p>
                  <ul class="optionList" style="margin-top: 0em;">
                     <li class="small">
                        @Html.DropDownListFor(x => x.OutputCategoryId, categoriesList, new { name = "OutputCategoryId", @class = "optionSelect", style = "width:15em;" })
                     </li>
                  </ul>
               </div>
            </div>
         </div>
         <div class="listWrapper ftl marginLeft0">


            <dl>
               <dt class="hide">@Localization.GetText("OD.SelectOutputDet")</dt>
               @if (Model.AccessedByAdministrator && Model.Interval.IntervalId == ResultsMatrixCodes.ThirdInterval)
               {
                  <dd class="dataText custom">
                     <label class="editLabel w70 checkbox-f01" for="check1">
                        @Html.CheckBoxFor(m => m.IsAutoCalcPhysycalEop, new Dictionary<string, Object> { { "id", "IsAutoCalcPhysycalEop" }, { "name", "IsAutoCalcPhysycalEop" }, { "data-caption", Localization.GetText("Add annual values to calculate EOP Targets (Original Planned, Annual Plan and Actual)") }, { "style", "display:none;" } })
                     </label>
                     <div id="MileStoneBasedPmiContainer">
                        <label class="editLabel w70 checkbox-f02" for="check2">
                           @Html.CheckBoxFor(m => m.MileStoneBasedPmi, new Dictionary<string, Object> { { "id", "MileStoneBasedPmi" }, { "name", "MileStoneBasedPmi" }, { "data-caption", Localization.GetText("Progress must be measured using milestones for this output") }, { "style", "display:none;" } })
                        </label>
                     </div>
                  </dd> 
               }
               else if ((Model.Interval.IntervalId == ResultsMatrixCodes.ThirdInterval && Model.IsValidated))
               {
                  <dd class="dataText custom">
                     <label class="editLabel w70 checkbox-f01" for="check1">
                        <input name="check1" type="checkbox" id="check1" disabled="disabled">
                        @if (Model.IsAutoCalcPhysycalEop)
                        {
                           <span class="custom checkbox unableMarked" style="width: 500px;">@Localization.GetText("Add annual values to calculate EOP Targets (Original Planned, Annual Plan and Actual)")</span>                           
                        }
                        else
                        {
                           <span class="custom checkbox disabled" style="width: 500px;">@Localization.GetText("Add annual values to calculate EOP Targets    (Original Planned, Annual Plan and Actual)")</span>                           
                        }
                     </label>
                     <label class="editLabel w70 checkbox-f02" for="check2">
                        <input name="check2" type="checkbox" id="check2" disabled="disabled">
                        @if (Model.MileStoneBasedPmi)
                        {
                           <span class="custom checkbox unableMarked" style="width: 500px;">@Localization.GetText("Progress must be measured using milestones for this output")</span>
                        }
                        else
                        {
                           <span class="custom checkbox disabled" style="width: 500px;">@Localization.GetText("Progress must be measured using milestones for this output")</span>
                        }
                     </label>
                  </dd>                  
               }
               else if (Model.Milestones.Count == 0)
               {
                  <dd class="dataText custom">
                     <label class="editLabel w70 checkbox-f01" for="check1">
                        @Html.CheckBoxFor(m => m.IsAutoCalcPhysycalEop,
                        new Dictionary<string, Object> { { "id", "IsAutoCalcPhysycalEop" }, { "name", "IsAutoCalcPhysycalEop" }, { "data-caption", Localization.GetText("Add annual values to calculate EOP Targets (Original Planned, Annual Plan and Actual)") }, { "style", "display:none;" } })

                     </label>
                     <label class="editLabel w70 checkbox-f02" for="check2">
                        <input name="check2" type="checkbox" id="check2" disabled="disabled">
                        @if (Model.MileStoneBasedPmi)
                        {
                           <span class="custom checkbox unableMarked" style="width: 500px;">@Localization.GetText("Progress must be measured using milestones for this output")</span>
                        }
                        else
                        {
                           <span class="custom checkbox disabled" style="width: 500px;">@Localization.GetText("Progress must be measured using milestones for this output")</span>
                        }
                     </label>
                     <label class="editLabel w70 checkbox-f02">
                        @Localization.GetText("OD.FirstInsertOneMilestone")
                     </label>

                  </dd>
               }
               else
               {
                  <dd class="dataText custom">
                     <label class="editLabel w70 checkbox-f01" for="check1">
                        @Html.CheckBoxFor(m => m.IsAutoCalcPhysycalEop,
                        new Dictionary<string, Object> { { "id", "IsAutoCalcPhysycalEop" }, { "name", "IsAutoCalcPhysycalEop" }, { "data-caption", Localization.GetText("Add annual values to calculate EOP Targets (Original Planned, Annual Plan and Actual)") }, { "style", "display:none;" } })

                     </label>
                     <div id="MileStoneBasedPmiContainer">
                        <label class="editLabel w70 checkbox-f02" for="check2">
                           @if (Model.Interval.IntervalId == ResultsMatrixCodes.ThirdInterval && !Model.IsValidated && !Model.AccessedByAdministrator)
                           {
                              if (Model.MileStoneBasedPmi)
                              {
                              <span class="custom checkbox unableMarked" style="width: 500px;">@Localization.GetText("Progress must be measured using milestones for this output")</span>
                              }
                              else
                              {
                              <span class="custom checkbox disabled" style="width: 500px;">@Localization.GetText("Progress must be measured using milestones for this output")</span>
                              }
                           }
                           else
                           {
                              @Html.CheckBoxFor(m => m.MileStoneBasedPmi,
                              new Dictionary<string, Object> { { "id", "MileStoneBasedPmi" }, { "name", "MileStoneBasedPmi" }, { "data-caption", Localization.GetText("Progress must be measured using milestones for this output") }, { "style", "display:none;" } })
                           }

                        </label>
                     </div>
                  </dd>
               }
            </dl>
         </div>
         <div class="listWrapper ftl marginLeft0">
            <h5 class="headingh4">@Localization.GetText("Gender and ethnicity flags")</h5>
            <dl>
               <dt class="">@Localization.GetText("RM.IsProGenOrEth")</dt>
               <dd class="dataText custom"><br/>
                  <label class="editLabel checkbox-f01" style="width: 15%; height: 40px;" for="IsProgender">
                     @if (Model.isLinkedPreIndicator)
                     {
                        if (Model.IsProgender)
                        {
                        <span id="IsProgender" class="custom checkbox unableMarked">@Localization.GetText("RM.MarkGen")</span>
                        }
                        else
                        {
                        <span id="IsProgender" class="custom checkbox disabled">@Localization.GetText("RM.MarkGen")</span>
                        }
                     }
                     else
                     {
                        @Html.CheckBoxFor(m => m.IsProgender, new Dictionary<string, Object> { { "id", "IsProgender" }, { "name", "IsProgender" }, { "data-caption", Localization.GetText("RM.MarkGen") }, { "style", "display:none;" } })
                                
                     }
                  </label>
                  <div id="ProGenderWarningMsg" class="hidden field-validation-error" style="height: 80px;">@Localization.GetText("RM.MarkGen")</div>
                  <label class="editLabel checkbox-f02" style="width: 15%; height: 100px;" for="IsProethnicity">
                     @if (Model.isLinkedPreIndicator)
                     {
                        if (Model.IsProethnicity)
                        {
                        <span id="IsProethnicity" class="custom checkbox unableMarked">@Localization.GetText("RM.MarkEth") </span>                        }
                        else
                        {
                        <span id="IsProethnicity" class="custom checkbox disabled">@Localization.GetText("RM.MarkEth")</span>
                        }
                     }
                     else
                     {
                        @Html.CheckBoxFor(m => m.IsProethnicity, new Dictionary<string, Object> { { "id", "IsProethnicity" }, { "name", "IsProethnicity" }, { "data-caption", Localization.GetText("RM.MarkEth") }, { "style", "display:none;" } })
                     }
                  </label>
                  <div id="ProEthnicityWarningMsg" style="margin-top: 2em;" class="hidden field-validation-error">@Localization.GetText("RM.MarkEth")</div>
               </dd>
            </dl>
            <p class="contextual_help help-f01">@Localization.GetText("OD.NoteOutputDisagregation")</p>
         </div>
         <div class="listWrapper ftl marginLeft0">
            <h5 class="headingh4">@Localization.GetText("Other options")</h5>
            <dl>
               <dt class="hide">@Localization.GetText("OD.SelectOtherOp")</dt>
               <dd class="dataText custom">
                  <label class="editLabel w70 checkbox-f01" for="check5">
                     @Html.CheckBoxFor(m => m.IsDeactivated, new Dictionary<string, Object> { { "id", "IsDeactivated" }, { "name", "IsDeactivated" }, { "data-caption", Localization.GetText("OD.IncativeOutput") }, { "style", "display:none;" } })
                  </label>
               </dd>
            </dl>
            <p class="contextual_help help-f01">@Localization.GetText("OD.NoteProgressMonitoring")</p>
         </div>
      </div>

      <!-- End content flt w75-->
   </div>
   <div class="mod_contenido_central impacts">
      <div class="editingButtons" style="display: block;">
         <a class="cancel" href="@(Url.Action("IndexOutputDetail", "Outputs", new { area = "ResultsMatrix", outputID = Model.OutputId }))" title="@Localization.GetText("Cancel")">@Localization.GetText("Cancel")</a>
         <label for="guardar2">
            <input type="button" class="btn-primary_2 save" value="@Localization.GetText("Save")" id="guardar2"
                data-sa-checkindicators-usedforsa="@Model.UsedForStrategicAlignment.ToString()"
                data-sa-checkindicators-placeholder="@Localization.GetText("TCM.SelectOptionParenthesis")"
                data-sa-checkindicators-url="@Url.Action(
                    "CheckRmIndicatorRelationsToSAClassifications",
                    "View",
                    new
                    {
                        area = "OPUS",
                        operationNumber = Model.OperationOperationNumber,
                        elementType = ResultsMatrixElementTypesEnum.Output,
                        rmElementId = Model.OutputId
                    })">
         </label>
      </div>
   </div>
}


