@using IDB.MW.Domain.Models.Architecture.Enumerations
@model IDB.MW.Domain.Models.Architecture.ResultMatrix.Outputs.ResultsMatrixModel

@section JavaScript {
    <script type="text/javascript" src="@Url.Content("~/Scripts/botonActivo/botonActivo.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/foldingTable/Outputs/tableFold.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/foldingTable/Outputs/main.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/ResultsMatrix/Outputs/main.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/ResultsMatrix/VerifyContent/main.js")"></script>
}

@section CSS {
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/ResultsMatrix/Outputs/ResultMatrix_Outputs.css")" />
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/ResultsMatrix/Common/VerifyContent.css")" />
}
@Html.Hidden("urlRoute", Url.Action("IndexVisualizationProgress", "Outputs", new { area = "ResultsMatrix", OperationNumber = Model.Operation.OperationNumber }))



@************ Hidden fields for interval *************@
@Html.Hidden("hdnIntervalId", Model.interval.IntervalId)
@Html.Hidden("hdnCycleId", Model.interval.CycleId)

<h2 class="hide">Seccion central de Contenido</h2>
<div class="mod_contenido_central impacts">
    @Html.Partial("IndexSharedHeader", Model, new ViewDataDictionary { { "isVisualizationProgress", true } })

    <div class="editingButtonsEdit">
        <table>
            <tbody>
                <tr>
                    <td>
                        <div class="btn-action-group activo">
                            <label class="btn-action-fondo" for="btn-actionid">
                                <span class="btn-action-punto">Punto Blanco</span>
                            </label>
                            <input type="button" class="btn-action" value="@Localization.GetText("Collapse Components")" id="btn-actionid">
                        </div>
                    </td>
                    <td style="vertical-align: middle; padding-left: 5px; font-size: 0.75em;">@Localization.GetText("Show")
                    </td>
                    <td>
                        <div id="radio">
                            <input type="checkbox" @(Model.showInactiveOutputs ? "checked=checked" : "") id="showInactiveOutputs" name="showInactiveOutputs" /><label for="showInactiveOutputs"> @Localization.GetText("Inactive Outputs")</label>
                            <input type="checkbox" @(Model.showMilestones ? "checked=checked" : "") id="showMilestones" name="showMilestones" /><label for="showMilestones">@Localization.GetText("Milestones")</label>
                            <input type="checkbox" @(Model.showVisualizations ? "checked=checked" : "") id="showVisualizations" name="showVisualizations" /><label for="showVisualizations">@Localization.GetText("Planned")</label>
                        </div>

                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    @{int Validator = 0;}
    @if (Model.Components != null)
    {

        foreach (var component in Model.Components.OrderBy(x => x.OrderNumber))
        {
            Validator = 1;
        <div class="mod_tabla_impacts table_outputs milestone">
            <div class="minimizeTable">
                <div class="minimizeBar">
                    <div class="trackOrder">@component.OrderNumber</div>
                    <div class="tableOperator">Minimize/Maximize</div>
                </div>
                <div class="operatorBar"></div>
                <h4 class="headingh3 plegableTitle">@component.Statement</h4>
                @if (component.Outputs != null)
                {
                    var totalOutputYearsPlan = component.getTotalOutputsYearPlan();
                    <div class="tableGrid">
                        <table class="grid">
                            <thead>
                                <tr>
                                    <th class="btn_azul_oscuro dato00">@Localization.GetText("Outputs")</th>
                                    <th class="btn_azul_oscuro dato04"></th>
                                    @foreach (var ouputYearPlan in totalOutputYearsPlan)
                                    {
                                        <th class="btn_azul_oscuro dato06">@ouputYearPlan</th>
                                    }
                                    <th class="btn_azul_oscuro dato05">@Localization.GetText("Cost")</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (var i = 0; i < component.Outputs.Count; i++)
                                {                             
                                    <tr class="trackOrderRow">
                                        <td>@(component.OrderNumber + "." + component.Outputs[i].OrderNumber)</td>
                                    </tr>
                                    <tr class="nivel01 @(component.Outputs[i].IsDeactivated ? " inactiveOutput " : "") @(i % 2 != 0 ? " impar " : "")">
                                        <td class="dato01">
                                            <div>
                                                @if (component.Outputs[i].isLinkedPreIndicator)
                                                {
                                                    <a href="#" title="badge_flag" class="ico_badge_flag"></a>
                                                }
                                                @if (component.Outputs[i].IsProgender)
                                                {
                                                    <a href="#" title="badge_flag" class="ico_badge_flag purple"></a>
                                                }
                                                @if (component.Outputs[i].IsProethnicity)
                                                {
                                                    <a href="#" title="badge_flag" class="ico_badge_flag grey"></a>
                                                }
                                                <a href="javascript:void(0)" style="margin-right: 0.6em" class="outputDetail @(component.Outputs[i].IsDeactivated ? "inactiveOutput" : "") "  data-route="@(Url.Action("IndexOutputDetail", "Outputs", new { area = "ResultsMatrix", outputID = component.Outputs[i].OutputId }))">@component.Outputs[i].Definition</a>

                                                <a href="@(Url.Action("Index", "VisualData", new { area = "Visualization", OperationNumber = Model.Operation.OperationNumber }))">
                                                    <img alt="logobid" src="@Url.Content("~/Images/Contenido/ResultMatrix/Earth.png")" title="Go to Visual Output" />
                                                </a>

                                            </div>
                                        </td>
                                        <td class="dato07">
                                            <table>
                                                <tbody>
                                                    <tr class="rm_p_row">
                                                        <td>P</td>
                                                    </tr>
                                                    <tr class="rm_pa_row">
                                                        <td>P(a)</td>
                                                    </tr>
                                                    <tr class="rm_ac_row">
                                                        <td>A</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </td>
                                        @foreach (var year in totalOutputYearsPlan)
                                        {
                                            var currentSelectedYear = component.Outputs[i].OutputYearPlans.Where(x => x.Year == year).FirstOrDefault();
                                            if (currentSelectedYear == null)
                                            {
                                                currentSelectedYear = new IDB.MW.Domain.Models.Architecture.ResultMatrix.Outputs.OutputYearPlanModel()
                                                {
                                                    OriginalPlan = null,
                                                    AnnualPlan = null,
                                                    ActualValue = null
                                                };
                                            }                                    
                                            <td class="dato07">
                                                <table>
                                                    <tbody>
                                                        <tr class="rm_p_row">
                                                            <td>@Html.CustomFormatDecimalNumber(currentSelectedYear.OriginalPlan) </td>
                                                        </tr>
                                                        <tr class="rm_pa_row">
                                                            <td>@Html.CustomFormatDecimalNumber(currentSelectedYear.AnnualPlan)</td>
                                                        </tr>
                                                        <tr class="rm_ac_row">
                                                            <td>@Html.CustomFormatDecimalNumber(currentSelectedYear.ActualValue)</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </td>
                                        }
                                        <td class="dato07">
                                            @{
                                        var originalPlanSum = component.Outputs[i].OutputYearPlans.Where(x => x.Year != ResultsMatrixCodes.EndOfProjectYear).Sum(x => x.OriginalPlan);
                                        var annualPlanSum = component.Outputs[i].OutputYearPlans.Where(x => x.Year != ResultsMatrixCodes.EndOfProjectYear && x.Year < DateTime.Now.Year).Sum(x => x.ActualValue) +
                                                             component.Outputs[i].OutputYearPlans.Where(x => x.Year != ResultsMatrixCodes.EndOfProjectYear && x.Year >= DateTime.Now.Year).Sum(x => x.AnnualPlan);
                                        var actualValueSum = component.Outputs[i].OutputYearPlans.Where(x => x.Year != ResultsMatrixCodes.EndOfProjectYear).Sum(x => x.ActualValue);                                    
                                                <table>
                                                    <tbody>
                                                        <tr class="rm_p_row">
                                                            <td>@Html.CustomFormatDecimalNumber(originalPlanSum)</td>
                                                        </tr>
                                                        <tr class="rm_pa_row">
                                                            <td>
                                                                @Html.CustomFormatDecimalNumber(annualPlanSum)
                                                            </td>
                                                        </tr>
                                                        <tr class="rm_ac_row">
                                                            <td>@Html.CustomFormatDecimalNumber(actualValueSum)</td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            }
                                        </td>
                                    </tr>
                              
                                        if ((Model.showMilestones && component.Outputs[i].Milestones != null && component.Outputs[i].Milestones.Count > 0) ||
                                           (Model.showVisualizations && component.Outputs[i].OutputYearVisualizations != null && component.Outputs[i].OutputYearVisualizations.Count > 0))
                                        {
                                    <tr class="nivel02">
                                        <td colspan="@(totalOutputYearsPlan.Count + 3)">
                                            <div class="minimizeTable">
                                                <div class="minimizeBar">
                                                    <div class="tableOperator">Minimize/Maximize</div>
                                                </div>
                                                <div class="operatorBar"></div>
                                                <div class="tableGrid">
                                                    @if (component.Outputs[i].Milestones != null && Model.showMilestones)
                                                    {
                                                        var totalMilestonesYearPlans = component.Outputs[i].getTotalMilestoneYearPlan();
                                                        <table class="grid">
                                                            <thead>
                                                                <tr>
                                                                    <th class="btn_azul_oscuro dato00">@Localization.GetText("Milestones")</th>
                                                                    <th class="btn_azul_oscuro dato06">@Localization.GetText("Unit of measure")</th>
                                                                    <th class="btn_azul_oscuro dato04"></th>
                                                                    @foreach (var milestonesYears in totalMilestonesYearPlans)
                                                                    {
                                                                        <th class="btn_azul_oscuro dato06">@milestonesYears</th>
                                                                    }
                                                                    <th class="btn_azul_oscuro dato05">@Localization.GetText("EOP") @Model.EndProjectYear</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                @*-----------------------------------------------------------Milestones---------------------------------------------------------------------------------*@
                                                                @*-----------------------------------------------------------Milestones---------------------------------------------------------------------------------*@
                                                                @foreach (var milestones in component.Outputs[i].Milestones.OrderBy(x => x.OrderNumber))
                                                                {
                                                                    <tr class="@(milestones.OrderNumber % 2 == 0 ? " impar " : "") @(component.Outputs[i].IsDeactivated ? " inactiveOutput " : "")"   >
                                                                        <td class="dato01 @(component.Outputs[i].IsDeactivated ? " inactiveOutput " : "")">
                                                                            <a href="javascript:void(0);" class="outputDetail @(component.Outputs[i].IsDeactivated ? " inactiveOutput " : "") "  data-route="@(Url.Action("IndexMilestoneDetails", "Outputs", new { area = "ResultsMatrix", milestoneId = milestones.MilestoneId }))">@milestones.Definition</a>
                                                                        </td>
                                                                        <td>@milestones.UnitOfMeasure</td>
                                                                        <td class="dato07">
                                                                            <table>
                                                                                <tbody>
                                                                                    <tr class="rm_p_row">
                                                                                        <td>P</td>
                                                                                    </tr>
                                                                                    <tr class="rm_pa_row">
                                                                                        <td>P(a)</td>
                                                                                    </tr>
                                                                                    <tr class="rm_ac_row">
                                                                                        <td>A</td>
                                                                                    </tr>
                                                                                </tbody>
                                                                            </table>
                                                                        </td>
                                                                        @foreach (var year in totalMilestonesYearPlans)
                                                                        {
                                                                            <td class="dato07">
                                                                                @{var milestoneYearPlan = milestones.MilestoneYearPlans.Where(x => x.Year == year).FirstOrDefault();

                                                                                  if (milestoneYearPlan == null)
                                                                                  {
                                                                                      milestoneYearPlan = new IDB.MW.Domain.Models.Architecture.ResultMatrix.Outputs.MilestoneYearPlanModel()
                                                                                      {
                                                                                          OriginalPlan = null,
                                                                                          AnnualPlan = null,
                                                                                          ActualValue = null
                                                                                      };
                                                                                  }
                                                                 
                                                                                }
                                                                                <table>
                                                                                    <tbody>
                                                                                        <tr class="rm_p_row">
                                                                                            <td>@Html.CustomFormatDecimalNumber(milestoneYearPlan.OriginalPlan)</td>
                                                                                        </tr>
                                                                                        <tr class="rm_pa_row">
                                                                                            <td>@Html.CustomFormatDecimalNumber(milestoneYearPlan.AnnualPlan)</td>

                                                                                        </tr>
                                                                                        <tr class="rm_ac_row">
                                                                                            <td>@Html.CustomFormatDecimalNumber(milestoneYearPlan.ActualValue)</td>

                                                                                        </tr>
                                                                                    </tbody>
                                                                                </table>
                                                                            </td>
                                                                        }
                                                                        <td class="dato07">
                                                                            @if (milestones.IsAutoCalcPhysycalEop)
                                                                            {

                                                                                var originalPlanSumAuto = milestones.MilestoneYearPlans.Sum(x => x.OriginalPlan);
                                                                                var annualPlanSumAuto = (milestones.MilestoneYearPlans.Where(x => x.Year != ResultsMatrixCodes.EndOfProjectYear && x.Year < DateTime.Now.Year).Sum(x => x.ActualValue) +
                                                                                               milestones.MilestoneYearPlans.Where(x => x.Year != ResultsMatrixCodes.EndOfProjectYear && x.Year >= DateTime.Now.Year).Sum(x => x.AnnualPlan));
                                                                                var actualValueSumAuto = milestones.MilestoneYearPlans.Sum(x => x.ActualValue);                                           
                                                                                <table>
                                                                                    <tbody>
                                                                                        <tr class="rm_p_row">
                                                                                            <td>@Html.CustomFormatDecimalNumber(originalPlanSumAuto)</td>
                                                                                        </tr>
                                                                                        <tr class="rm_pa_row">
                                                                                            <td>@Html.CustomFormatDecimalNumber(annualPlanSumAuto)</td>
                                                                                        </tr>
                                                                                        <tr class="rm_ac_row">
                                                                                            <td>@Html.CustomFormatDecimalNumber(actualValueSumAuto)</td>
                                                                                        </tr>
                                                                                    </tbody>
                                                                                </table>
                                                                            }
                                                                            else
                                                                            {
                                                                                var EOPMilestoneYearPlans = milestones.MilestoneYearPlans.Where(x => x.Year == ResultsMatrixCodes.EndOfProjectYear).FirstOrDefault();
                                                                                if (EOPMilestoneYearPlans == null)
                                                                                {
                                                                                    EOPMilestoneYearPlans = new IDB.MW.Domain.Models.Architecture.ResultMatrix.Outputs.MilestoneYearPlanModel()
                                                                                    {
                                                                                        OriginalPlan = null,
                                                                                        AnnualPlan = null,
                                                                                        ActualValue = null
                                                                                    };
                                                                                }
                                                                                <table>
                                                                                    <tbody>
                                                                                        <tr class="rm_p_row">
                                                                                            <td>@Html.CustomFormatDecimalNumber(EOPMilestoneYearPlans.OriginalPlan)</td>
                                                                                        </tr>
                                                                                        <tr class="rm_pa_row">
                                                                                            <td>@Html.CustomFormatDecimalNumber(EOPMilestoneYearPlans.AnnualPlan)</td>
                                                                                        </tr>
                                                                                        <tr class="rm_ac_row">
                                                                                            <td>@Html.CustomFormatDecimalNumber(EOPMilestoneYearPlans.ActualValue)</td>
                                                                                        </tr>
                                                                                    </tbody>
                                                                                </table>
                                                                            }
                                                                        </td>

                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    }
@*-----------------------------------------------------------OutputYearVisualizations---------------------------------------------------------------------------------*@
@*-----------------------------------------------------------OutputYearVisualizations---------------------------------------------------------------------------------*@
                                                    else if (component.Outputs[i].OutputYearVisualizations != null && Model.showVisualizations)
                                                    {
                                                        <table class="grid">
                                                            <thead>
                                                                <tr>
                                                                    <th class="btn_azul_oscuro dato00">@Localization.GetText("Visualization")</th>
                                                                    <th class="btn_azul_oscuro dato04"></th>
                                                                    @foreach (var outputYearVisualization in component.Outputs[i].getTotalOutputYearVisualization())
                                                                    {
                                                                        <th class="btn_azul_oscuro dato06">@outputYearVisualization</th>
                                                                    }
                                                                    <th class="btn_azul_oscuro dato05">@Localization.GetText("EOP") @Model.EndProjectYear</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                <tr>
                                                                    <td class="dato01 @(component.Outputs[i].IsDeactivated ? "inactiveOutput" : "")">@Localization.GetText("Planned Output Units to be mapped")</td>
                                                                    <td>P</td>
                                                                    @foreach (var outputYearVisualization in component.Outputs[i].getTotalOutputYearVisualization())
                                                                    {
                                                                        foreach (var outputVisualization in component.Outputs[i].OutputYearVisualizations)
                                                                        {
                                                                            if (outputVisualization.Year == outputYearVisualization)
                                                                            {
                                                                                <td>@Html.CustomFormatDecimalNumber(outputVisualization.MappedUnits)</td>
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                    <td>@Html.CustomFormatDecimalNumber(component.Outputs[i].OutputYearVisualizations.Sum(x => x.MappedUnits))</td>
                                                                </tr>
                                                                <tr>
                                                                    <td class="dato01 @(component.Outputs[i].IsDeactivated ? "inactiveOutput" : "")">@Localization.GetText("Planned Visual Outputs to be mapped")</td>
                                                                    <td>P</td>
                                                                    @foreach (var outputYearVisualization in component.Outputs[i].getTotalOutputYearVisualization())
                                                                    {
                                                                        foreach (var outputVisualization in component.Outputs[i].OutputYearVisualizations)
                                                                        {
                                                                            if (outputVisualization.Year == outputYearVisualization)
                                                                            {
                                                                        <td>@Html.CustomFormatDecimalNumber(outputVisualization.VisualObjects)</td>
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                    <td>@Html.CustomFormatDecimalNumber(component.Outputs[i].OutputYearVisualizations.Sum(x => x.VisualObjects))</td>
                                                                </tr>
                                                            </tbody>
                                                        </table>
                                                    }
                                                </div>
                                            </div>
                                        </td>
                                    </tr>  
                                     // Adición de fila para maximize y minimize. 
                                      <tr style="height:18px">
                                       <td>

                                        </td>
                                        </tr>                           
                                        }

                                }

                            </tbody>
                        </table>
                    </div>
                }

            </div>
        </div>
        <div class="operationData" style="width: 100%; padding-top: 1.5em;"></div>
        
        }

    }
    @if (Validator==1){
    <br />
    <div style="text-align:right;width:97%;">
        <a title="Export PDF" style="color:white;border-radius:4px;" class="exportdata pdf" href='@(Url.Action("DownloadReportVisualizationProgress", "Outputs", new { area = "ResultsMatrix",format = "pdf",OperationNumber=Model.OperationNumber,Statement = "",showInactiveOutputs = Model.showInactiveOutputs,showMilestones = Model.showMilestones, showDisaggregations=Model.showDisaggregation,showVisualizations=Model.showVisualizations}))'></a>
        <a title="Export Excel" style="color:white;border-radius:4px;" class="exportdata excel" href='@(Url.Action("DownloadReportVisualizationProgress", "Outputs", new { area = "ResultsMatrix", format = "xls",OperationNumber=Model.OperationNumber,Statement = "",showInactiveOutputs = Model.showInactiveOutputs,showMilestones = Model.showMilestones, showDisaggregations=Model.showDisaggregation,showVisualizations=Model.showVisualizations}))'></a>
    </div> 
    }
    <div class="operationData" style="float: right;">
        <div class="mod_badge_flag">
            <a href="#" title="@Localization.GetText("RF indicator")" class="ico_badge_flag">@Localization.GetText("RF indicator")</a>
            <a href="#" title="@Localization.GetText("Sector indicator")" class="ico_badge_flag green">@Localization.GetText("Sector indicator")</a>
            <a href="#" title="@Localization.GetText("Country indicator")" class="ico_badge_flag yellow">@Localization.GetText("Country indicator")</a>
            <a href="#" title="@Localization.GetText("Pro-Gender")" class="ico_badge_flag purple">@Localization.GetText("Pro-Gender")</a>
            <a href="#" title="@Localization.GetText("Pro-Ethnicity")" class="ico_badge_flag grey">@Localization.GetText("Pro-Ethnicity")</a>
        </div>
    </div>

    <div class="editingButtonsEdit bottom">
        <a href="javascript:void(0);" class="@Localization.GetText("Verify content")" title="verify">@Localization.GetText("Verify content")</a>
    </div>


</div>
<!--end div mod contenido central-->
