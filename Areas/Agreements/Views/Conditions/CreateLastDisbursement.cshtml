@model IDB.MW.Domain.Models.Clauses.OperationRelatedModel
@{
    ViewBag.Title = "CreateLastDisbursement";
    bool isOA420 = !(Model.IsOA421Check ?? false);
}

@section JavaScript {
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
    <script type="text/javascript"
            src="@Url.Content("~/Scripts/Modules/Agreements/Condition/createLastDisbursement.js")"></script>
}

@Styles.Render("~/Content/ClauseLastDisbursement")
@Styles.Render("~/Content/Confluence")
@Scripts.Render("~/bundles/ModalConfluenceScripts")

<section class="central font15">
    <h2 class="hide">Seccion central de Contenido</h2>
    <div class="mod_contenido_central contracts_and_clauses newClause">
        @using (Html.BeginForm("CreateLastDisbursement", "Conditions", FormMethod.Post, new { area = "Agreements", id = "target" }))
        {
            @Html.Hidden("ChangedFulfillmentDateUrl",
                Url.Action("ConfirmChangedFulfillmentDate", "Conditions", new { area = "Agreements" }));
            @Html.Hidden("ClauseStatusFulFiled", Json.Encode(@ViewData["ClauseStatusFulFil"]))
            @Html.HiddenFor(x => x.IncludeFinancialStatements)
            @Html.HiddenFor(x => x.Contracts[0].Executor,
                new Dictionary<string, Object> { { "id", "executingAgency" }, { "data_val", "false" } })
            @Html.HiddenFor(x => x.Contracts[0].SignatureDate,
                new Dictionary<string, Object> { { "id", "signatureDate" }, { "data_val", "false" } })
            @Html.HiddenFor(x => x.Contracts[0].LegalEffectivenessDate,
                new Dictionary<string, Object> { { "id", "legalEffectivenessDate" }, { "data_val", "false" } })
            @Html.HiddenFor(x => x.Contracts[0].CurrentDisbursementExpirationDate,
                new Dictionary<string, Object> { { "id", "CurrentExpirationdate" }, { "data_val", "false" } })
            @Html.HiddenFor(x => x.OperationId, new { data_val = "false" })
            @Html.HiddenFor(x => x.mainOperationNumber, new { data_val = "false" })
            @Html.HiddenFor(x => x.OperationNumber, new { data_val = "false" })
            @Html.HiddenFor(x => x.isParent, new { data_val = "false" })
            @Html.HiddenFor(x => x.OperationNameEn, new { data_val = "false" })
            @Html.HiddenFor(x => x.OperationNameEs, new { data_val = "false" })
            @Html.HiddenFor(x => x.OperationNameFr, new { data_val = "false" })
            @Html.HiddenFor(x => x.OperationNamePt, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].ContractId, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].ContractNumber, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].ContractClauseStatId, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].OriginalExpirationDate, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].UpdateLMSStatus, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].EligibilityDate, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ContractRelationId, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseTypeId, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].CategoryId, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ExpirationTo, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].StatusId, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].Suffix, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].UpdateLMSStatus, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].IsDeleted, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].StatusId,
                new Dictionary<string, Object> { { "id", "ClauseStatus" }, { "data_val", "false" } })

            <fieldset>
                <h3 class="headingh2"><a href="@(Url.Action("Index", "Agreements",
                    new { area = "Agreements", operationNumber = Model.mainOperationNumber }))"
                    title="@Localization.GetText("Contracts And Clauses")" class="tipo1">
                    @Localization.GetText("Contracts And Clauses")</a>
                </h3>
                <div class="editingButtonsEdit">
                    <a class="btn-secondary" href="@(Url.Action("Index", "Agreements",
                        new { area = "Agreements", operationNumber = Model.mainOperationNumber }))"
                       title="@Localization.GetText("Cancel")">@Localization.GetText("Cancel")</a>
                    <label for="Save">
                        <input type="button" class="btn-primary_2 save" value="@Localization.GetText("Save")" id="Save">
                    </label>
                </div>

                <div class="desheadingh3">
                    <p class="title">@Model.OperationNumber <span class="draft">
                        @foreach (var masterData in Model.ListContractStatus)
                        {
                            if (masterData.ConvergenceMasterDataId == @Model.Contracts[0].ContractClauseStatId)
                            {
                                @masterData.NameEn
                                break;
                            }
                        }
                        </span>
                        @if (Model.Contracts[0].LegalEffectivenessDate.HasValue && Model.Contracts[0].CurrentDisbursementExpirationDate.HasValue)
                        {
                            @String.Format("{0:dd MMM yyy}", Model.Contracts[0].LegalEffectivenessDate)
                            <span class="titleTo">@Localization.GetText("T")</span>
                            @String.Format("{0:dd MMM yyy}", Model.Contracts[0].CurrentDisbursementExpirationDate)
                        }
                    </p>
                    <p class="description"><span class="descriptionBold">@Model.Contracts[0].ContractNumber</span> @Model.OperationNameEn</p>
                </div>
                <h4 class="headingh3"> @Localization.GetText("Last Disbursement Clause")</h4>

                <div class="paddingBlock">
                    <div class="row row-header font-header">
                        <div class="col-md-4">
                            @Localization.GetText("Number")<span class="asteriscoRojo">*</span>
                        </div>
                        <div class="col-md-4">
                            @Localization.GetText("Fulfillment date")
                        </div>
                    </div>

                    <div class="row row-body-50 font-body">
                        <div class="col-md-4">
                            @Html.TextBoxFor(x => x.Contracts[0].Clauses[0].ClauseNumber, new Dictionary<string, Object>
                            {
                                { "class", "input normal inputText" },
                                { "id", "Number" },
                                { "name", "Number" },
                                { "MaxLength", "32" },
                                { "placeholder", "Clause Number" }
                            })
                            @{ Html.ValidateFor(x => x.Contracts[0].Clauses[0].ClauseNumber); }
                        </div>
                        <div class="col-md-4">
                            <div class="dateSelect">
                                <label for="datepicker06">
                                    @Html.TextBoxFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].SubmissionDate,
                                        "{0:dd MMM yyyy}", new Dictionary<string, Object>
                                        {
                                            { "id", "fulfilmentDate" },
                                            { "class", "datepicker" },
                                            { "name", "datePicker10" },
                                            { "placeholder", "DD MM YYYY" }
                                        })
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="paddingBlock">
                    <div class="row row-header font-header">
                        <div class="col-md-4">
                            @Localization.GetText("Status")
                        </div>
                        <div class="col-md-4">
                            @Localization.GetText("Expiration date")
                        </div>
                    </div>

                    <div class="row row-body-50 font-body">
                        <div class="col-md-4">
                            @Model.ClauseStatus
                        </div>
                        <div class="col-md-4">
                            @if (Model.Contracts[0].CurrentDisbursementExpirationDate.HasValue)
                            {
                                @String.Format("{0:dd MMM yyy}", Model.Contracts[0].CurrentDisbursementExpirationDate)
                            }
                        </div>
                    </div>
                </div>

                <div class="paddingBlock">
                    <div class="row row-header font-header">
                        <div class="col-md-4">
                            @Localization.GetText("Category")
                        </div>
                        <div class="col-md-4">
                            @Localization.GetText("Type")
                        </div>
                    </div>

                    <div class="row row-body-50 font-body">
                        <div class="col-md-4">
                            @Model.ClauseCategory
                        </div>
                        <div class="col-md-4">
                            @Model.ClauseType
                        </div>
                    </div>
                </div>

                <div class="paddingBlock">
                    <div class="row row-header font-header">
                        <div class="col-md-4">
                            @Localization.GetText("Location")<span class="asteriscoRojo">*</span>
                        </div>
                        <div class="col-md-4"></div>
                    </div>

                    <div class="row row-body-50 font-body">
                        <div class="col-md-4">
                            <ul class="optionList perw80">
                                <li>
                                    @Html.DropDownListFor(x => x.Contracts[0].Clauses[0].LocationId,
                                        new SelectList(Model.ListClauseLocation2, "Value", "Text",
                                            Model.Contracts[0].Clauses[0].LocationId),
                                        new Dictionary<string, Object> { { "class", "optionSelect" } })
                                    @{Html.ValidateFor(x => x.Contracts[0].Clauses[0].LocationId);}
                                </li>
                            </ul>
                        </div>
                        <div class="col-md-4">
                            @Confluence.InputCheckbox(
                                isChecked: Model.Contracts[0].Clauses[0].IsSpecial,
                                name: "Contracts[0].Clauses[0].IsSpecial",
                                id: "specialcause",
                                label: Localization.GetText("Special Clause Class"),
                                value: true)
                        </div>
                    </div>
                </div>

                <div class="paddingBlock">
                    <div class="row row-header font-header">
                        <div class="col-md-4">
                            @Localization.GetText("Description")<span class="asteriscoRojo">*</span>
                        </div>
                    </div>

                    <div class="row row-body-50 font-body">
                        <div class="col-md-4">
                            @Html.TextAreaFor(x => x.Contracts[0].Clauses[0].Description, new Dictionary<string, Object>
                            {
                                { "class", "input normal large" },
                                { "name", "Description" },
                                { "id", "Description" },
                                { "cols", "55" },
                                { "rows", "6" },
                                { "placeholder", "Clause Description" }
                            })
                            @{Html.ValidateFor(x => x.Contracts[0].Clauses[0].Description);}
                        </div>
                        <div class="col-md-4">
                            @if (Model.IsSpecialOperationPBLPBP && isOA420)
                            {
                                <ul class="optionList perw80">
                                    <li>
                                        <p class="dataTitle inputTitle">@Localization.GetText("Trench")</p>
                                        @Html.DropDownListFor(x => x.Contracts[0].Clauses[0].TrenchId,
                                        new SelectList(
                                            Model.ListTrench,
                                            "Value",
                                            "Text",
                                            Model.Contracts[0].Clauses[0].TrenchId),
                                        new Dictionary<string, Object> { { "class", "optionSelect" }, { "id", "Trench" } })
                                    </li>
                                </ul>
                            }
                        </div>
                    </div>

                </div>

                <div class="editingButtonsEdit">
                    <a class="btn-secondary" href="@(Url.Action("Index", "Agreements",
                        new { area = "Agreements", operationNumber = Model.mainOperationNumber }))"
                       title="@Localization.GetText("Cancel")">@Localization.GetText("Cancel") </a>
                    <label for="Save5">
                        <input type="button" class="btn-primary_2 save" value="@Localization.GetText("Save")" id="Save5">
                    </label>
                </div>
            </fieldset>
        }
    </div>
</section>

<script type="text/javascript">
    MessageTranslation.text('fulfillmentDateIsDifferentToTheExpirationDate',
        '@Localization.GetText("The fulfillment date is different to the expiration date, are you sure that you want to save it?")');
    MessageTranslation.text('includeStatementPresentation',
        '@Localization.GetText("CC.Message.IncludeStatementPresentation")');
    MessageTranslation.text('okButton',
        '@Localization.GetText("IM.Yes")');
    MessageTranslation.text('cancelButton',
        '@Localization.GetText("IM.No")');
</script>