@model IDB.MW.Application.Agreements.ViewModel.ConditionsViewModel
@using IDB.MW.Domain.Values

@{
    ViewBag.Title = "CreateNewExtension";

    var FechaCurrentExpirationDate = Model.ConditionIndividuals[0].CurrentExpirationDate ?? DateTime.UtcNow;
    var isModeEdit = Model.ConditionIndividuals[0].ConditionExtensions[0].IsModeEdit;
}

@Styles.Render("~/Content/Confluence")
<link href="@Url.Content("~/Content/kendo/kendo.common.min.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/Modules/Agreements/conditionDetails.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/esmartGeneral.css")" rel="stylesheet" />

@Scripts.Render("~/bundles/scripts2")
<script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Agreements/Condition/conditionCustomScript.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Agreements/Condition/extension.js")"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Agreements/common.js")"></script>

<script type="text/javascript">
    $(window).load(function () {
        $("#target").on("submit", function () {
            $('#idbRequest, #executorRequestedMonths').prop('disabled', false);
        });
    });
</script>

<section class="central">

    <h2 class="hide">@Localization.GetText("Content Main Section")</h2>

    <div class="mod_contenido_central contracts_and_clauses clause304 pl25 pr25 pb10" style="font-size: initial;">

        @using (Html.BeginForm("CreateExtension", "Conditions", FormMethod.Post, new { area = "Agreements", id = "target" }))
        {
            @Html.Hidden("CurrentExpirationDate", Model.ConditionIndividuals[0].CurrentExpirationDate ?? DateTime.UtcNow)
            @Html.HiddenFor(x => x.ConditionId)
            @Html.HiddenFor(x => x.ConditionIndividuals[0].ConditionIndividualId)
            @Html.HiddenFor(x => x.ConditionIndividuals[0].CurrentExpirationDate)
            @Html.HiddenFor(x => x.ConditionIndividuals[0].ConditionExtensions[0].ConditionExtensionId)
            @Html.HiddenFor(x => x.ConditionIndividuals[0].ConditionExtensions[0].ValidationStageId)

            if (isModeEdit)
            {
                <input type="hidden" id="ExistRequestExtensionDate"
                       value="@(String.Format("{0:dd MMM yyyy}", Model.ConditionIndividuals[0].CurrentExpirationDate))" />
                <input type="hidden" id="ExistIdbRequest"
                       value="@Model.ConditionIndividuals[0].ConditionExtensions[0].RequestedExtensionMonths" />
                <input type="hidden" id="ExistExecutorRequest" value="1" />
            }
            else
            {
                <input type="hidden" id="ExistRequestExtensionDate"
                       value="@(String.Format("{0}:dd MMM yyyy",
                            Model.ConditionIndividuals[0].ConditionExtensions[0].RequestedExtensionDate ??
                            Model.ConditionIndividuals[0].CurrentExpirationDate))" />
            }

            <div class="mb30">
                <div class="floatLeft">
                    <a href="@(Url.Action("Index", "Agreements", new { area = "Agreements", operationNumber = Model.OperationNumber }))">
                        @Confluence.LabelMainTitle(Localization.GetText("AG.AgreementsAndConditions.Text"))
                    </a>
                </div>
                <div class="float-right">
                    <input type="button" class="buttonWhite cancelEditCondition"
                            value="@Localization.GetText("Cancel")"
                            data-route="@(Url.Action("Edit", "Conditions", new
                            {
                                area = "Agreements",
                                operationId = Model.OperationId,
                                agreementId = Model.AgreementId,
                                conditionId = Model.ConditionId,
                                conditionIndividualId = Model.ConditionIndividuals[0].ConditionIndividualId
                            }))">

                    @if (isModeEdit)
                    {
                        <input type="button" class="buttonWhite" onclick="deleteItem(this)"
                                value="@Localization.GetText("Delete")"
                                data-route="@Url.Action("DeleteExtension", "Conditions", new
                                {
                                    area = "Agreements",
                                    operationId = Model.OperationId,
                                    agreementId = Model.AgreementId,
                                    conditionId = Model.ConditionId,
                                    conditionIndividualId = Model.ConditionIndividuals[0].ConditionIndividualId,
                                    conditionExtensionId = Model.ConditionIndividuals[0].ConditionExtensions[0].ConditionExtensionId
                                })">
                    }

                    <label for="save">
                        <input type="submit" class="buttonOrange save" value="@Localization.GetText("Save")">
                    </label>
                </div>
            </div>

            <div class="row font-header">
                <div class="col-md-12">
                    <h3 class="ml0 mt30">
                        @(isModeEdit ? Localization.GetText("Edit extension") : Localization.GetText("New extension"))
                    </h3>
                </div>
            </div>

            <fieldset>
                <legend class="hide">@Localization.GetText("Dates")</legend>

                <div class="row font-header">
                    <div class="col-md-12">
                        <h3>@Localization.GetText("Type Request")</h3>
                    </div>
                </div>

                <div class="operationData">
                    <div class="data1">
                        <div class="w100 verticalMargin10">
                            @Html.RadioButtonFor(x => x.ConditionIndividuals[0].ConditionExtensions[0].TypeRequestDate, "Month", new
                               {
                                   @class = "fancy-radio verticalAlignMiddle",
                                   @checked = "checked",
                                   @id = "TypeRequest_1"
                               })
                            <label id="TypeRequest_1Label" for="TypeRequest_1"
                                   class="fancy-label-radio-circle verticalAlignMiddle">
                                @Localization.GetText("Months")
                            </label>

                            @Html.RadioButtonFor(x => x.ConditionIndividuals[0].ConditionExtensions[0].TypeRequestDate, "Date", new
                               {
                                   @class = "fancy-radio verticalAlignMiddle",
                                   @id = "TypeRequest_2"
                               })
                            <label id="TypeRequest_2Label" for="TypeRequest_2"
                                   class="fancy-label-radio-circle marginLeft5 verticalAlignMiddle">
                                @Localization.GetText("Date")
                            </label>
                        </div>
                    </div>
                </div>

                <div class="operationData custom" id="monthsSelected">
                    <label class="editLabel input" for="requestedMonths">
                        <span class="dataTitle inputTitle">@Localization.GetText("Requested months")</span>
                        @Html.TextBoxFor(x =>
                            x.ConditionIndividuals[0].ConditionExtensions[0].RequestedExtensionMonths,
                            "{0:dd MMM yyyy}",
                            new Dictionary<string, Object>
                            {
                                { "class", "input normal integer numberOnly" },
                                { "id", "idbRequest" },
                                { "name", "Requested months" },
                                { "placeholder", Localization.GetText("Requested months") },
                                { "maxlength", "4" }
                            })
                    </label>
                    <div class="data4">
                        <p class="dataTitle">@Localization.GetText("Requested expiration date")</p>
                        <p id="requestedDate">@String.Format("{0:dd MMM yyy}", FechaCurrentExpirationDate)</p>
                    </div>
                </div>

                <div class="operationData custom" id="dateRequestSelected" style="display: none">
                    <label class="editLabel" for="RequestedExtensionDate">
                        <span class="dataTitle inputTitle">@Localization.GetText("Requested Date")</span>
                        @Html.TextBoxFor(x => x.ConditionIndividuals[0].ConditionExtensions[0].RequestedExtensionDate,
                            "{0:dd MMM yyyy}",
                            new
                            {
                                @class = "kendoDatePicker",
                                @placeholder = "DD MMM YYYY",
                                @id = "RequestedExtensionDate"
                            })
                    </label>
                </div>

            </fieldset>

            <fieldset>
                <legend class="hide">@Localization.GetText("Extensions")</legend>
                <div class="operationData custom">
                    <label class="editLabel input" for="requestedBy">
                        <span class="dataTitle inputTitle">@Localization.GetText("Requested by")</span>
                        @Html.TextBoxFor(x => x.ConditionIndividuals[0].ConditionExtensions[0].RequestedBy,
                        new Dictionary<string, Object>
                        {
                            { "class", "input normal large" },
                            { "id", "requestedBy" },
                            { "name", "Requested by" },
                            { "placeholder", Localization.GetText("Requested by") }
                        })
                    </label>
                    <div class="data4">
                        <p class="dataTitle">@Localization.GetText("Extension status")</p>
                        <p>@Model.ConditionIndividuals[0].ConditionExtensions[0].ValidationStageName</p>
                    </div>
                </div>
            </fieldset>

            <fieldset>
                <legend class="hide">@Localization.GetText("Description")</legend>
                <div class="operationData custom marginBottom2Con8">
                    <label class="editLabel input w100 mb20" for="description">
                        <span class="dataTitle inputTitle">@Localization.GetText("Description")</span>
                        @Html.TextAreaFor(
                        x => x.ConditionIndividuals[0].ConditionExtensions[0].ConExtDescription,
                        new Dictionary<string, Object>
                        {
                            { "class", "input normal large" },
                            { "title", "Description" },
                            { "id", "description" },
                            { "cols", "55" },
                            { "rows", "10" },
                            { "placeholder", Localization.GetText("Description") }
                        })
                    </label>

                    <label class="editLabel input w100 mb20" for="justification">
                        <span class="dataTitle inputTitle">@Localization.GetText("Justification")</span>
                        @Html.TextAreaFor(x => x.ConditionIndividuals[0].ConditionExtensions[0].Justification,
                        new Dictionary<string, Object>
                        {
                            { "class", "input normal large" },
                            { "title", "Justification" },
                            { "id", "justification" },
                            { "cols", "55" },
                            { "rows", "10" },
                            { "placeholder", Localization.GetText("Justification") }
                        })
                    </label>

                    <label class="editLabel input w100 mb20" for="recomendation">
                        <span class="dataTitle inputTitle">@Localization.GetText("Recomendation")</span>
                        @Html.TextAreaFor(x => x.ConditionIndividuals[0].ConditionExtensions[0].Recommendation,
                        new Dictionary<string, Object>
                        {
                            { "class", "input normal large" },
                            { "title", "Recommendation" }, { "id", "recommendation" },
                            { "cols", "55" },
                            { "rows", "10" },
                            { "placeholder", Localization.GetText("Recommendation") }
                        })
                    </label>
                </div>
            </fieldset>

            if (isModeEdit)
            {
                <div class="row mt50 mb20">
                    <div class="floatLeft ml60">
                        <h4>@Localization.GetText("Documents")</h4>
                    </div>
                    <div class="float-right mr60">
                        <button type="button" class="buttonBlue" name="documentsAdd" data-id="ConditionDocuments-add"
                                data-modal-allowclose="true" data-custom-modal="ConditionDocuments-modal-add"
                                data-custom-modal-validate="false"
                                data-custom-modal-title="@Localization.GetText("OP.AP.Documents.Search")"
                                data-idb-fieldname="btnDocumentsAdd">
                            @Localization.GetText("DM.Add.Document")
                        </button>
                    </div>
                </div>

                <div class="mod_tabla icon_entypo tableDocuments" style="width: 94%">
                    @Html.Partial("Partials/_DocumentsTablePartial",
                        Model.ConditionIndividuals[0].ConditionExtensions[0].UserDocuments,
                        new ViewDataDictionary {
                            { "IsEdit", isModeEdit },
                            { "EntityRelated", AgreementsAndConditionsConstants.WF_ENTITY_TYPE_CONDITION_EXTENSION }
                        })
                </div>

                @Html.Partial("~/Areas/Agreements/Views/Conditions/Partials/_DocumentsModalPartial.cshtml",
                    new ViewDataDictionary { { "OperationNumber", Model.OperationNumber }, { "IsEdit", isModeEdit } })
            }

            <div class="float-right mt50">
                <input type="button" class="buttonWhite cancelEditCondition"
                       value="@Localization.GetText("Cancel")"
                       data-route="@(Url.Action("Edit", "Conditions", new
                        {
                            area = "Agreements",
                            operationId = Model.OperationId,
                            agreementId = Model.AgreementId,
                            conditionId = Model.ConditionId,
                            conditionIndividualId = Model.ConditionIndividuals[0].ConditionIndividualId
                        }))">

                @if (isModeEdit)
                {
                    <input type="button" class="buttonWhite" onclick="deleteItem(this)"
                           value="@Localization.GetText("Delete")"
                           data-route="@Url.Action("DeleteExtension", "Conditions", new
                            {
                                area = "Agreements",
                                operationId = Model.OperationId,
                                agreementId = Model.AgreementId,
                                conditionId = Model.ConditionId,
                                conditionIndividualId = Model.ConditionIndividuals[0].ConditionIndividualId,
                                conditionExtensionId = Model.ConditionIndividuals[0].ConditionExtensions[0].ConditionExtensionId
                            })">
                }

                <label for="save">
                    <input type="submit" class="buttonOrange save" value="@Localization.GetText("Save")">
                </label>
            </div>
        }
    </div>
</section>

<script type="text/javascript">
    MessageTranslation.text('requestDateMessage',
        '@String.Format("{0} {1}",
            Localization.GetText("Common.SendRequestDate.Message"),
            Model.ConditionIndividuals[0].OriginalExpirationDate.ToString("dd/MM/yyyy"))');

    MessageTranslation.text('requestDateMessageToSave',
        '@Localization.GetText("Common.DateBeforeToday.Message")');
</script>