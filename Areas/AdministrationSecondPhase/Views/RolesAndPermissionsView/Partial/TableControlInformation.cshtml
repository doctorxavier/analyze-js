@using Castle.Components.DictionaryAdapter
@using IDB.MVCControls.DataTable.Helpers
@model List<IDB.MW.Application.AdministrationModule.ViewModels.RolesAndPermissions.TableFieldViewModel>

<div id="PageContent" data-parsley-validate="data-parsley-validate"
        data-parsley-excluded="[disabled]"
        data-url="@Url.Action("ControlInformationSave", "RolesAndPermissionsSave", new {area = "AdministrationSecondPhase"})">
    <input type="hidden" id="hidViewModel" value="@ViewBag.SerializedViewModelControl" />

    <div class="tableNormal" id="tableFieldContext">
        <div data-pagemode="edit">
            @Confluence.InputHidden(ViewBag.SearchPermission, "PermissionFilter")
            @Confluence.InputHidden(ViewBag.SearchPageId, "PageFilter")
        </div>
        @{
            var config = Html.RenderDataTable(Model);
            config.Name("CITable")
                .Columns(columns =>
                {
                    columns.Template(c => Confluence.LabelGetDropDown(c.Field.ToString(), ViewBag.Field))
                        .EditableTemplate(row => Confluence.ListHelpers(new List<HelperResult> { Confluence.LabelGetDropDown(row.Field.ToString(), ViewBag.Field), Confluence.InputHidden(row.Field.ToString(), "FieldRow") })).Header(Localization.GetText("OP.RP.ControlInformation.Field"));
                    columns.Template(c => Confluence.LabelGetDropDown(c.Page.ToString(), ViewBag.PageTable))
                        .EditableTemplate(row => Confluence.ListHelpers(new EditableList<HelperResult> { Confluence.LabelGetDropDown(row.Page.ToString(), ViewBag.PageTable), Confluence.InputHidden(row.Page.ToString(), "PageRow") })).Header(Localization.GetText("OP.RP.ControlInformation.Page"));
                    columns.Template(c => Confluence.Label(c.CountryText))
                        .EditableTemplate(row => Confluence.InputDropDownMulti("CountryRow", ViewBag.Country, required: false,values:string.Join(",",row.CountryList),width:"200px")).Header(Localization.GetText("OP.RP.ControlInformation.Country"));
                    columns.Template(c => Confluence.Label(c.DivisionText))
                        .EditableTemplate(row => Confluence.InputDropDownMulti("DivisionRow", ViewBag.Division, required: false, values: string.Join(",", row.DivisionList), width: "200px")).Header(Localization.GetText("OP.RP.ControlInformation.Division"));
                    columns.Template(c => Confluence.Label(c.OperationTypeText))
                        .EditableTemplate(row => Confluence.InputDropDownMulti("OperationTypeRow", ViewBag.OperationType, required: false, values: string.Join(",", row.OperationTypeList), width: "200px")).Header(Localization.GetText("OP.RP.ControlInformation.OperationType"));
                    columns.Template(c => Confluence.Label(c.OperationStatusText))
                        .EditableTemplate(row => Confluence.InputDropDownMulti("OperationStatusRow", ViewBag.OperationStatus, required: false, values: string.Join(",", row.OperationStatusList), width: "200px")).Header(Localization.GetText("OP.RP.ControlInformation.OperationStatus"));
                    columns.Template(c => Confluence.LabelGetBool(c.Hidden))
                        .EditableTemplate(row => Confluence.InputCheckbox(row.Hidden, "HiddenRow", disabled: !row.Hidden)).Header(Localization.GetText("OP.RP.ControlInformation.Hidden"));
                    columns.Template(c => Confluence.LabelGetBool(c.ReadOnly))
                        .EditableTemplate(row => Confluence.InputCheckbox(row.ReadOnly, "ReadOnlyRow", disabled: !row.ReadOnly)).Header(Localization.GetText("OP.RP.ControlInformation.ReadOnly"));
                    columns.Template(c => Confluence.LabelGetBool(c.Required))
                        .EditableTemplate(row => Confluence.InputCheckbox(row.Required, "RequiredRow", disabled: !row.Required)).Header(Localization.GetText("OP.RP.ControlInformation.Required"));
                    columns.Bound(c => string.Empty).EditableTemplate(row => Confluence.ButtonTrash(null, action: "removeRowControlInformation"));
                });
            config.TableClass = "tableNormal";
            @Html.Partial("Controls/DataTable", config)
        }
    </div>
</div>
