@using IDB.MW.Infrastructure.Configuration
@using IDB.Presentation.MVC4.Helpers
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.SecurityService.Enums
@using System.Web.Script.Serialization
@using Newtonsoft.Json
@using IDB.Architecture.Language
@using IDB.MW.Application.MrBlueModule.Enums
@using IDB.Presentation.MVC4.Areas.MrBlue.Models
@using System.Web.Mvc
@using IDB.Presentation.MVC4.Models.Modal
@using IDB.Presentation.MVC4.General
@using System.Collections.Generic;


@model IDB.MW.Application.MrBlueModule.ViewModels.SafeguardToolkit.SafeguardToolkitStep5ViewModel

@{
    var devMode = ConfigurationServiceFactory.Current.GetApplicationSettings().IsDevelopmentMode;
    var buttonsViewModel = new SafeguardToolkitButtonsViewModel
    {
        VersionId = Model.SafeguardToolkitId,
        Step = SafeguardToolkitStepEnum.Step5,
        ShowCancel = true,
        ShowBack = true,
        ShowSave = true,
        ShowFinalize = true,
        isStep2 = false
    };
}

<div class="row mb20">
    <div class="col-md-12">
        @Html.Partial("Partials/buttons", buttonsViewModel)
        @Confluence.LabelsGroup(
            Localization.GetText("MrBlue.SafeguardToolkit.Step5.StepName"),
            contentAlways : Confluence.LabelBold(
            Localization.GetText("MrBlue.SafeguardToolkit.Step5.StepTitle")),
            asterisk : false)
    </div>
</div>
<div class="row mb20">
    <div class="col-md-12">
        @Confluence.LabelTitleGroup(Localization.GetText("MrBlue.SafeguardToolkit.SafeguardToolkitStepsTitle"))
    </div>
</div>
<div class="row mb20">
    <div class="col-md-12">
        @if(Model.EnvironmentalCategory != null)
        {
            <span name="enviromentalCategoryLabel">
                @Confluence.LabelsGroup(Localization.GetText("MrBlue.SafeguardToolkit.Step5.EnvironmentalCategoryLabel"),
                contentAlways : Model.EnvironmentalCategory.ToString())
            </span>

            <div name="alertEnvironmentalOverriden" class="hide fontSize12">
                @Localization.GetText("MrBlue.SafeguardToolkit.Step5.EnvironmentalOverridenAlertLabel")
            </div>

            if(Model.EnvironmentalCategory != ESGClassificationEnum.B13)
            {
                @Display.AddModalButton(new ModalViewModel("#classificationOverride",
                    type : CssClass.ModalInformationNoIcon,
                    title : Localization.GetText("MrBlue.SafeguardToolkit.Step5.ClassificationOverrideTitle"),
                    typeButton : CssClass.ButtonLinkWithoutPadding,
                    text : Localization.GetText("MrBlue.SafeguardToolkit.Step5.EnvironmentalCategoryLink"),
                    moveOriginalContent : true))
            }
        }
        else
        {
            <span name="enviromentalCategoryLabel">
                @Confluence.LabelsGroup(Localization.GetText("MrBlue.SafeguardToolkit.Step5.EnvironmentalCategoryLabel"),
                    contentAlways : string.Empty)
            </span>
        }
    </div>
</div>
<div class="row mb20">
    <div class="col-md-12">
        @if(!string.IsNullOrEmpty(Model.DisasterRiskCategoryString))
        {
            @Confluence.LabelsGroup(Localization.GetText("MrBlue.SafeguardToolkit.Step5.DisasterRiskCategoryLabel"),
                contentAlways : Model.DisasterRiskCategoryString)

            @Confluence.Label(Model.DisasterRiskCategoryRatingText)
        }
        else
        {
            @Confluence.LabelsGroup(Localization.GetText("MrBlue.SafeguardToolkit.Step5.DisasterRiskCategoryLabel"),
                contentAlways : string.Empty)
        }
    </div>
</div>
<div class="row mb20">
    <div class="col-md-12">
        @Confluence.LabelsGroup(Localization.GetText("MrBlue.SafeguardToolkit.Step5.PolicesDirectivesTriggeredLabel"),
            Model.PoliciesDirectivesTriggered != null ? Model.PoliciesDirectivesTriggered.ToString() : string.Empty, asterisk : false)
    </div>
</div>
<div class="row mb20">
    <div class="col-md-12">
        @Confluence.LabelsGroup(Localization.GetText("MrBlue.SafeguardToolkit.Step5.PotentialPoliciesDirectivesTriggeredLabel"),
            Model.PotentialPoliciesDirectivesTriggered != null ? Model.PotentialPoliciesDirectivesTriggered.ToString() : string.Empty, asterisk : false)
    </div>
</div>
<div name="informationBoxOrange" class="informationBoxOrange row mb20">
    <div class="col-md-12">
        <div class="informationBoxOrange-header row">
            @Localization.GetText("MrBlue.SafeguardToolkit.Step5.RecomendedAction.Title")
            <button name="closeInformationOrange" class="informationBoxOrange-close"><span>X</span></button>
        </div>
        <div class="informationBoxOrange-content row">
            <div class="col-md-9">
                @Html.Raw(Model.RecommendationActionText)
            </div>
        </div>
    </div>
</div>
<div class="row mb20">
    <div class="col-md-12">
        <div class="row-body-10">
            @Confluence.LabelSubTitleGroup(Localization.GetText("MrBlue.SafeguardToolkit.Step5.PoliciesDirectivesTriggeredTitle"))
        </div>
        <div class="row">
            <div class="col-md-12">
                <ul>
                    @if(Model.QuestionsPoliciesDirectivesTriggered.Any())
                    {
                        foreach(var item in Model.QuestionsPoliciesDirectivesTriggered)
                        {
                            <li style="margin-top:15px;">
                                @Html.Raw(item)
                            </li>
                        }
                    }
                    else
                    {
                        <li style="margin-top:15px;">@Localization.GetText("MrBlue.SafeguardToolkit.PolicesTriggeredEmpty")</li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>
<div class="row mb20">
    <div class="col-md-12">
        <div class="row-body-10">
            @Confluence.LabelSubTitleGroup(Localization.GetText("MrBlue.SafeguardToolkit.Step5.PotentialPoliciesDirectivesTriggeredLabel"))
        </div>
        <div class="row">
            <div class="col-md-12">
                <ul>
                    @if(Model.QuestionsPotentialPoliciesDirectivesTriggered.Any())
                    {
                        foreach(var item in Model.QuestionsPotentialPoliciesDirectivesTriggered)
                        {
                            <li style="margin-top:15px;">
                                @Html.Raw(item)
                            </li>
                        }
                    }
                    else
                    {
                        <li style="margin-top:15px;">
                            @Localization.GetText("MrBlue.SafeguardToolkit.PotentialPolicesTriggeredEmpty")
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>
@if(!string.IsNullOrEmpty(Model.EnviromentalCategoryText))
{
    <div class="row mb20">
        <div class="col-md-12">
            <div class="row-body-10">
                @Confluence.LabelSubTitleGroup(Localization.GetText("MrBlue.SafeguardToolkit.Step5.EnvironmentalConditionsRecommendationsTitle"))
            </div>
            <div class="row">
                <div class="col-md-12">
                    <ul>
                        <li name="EnviromentalCategory">
                            @Html.Raw(Model.EnviromentalCategoryText)
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
}
@if(!string.IsNullOrEmpty(Model.DisasterRiskCategoryRatingText))
{
    <div class="row mb20">
        <div class="col-md-12">
            <div class="row-body-10">
                @Confluence.LabelSubTitleGroup(Localization.GetText("MrBlue.SafeguardToolkit.Step5.DisasterRiskRecommendationsTitle"))
            </div>
            <div class="row">
                <div class="col-md-12">
                    <ul>
                        <li>@Html.Raw(Model.DisasterRecommendationText)</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
}
<div class="page">
    <div id="Data"
         data-parsley-validate="data-parsley-validate"
         data-parsley-excluded="[disabled]"
         data-loadurl="@Url.Action("SafeguardToolkit5", "SafeguardToolkit", new { area = "MrBlue" })"
         data-url="@Url.Action("SaveSafeguardToolkit5", "SafeguardToolkit", new { area = "MrBlue" })">

        @if(Model != null)
        {
            @Html.Partial("Partials/Step5/SafeguardToolkit5Partial", Model);
        }
    </div>
    @Html.Partial("Partials/Step5/ClasificationOverrideModalPartial", Model)
</div>
<div class="row mb20">
    <div class="col-md-12">
        @Html.Partial("Partials/buttons", buttonsViewModel)
    </div>
</div>

@section scripts{

    @ModuleScripts.KeyWordsToolkit(Url)
    @ModuleScripts.TableFunctions()
    @MrBlue.RadioButtonFix()

    <script type="text/javascript">

        registerCallback(function () {
            enterEditMode(false, $('#Data'), false);
            $('#environmentalCategoryId').val(@ViewBag.EnumMapping[Model.EnvironmentalCategory].ToString());
            $(document).on('click', 'button[name="closeInformationOrange"]', function () {
                var source = $(this);
                var rowContainer = source.closest('div[name="informationBoxOrange"]');
                rowContainer.addClass('hide');
                $('#disasterRiskCategoryId').val(@Model.DisasterRiskCategoryString);
                $('#policiesDirectivesTriggeredId').val(@Model.PoliciesDirectivesTriggered);
                $('#potenctialPoliciesDirectivesTriggeredId').val(@Model.PotentialPoliciesDirectivesTriggered);
            });

            $(document).on('click', '[aria-labelledby="id-revisedClassificationDropdown"] li a', function () {

                var source = $(this);
                var valueDrop = source.html().trim();
                var valueCurrent = $('[name="enviromentalCategoryLabel"]').find('label.lgCont').html();

                if (valueDrop == valueCurrent || valueDrop == "") {
                    displayAll();
                }
                else if (valueDrop == "C") {
                    displayReduce();
                }
                else if (valueDrop == "A") {
                    displayElevate();
                }
                else if (valueCurrent == "A") {
                    displayReduce();
                }
                else if (valueCurrent == "C") {
                    displayElevate();
                }
            });

            function displayAll() {
                var dropJustification = $('[aria-labelledby="id-justificationOverridenDropdown"] li');
                dropJustification.removeClass('hide');
                dropJustification.each(function () {
                    var source = $(this);
                    var value = source.find('a').html().trim();
                    if (value == "") {
                        source.find('a').click();
                    }
                });
            }

            function displayElevate() {
                var dropJustification = $('[aria-labelledby="id-justificationOverridenDropdown"] li');
                dropJustification.removeClass('hide');
                dropJustification.each(function () {
                    var source = $(this);
                    var value = source.find('a').html().trim();
                    if (value == "") {
                        source.find('a').click();
                    }
                    if (value.indexOf('Elevate') == -1) {
                        source.addClass('hide');
                    } 
                });
            }

            function displayReduce() {
                var dropJustification = $('[aria-labelledby="id-justificationOverridenDropdown"] li');
                dropJustification.removeClass('hide');
                dropJustification.each(function () {
                    var source = $(this);
                    var value = source.find('a').html().trim();
                    if (value == "") {
                        source.find('a').click();
                    }
                    if (value.indexOf('Reduce') == -1) {
                        source.addClass('hide');
                    }
                });
            }

            $(document).on('click', '[aria-labelledby="id-justificationOverridenDropdown"] li a', function () {
                var content = $('#classificationOverride');
                var source = $(this);
                var valueDrop = source.html().trim();
                var textArea = $('[name="commentTextArea"]');
                if (valueDrop.indexOf('other') != -1) {
                    textArea.attr('data-parsley-required', 'true');
                } else {
                    textArea.removeAttr('data-parsley-required');
                }
                destroyParsley(content);
                initParsley(content);
                destroyParsley(content);
                initParsley(content);
            });

        });

        function save() {
            var response = saveContainer($('#Data'), '#hidViewModel', false, null, null, false);
            if (response !== false) {
                response
                    .done(function (data) {
                        if (!data.IsValid && data.ErrorMessage != null && data.ErrorMessage != "") {
                            showMessage(data.ErrorMessage);
                        } else if (data.IsValid == true) {
                            var url = '@Html.Raw(Url.Action("SafeguardToolkitRedirect", "SafeguardToolkit",
                            new {
                                area = "MrBlue",
                                fromStep = SafeguardToolkitStepEnum.Dashboard,
                                navigator = StepNavigatorEnum.Cancel
                            }))';
                            window.location.assign(url);
                        }
                    });
            }
        }

        function clickModelDashboard() {
            var button = $('button[name="buttonCancelRedirect"]');
            var buttonLink = button.attr('data-url');
            window.location.assign(buttonLink);
        }

        function finalize() {
            $('[name="isFinalize"]').val(true);
            var response = saveContainer($('#Data'), '#hidViewModel', false, null, null, false);
            if (response !== false) {
                response
                    .done(function (data) {
                        if (!data.IsValid && data.ErrorMessage != null && data.ErrorMessage != "") {
                            showMessage(data.ErrorMessage);
                        }
                        else if (data.IsValid) {
                            var url = '@Html.Raw(Url.Action("SafeguardToolkitRedirect", "SafeguardToolkit", new { area = "MrBlue", versionId = Model.SafeguardToolkitId, fromStep = SafeguardToolkitStepEnum.Step5, navigator = StepNavigatorEnum.Next }))';
                            window.location.assign(url);
                        }
                    });
            }
        }

        function classificationOverrideSave() {

            var form = $('#classificationOverride');

            destroyParsley(form);
            initParsley(form);
            destroyParsley(form);
            initParsley(form);

            if (form.parsley().validate() != false) {

                var inputRevisedClassification = $('#id-revisedClassificationDropdown').parent('div.dropdown');
                var inputJustificationClassification = $('#id-justificationOverridenDropdown').parent('div.dropdown');
                var inputCommentClassification = $('textarea[name="commentTextArea"]');

                var inputFormEnviromentalCategory = $('#environmentalCategoryId');
                var inputFormEnviromentalCategoryOverriden = $('#environmentalCategoryOverridenId');
                var inputFormEnviromentalJustification = $('#environmentalJustificationId');
                var inputFormEnviromentalComment = $('#environmentalCategoryComment');
                var inputFormEnviromentalOverriden = $('#enviromentalOverridden');

                var inputEnviromentalCategoryCurrent = $('[name="enviromentalCategoryLabel"]');
                var divEnvironmentalOverridenAlert = $('div[name="alertEnvironmentalOverriden"]');
                var contentEnvironmentalOverridenAlert = $('div[name="alertEnvironmentalOverriden"]').html();

                var valueClassification = parseInt(inputRevisedClassification.find('input[name="revisedClassificationDropdown"]').val());
                var valueJustification = parseInt(inputJustificationClassification.find('input[name="justificationOverridenDropdown"]').val());
                var valueComment = inputCommentClassification.val();

                var valueOverride = inputRevisedClassification.find('span.valueText').html();
                var valueCurrent = inputEnviromentalCategoryCurrent.find('label.lgCont').html();

                var textEnviromentalCategory = $('li[name="EnviromentalCategory"]');

                if (valueOverride != valueCurrent) {

                    inputFormEnviromentalCategoryOverriden.val(valueClassification);
                    inputFormEnviromentalJustification.val(valueJustification);
                    inputFormEnviromentalComment.val(valueComment);
                    inputEnviromentalCategoryCurrent.find('label.lgCont').html(valueOverride);
                    inputFormEnviromentalOverriden.val('True');
                    divEnvironmentalOverridenAlert.html(contentEnvironmentalOverridenAlert + '<b>' + valueCurrent + '</b>')
                    divEnvironmentalOverridenAlert.removeClass('hide');

                    $.ajax({
                        url: '@Url.Action("GetNewTextRecomendation", "SafeguardToolkit", new { area = "MrBlue" })?enumEnviromental=' + valueClassification,
                        cache: false,
                        contentType: false,
                        processData: false,
                        type: 'POST'
                    }).done(function (data) {
                        textEnviromentalCategory.html(data);
                    });
                }
                exitModal();
            }
        }

        function exitModal() {
            var container = $('#classificationOverride').closest('div[data-id="mainContainer"]');
            var modal = container.closest('div.vex-content');
            var buttonClose = modal.find('div.vex-close');
            buttonClose.click();
        }
    </script>
}
