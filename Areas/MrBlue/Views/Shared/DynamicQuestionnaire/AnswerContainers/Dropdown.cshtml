@using IDB.MW.Application.MrBlueModule.ViewModels.DynamicQuestionnaire

@model Tuple<AnswerViewModel, List<SelectListItem>>

<div class="esgAnswerContainer" data-answerid="@Model.Item1.AnswerId">
    @if (Model.Item1.Question.QuestionDataType == IDB.MW.Application.MrBlueModule.Enums.QuestionDataTypeEnum.List)
    {
        @Confluence.InputDropDownMulti(Model.Item1.Question.QuestionCode, Model.Item2.Select(s => new IDB.Presentation.MVC4.Helpers.MultiSelectListItem { IsFirstLevel = true, Text = s.Text, Value = s.Value, Selected = s.Selected }).ToList(), dataAttributes : new Dictionary<string, string> { { "persist-answerId", Model.Item1.AnswerId.ToString() }, { "persist-questionId", Model.Item1.QuestionId.ToString() }, { "persist-questionGroupId", Model.Item1.Question.QuestionGroupId.ToString() } }.Concat(Model.Item1.Question.ValidationAttributes).ToDictionary(k => k.Key, v => v.Value), required : Model.Item1.Question.IsMandatory)
    }
    else
    {
        @Confluence.InputDropDown(Model.Item1.AnswerId.ToString(), Model.Item1.Question.QuestionCode, Model.Item2, showEmptyOption : false, dataAttributes : new Dictionary<string, string> { { "persist-answerId", "0" }, { "persist-questionId", Model.Item1.QuestionId.ToString() }, { "persist-questionGroupId", Model.Item1.Question.QuestionGroupId.ToString() } }.Concat(Model.Item1.Question.ValidationAttributes).ToDictionary(k => k.Key, v => v.Value), required : Model.Item1.Question.IsMandatory, orderAsc : false)
    }
</div>