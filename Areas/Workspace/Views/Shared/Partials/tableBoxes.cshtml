@using IDB.MW.Business.WorkSpaceModule.ViewModels
@using IDB.Presentation.MVC4.Areas.Workspace.Models
@model List<RowBoxesModel>

<table name="tableBoxes" class="workspaceContent @(ViewBag.Personalize == true ? new MvcHtmlString("workspacePersonalize") : null )">
    <thead>
        <tr>
            <th class="col-md-4">&nbsp;</th>
            <th class="col-md-4">&nbsp;</th>
            <th class="col-md-4">&nbsp;</th>
            @(ViewBag.Personalize == true ? new MvcHtmlString("<th data-pagemode=\"edit\" class=\"w30\">&nbsp;</th>") : null)
            <th class="w5">&nbsp;</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var boxes in Model)
    {
        <tr template-row="@boxes.NumRow">
            @if (boxes.Box1 != null)
            {
                @Box(boxes.Box1)
            }
            @if (boxes.Box2 != null)
            {
                @Box(boxes.Box2)
            }
            @if (boxes.Box3 != null)
            {
                @Box(boxes.Box3)
            }
            @if (ViewBag.Personalize == true)
            {
                <td data-pagemode="edit">@Confluence.ButtonTrash(null, action: "remove")</td>
            }
            <td class="w5 boxheight noborder">&nbsp;</td>
        </tr>

    }
    @if (Model.Count == 0 && ViewBag.Personalize == true)
    {
        <tr>
            <td data-order="1" rowspan="1" colspan="1" ondrop="drop(event)" ondragover="allowDrop(event)"></td>
            <td data-order="2" rowspan="1" colspan="1" ondrop="drop(event)" ondragover="allowDrop(event)"></td>
            <td data-order="3" rowspan="1" colspan="1" ondrop="drop(event)" ondragover="allowDrop(event)"></td>
            <td data-pagemode="edit">@Confluence.ButtonTrash(null, action: "remove")</td>
            <td class="w5 noborder">&nbsp;</td>
        </tr>
    }
    </tbody>
</table>

@helper Box(BoxesModel box)
{
    if (ViewBag.Personalize == true)
    {
        <td data-order="@box.TemplateOrder" colspan="@box.ChartWidth" rowspan="@box.ChartHeight">
            @if (!box.CharType.Equals(WorkSpaceConstants.BLANKCHART))
            {
                <div class="dragBoxes dragableBoxes" id="@box.ChartId" dd-heigth="@box.ChartHeight">
                    <input type="hidden" name="heigth" value="@box.ChartHeight">
                    <input type="hidden" name="width" value="@box.ChartWidth">

                    <div class="dragBoxesTitle">@box.ChartName</div>
                    <div class="dragBoxesValue">@box.ChartWidth X @box.ChartHeight</div>
                </div>
            }
        </td>
    }
    else
    {
        <td @(!string.IsNullOrEmpty(box.ChartQuery) ? new MvcHtmlString(string.Format("box-sql=\"{0}\"", box.ChartQuery)) : null)
            @(!string.IsNullOrEmpty(box.ChartQueryExport) ? new MvcHtmlString(string.Format("box-excel=\"{0}\"", box.ChartQueryExport)) : null)
            @(!string.IsNullOrEmpty(box.ChartMaxDeep.ToString()) ? new MvcHtmlString(string.Format("box-deep=\"{0}\"", box.ChartMaxDeep)) : null)
            @(!string.IsNullOrEmpty(box.ChartUrl) ? new MvcHtmlString(string.Format("box-url=\"{0}\"", box.ChartUrl)) : null)
            box-partial="@box.ChartPartial"
            box-name="@box.ChartName"
            box-num="@box.ChartId"
            box-id="@ChartIdGenerated(box.ChartId, box.ChartName, box.TemplateId)"
            box-type="@box.CharType"
            class="@ChartClass(box.CharType)"
            colspan="@box.ChartWidth"
            rowspan="@box.ChartHeight"></td>
    }
}

@functions {

    public string ChartClass(string type)
    {
        return type.Equals(WorkSpaceConstants.BLANKCHART) ? "boxEmpty" : "box boxLoad boxLoadBack";
    }

    public string ChartIdGenerated(int idChart, string name, int idTemplate)
    {
        return string.Format("{0}_{1}_{2}", idChart, name.Replace(" ", "_"), idTemplate);
    }

}