@{
    Layout = null;
}

@model IDB.MW.Application.Contacts.ViewModels.OperationContactsViewModel

<div class="col-md-12 pl0">
<div class="col-md-12 pl0">
    <div class="badge01a">
        <button id="backToContacts"><span class="left"></span></button>
        <h2 class="titlePrincipal">@Confluence.LabelMainTitle(Localization.GetText("CM.Label.Contact"))</h2>
    </div>
</div>
<div class="col-md-12">
    <div class="col-md-12">
            @Html.Partial("EditPartial/NewContactButtonsPartial", Model)
    </div>    
    <div class="col-md-12 mb5">
        <div class="col-md-6">
            @Confluence.Label(Localization.GetText("CM.Label.Institution"))
            @Confluence.LabelAsterisk()
        </div>
    </div>
    <div class="col-md-12">
        <div class="col-md-6">
            @Confluence.InputDropDownAsync(null, "contactsInstitution", Url.Action("GetInstitutionName", "Contacts", new { area = "Contacts", operationNumber = Model.OperationNumber }), width: "100%", placeholder: "(" + Localization.GetText("CM.Label.Institution") + ")")
        </div>
    </div>
    <div class="col-md-12 mt20 mb20">
        <div class="groupColumn col-md-6">
            @Confluence.LabelTitleGroup(Localization.GetText("CM.Label.BasicInformation"), htmlClass: "bold pl0")
            
        </div>
        <div class="groupColumn col-md-6 pl0">
            @Confluence.LabelTitleGroup(Localization.GetText("CM.Label.AddressInformation"), htmlClass: "bold pl0")
        </div>
    </div>
    <div class="col-md-12">
        <div class="groupColumn col-md-6">
            <div class="display-block mb5">
                @Confluence.Label(Localization.GetText("CM.Label.FirstName"))
                @Confluence.LabelAsterisk()
            </div>
            <div class="display-block">
                @Confluence.InputText(null, "contactFirstName", htmlClass: "w70percent", maxLength:128, placeholder: "First Name")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.LastName"))
                @Confluence.LabelAsterisk()
            </div>
            <div class="display-block">
                @Confluence.InputText(null, "contactLastName", htmlClass: "w70percent", maxLength: 128, placeholder: "Last Name")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.Title"))
                @Confluence.LabelAsterisk()
            </div>
            <div class="display-block">
                @Confluence.InputText(null, "contactTitle", htmlClass: "w70percent", maxLength: 128, placeholder: "Title")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.Telephone"))
                @Confluence.LabelAsterisk()
            </div>
            <div class="display-block">
                @Confluence.InputText(null, "contactPhone", htmlClass: "w70percent", maxLength: 64, placeholder: "Telephone")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.Fax"))
                @Confluence.LabelAsterisk()
            </div>
            <div class="display-block">
                @Confluence.InputText(null, "contactFax", htmlClass: "w70percent", maxLength: 64, placeholder: "Fax")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.Email"))
                @Confluence.LabelAsterisk()
            </div>
            <div class="display-block">
                @Confluence.InputText(null, "contactEmail", htmlClass: "w70percent", maxLength: 128, placeholder: "Email")
            </div>
        </div>
        <div class="groupColumn col-md-6 pl0">
            <div class="display-block mb5">
                @Confluence.Label(Localization.GetText("CM.Label.Country"))
            </div>
            <div class="display-block">
                @Confluence.InputDropDown(null, "contactCountry",
               Model.Country.Select(o => new SelectListItem
               {
                   Text = o.Text,
                   Value = o.Value
               }), orderAsc: false, htmlClass: "w100percent", required: false, placeholder: "(" + Localization.GetText("CM.Label.Country")  + ")")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.Address"))
            </div>
            <div class="display-block">
                @Confluence.InputText(null, "contactAddress", htmlClass: "w100percent", required: false, maxLength: 200, placeholder: "Address")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.City"))
            </div>
            <div class="display-block">
                @Confluence.InputText(null, "contactCity", htmlClass: "w70percent", required: false, maxLength: 40, placeholder: "City")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.ZipCode"))
            </div>
            <div class="display-block">
                @Confluence.InputText(null, "contactZipCode", htmlClass: "w70percent", required: false, maxLength: 15, placeholder: "Zip Code")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.State"))
            </div>
            <div class="display-block">
                @Confluence.InputText(null, "contactState", htmlClass: "w70percent", required: false, maxLength: 30, placeholder: "State")
            </div>
        </div>
    </div>
    <div class="col-md-12 ml0">
        <div class="col-md-12">
            @Confluence.LabelTitleGroup(Localization.GetText("CM.Label.RoleInformation"), htmlClass: "bold pl0 mt20 mb20")
        </div>
        <div class="col-md-12">
            @Confluence.Label(Localization.GetText("CM.Label.Username"), htmlClass: "pl0")
        </div>
        <div class="col-md-12">
            <div class="col-md-6 pl0">
                @Confluence.InputDropDownAsync(null, "contactUserName", Url.Action("GetUsersList", "Contacts", new { area = "Contacts" }), width: "100%", required: false, placeholder: "(" + Localization.GetText("CM.Label.Username")  + ")")
            </div>
        </div>
        <div class="col-md-9 mt10 pr40 mb40">
            <table id="rolesTable" class="tableNormal mb20">
                <thead>
                    <tr>
                        <th class="w250">@Localization.GetText("CM.GridHeader.Operation")</th>
                        <th class="w300">@Localization.GetText("CM.GridHeader.EARole")</th>
                        <th class="w60">@Localization.GetText("CM.GridHeader.Action")</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td name="operationNumber" class="w250 pl0">@Model.OperationNumber</td>
                        <td class="w300">
                            @Confluence.InputDropDown(null, "eaRoles", Model.EaRole.Select(x => new SelectListItem
                       {
                           Text = x.Text,
                           Value = x.Value
                       })
                                , orderAsc: false, htmlClass: "w100percent", required: false, placeholder: "(External User Role)")
                        </td>
                        <td class="w60" align="center">@Confluence.ButtonTrash(null, "removeRole", "removeRow", false)</td>
                    </tr>
                </tbody>
        </table>
        @*@Confluence.ButtonAddNewRows(Localization.GetText("CM.Button.NewRole"), "rolesTable", "newRoleRow", "newRoleRow", htmlClass: "col-md-offset-3 col-md-4")*@
    </div>
    </div>
    <div class="col-md-12 mb30">
            @Html.Partial("EditPartial/NewContactButtonsPartial", Model)
        </div>  
    </div>  
</div>
<script>
    $(document).ready(function () {
        setTimeout(function () { bindHandlers(); }, 1000);
    });

    $("#backToContacts").on("click", function () {
        var container = $("#PageContent");
        showLoaderOptional();
        $.ajax({
            url: '@Url.Action("OperationContacts", "Contacts", new { area = "Contacts", operationNumber = Model.OperationNumber })',
            cache: false,
            contentType: false,
            processData: false,
            async: true,
            type: 'POST'
        }).done(function (data) {
            $(container).empty();
            $(container).append(data);
            hideLoaderOptional();
        }).fail(function (jqXHR, textStatus) {
            hideLoaderOptional();
        });
    });

    $('ul[aria-labelledby="id-contactUserName"] li').on('click', function () {
        clearWarningRole();
    });

    $('ul[aria-labelledby="id-eaRoles"] li').on('click', function () {
        clearWarningRole();
    });

    $('input[name="contactUserName_text"]').on('click', function () {
        clearWarningRole();
    });

    function newRoleRow(button) {
        var container = $("#" + button.attr('dd-table')).find('tbody');
        if ($("#rolesTable").find("tbody>tr").length < 1)
        {
            showLoaderOptional();
            $.ajax({
                url: '@Url.Action("AddNewRoleRowOperationContacts", "Contacts", new { area = "Contacts", operationNumber = Model.OperationNumber })',
                cache: false,
                contentType: false,
                processData: false,
                async: false,
                type: 'POST'
            }).done(function (data) {
                if ($(container).find('td.dataTables_empty').length > 0) {
                    $(container).find('tr').remove();
                }
                $(container).append(data);
                bindHandlers();
                hideLoaderOptional();
            }).fail(function (jqXHR, textStatus) {
                hideLoaderOptional();
            });
        }
    }

    function removeRow(source) {
        var msg = '@Localization.GetText("OP.OD.Delete.Msg")';
        var title = '@Localization.GetText("Warning")';
        
        Confirm.ShowWarning(msg, title, "Ok", "Cancel").done(function (answer) {
            if (answer) {
                if (source.closest("tbody").find("tr").length != 1)
                {
                    var button = source;
                    button.closest("tr").remove();
                }
                else {
                    $('input[name="eaRoles"]').FirstorDefault();
                    $('input[name="contactUserName"]').val('');
                    $('input[name="contactUserName_text"]').val('');
                    clearWarningRole();
                }
            }
        });
    }

    function CreateContact() {
        var container = $("#PageContent");
        var contactFirstName = $("input[name='contactFirstName']").val();
        var contactLastName = $("input[name='contactLastName']").val();
        var contactTitle = $("input[name='contactTitle']").val();
        var contactPhone = $("input[name='contactPhone']").val();
        var contactFax = $("input[name='contactFax']").val();
        var contactEmail = $("input[name='contactEmail']").val();
        var contactCountry = $("input[name='contactCountry']").val();
        var contactAddress = $("input[name='contactAddress']").val();
        var contactZipCode = $("input[name='contactZipCode']").val();
        var contactCity = $("input[name='contactCity']").val();
        var contactState = $("input[name='contactState']").val();
        var contactUserName = $("input[name='contactUserName']").val();
        var contactInstitution = $("input[name='contactsInstitution']").val();
        var operationNumber = $("td[name='operationNumber']").text();
        var eaRoles = $("input[name='eaRoles']").val();
        var contactFullName = $("input[name='contactUserName']").GetText();
        if (contactsRolesTable = $("#rolesTable").find("tbody>tr").length > 0 && (eaRoles == "" && contactFullName == "")) {
            $("input[name='contactUserName']").removeAttr("data-force-parsley-validation");
            $("input[name='contactUserName']").removeAttr("data-parsley-required");
            $("input[name='contactUserName']").removeAttr("required");
            $("input[name='contactUserName']").removeClass("validation-fail");
            $("input[name='contactUserName_text']").removeClass("validation-fail");
            $("input[name='eaRoles']").removeAttr("data-force-parsley-validation");
            $("input[name='eaRoles']").removeAttr("data-parsley-required");
            $("input[name='eaRoles']").removeAttr("required");
            $('button#id-eaRoles').removeClass("validation-fail");
            $("input[name='eaRoles']").removeClass("validation-fail");
        }
        else {
            $("input[name='contactUserName']").attr("data-force-parsley-validation", "true");
            $("input[name='contactUserName']").attr("data-parsley-required", "true");
            $("input[name='contactUserName']").attr("required", "required");
            $("input[name='eaRoles']").attr("data-force-parsley-validation", "true");
            $("input[name='eaRoles']").attr("data-parsley-required", "true");
            $("input[name='eaRoles']").attr("required", "required");
        }
        var contact = {
            FirstName: contactFirstName,
            LastName: contactLastName,
            Title: contactTitle,
            Telephone: contactPhone,
            Fax: contactFax,
            Email: contactEmail,
            CountryId: contactCountry,
            Address: contactAddress,
            City: contactCity,
            ZipCode: contactZipCode,
            State: contactState,
            InstitutionId: contactInstitution,
            UserName: contactUserName
        };
        user = {
            OperationNumber: operationNumber,
            EaRoleId: eaRoles != "" ? parseInt(eaRoles) : eaRoles,
            User: { UserName: contactUserName, FullName: contactFullName }
        }
        if (Validation.Container(container))
        {
            showLoaderOptional();
            $.ajax({
                type: "POST",
                async: true,
                url: "@Url.Action("CreateContact", "Contacts", new { area = "Contacts", operationNumber = Model.OperationNumber })",
                data: { contact: contact, user: user, onlyRead: @Model.OnlyRead.ToString().ToLower() }
            }).done(function(data){
                $(container).empty();
                $(container).append(data);
                bindHandlers();
                hideLoaderOptional();
            }).fail(function (jqXHR, textStatus) {
                hideLoaderOptional();
            });
        }
    }

    $(document).on("change", "input[name='contactsInstitution']", function () {
        var instValue = $('[name="contactsInstitution"]').val();

        if(instValue != ""){
            showLoaderOptional();
            $.ajax({
                url: '@Url.Action("InstitutionInformation", "ControlPanelContacts", new { area = "Contacts" })',
                data: { institutionId: instValue },
                async: false,
                type: 'POST'
            }).done(function (data) {
                if (data.InstitutionInformation.Country != null && data.InstitutionInformation.Country != 0) {
                    $('ul.dropdown-menu[aria-labelledby="id-contactCountry"]').find('[dd-selected]').removeAttr('dd-selected');
                    var dropdownSelect = $('ul.dropdown-menu[aria-labelledby="id-contactCountry"]').find('[dd-value=' + data.InstitutionInformation.Country + ']');
                    dropdownSelect.attr('dd-selected');
                    $('input[name="contactCountry"]').val(data.InstitutionInformation.Country);
                    var countryName = dropdownSelect.text();
                    $('input[name="contactCountry"]').closest('div').removeClass('placeholder');
                    $('#id-contactCountry').find('span.valueText').text(countryName);
                }
                else {
                        $('input[name="contactCountry"]').FirstorDefault();
                }

                $('input[name="contactAddress"]').val(data.InstitutionInformation.Address);
                $('input[name="contactCity"]').val(data.InstitutionInformation.City);
                $('input[name="contactZipCode"]').val(data.InstitutionInformation.ZipCode);
                $('input[name="contactState"]').val(data.InstitutionInformation.State);
                hideLoaderOptional();
            }).fail(function (jqXHR, textStatus) {
                hideLoaderOptional();
            });
        }
    });

    function clearWarningRole() {
        var eaRoles = $('input[name="eaRoles"]').val();
        var contactUserName = $('input[name="contactUserName"]').val();

        if (contactUserName == "" && eaRoles == "") {
            $("input[name='contactUserName']").removeClass("validation-fail");
            $("input[name='contactUserName_text']").removeClass("validation-fail");
            $("input[name='eaRoles']").removeClass("validation-fail");
            $('button#id-eaRoles').removeClass("validation-fail");
        }
    }
</script>