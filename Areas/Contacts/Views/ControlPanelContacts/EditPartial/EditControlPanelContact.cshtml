@model IDB.MW.Application.Contacts.ViewModels.OperationContactsRowViewModel

@{
    Layout = null;
}
<div class="col-md-12">
    <div class="badge01a">
        <button id="backToContacts"><span class="left"></span></button>
        <h2 class="titlePrincipal">@Confluence.LabelMainTitle("Contact")</h2>
    </div>
</div>
<div class="col-md-12">
    <div class="col-md-12">
        @Html.Partial("EditPartial/EditContactsButtonsPartial", Model)
    </div>
    <div class="col-md-12 mb5">
        <div class="col-md-6">
            @Confluence.Label(Localization.GetText("CM.Label.Institution"))
            @Confluence.LabelAsterisk()
        </div>
    </div>
    <div class="col-md-12">
        <div class="col-md-6">
            @Confluence.InputDropDownAsync(Model.InstitutionId.ToString(), "contactsInstitution", Url.Action("GetInstitutionName", "ControlPanelContacts", new { area = "Contacts" }), width: "100%", placeholder: "(" + Localization.GetText("CM.Label.Institution") + ")")
        </div>
    </div>
    <div class="col-md-12 mt20 mb20">
        <div class="groupColumn col-md-6">
            @Confluence.LabelTitleGroup(Localization.GetText("CM.Label.BasicInformation"), htmlClass: "bold pl0")

        </div>
        <div class="groupColumn col-md-6 pl0">
            @Confluence.LabelTitleGroup(Localization.GetText("CM.Label.AddressInformation"), htmlClass: "bold pl0")
        </div>
    </div>
    <div class="col-md-12">
        <div class="groupColumn col-md-6">
            <div class="display-block mb5">
                @Confluence.Label(Localization.GetText("CM.Label.FirstName"))
                @Confluence.LabelAsterisk()
            </div>
            <div class="display-block">
                @Confluence.InputText(Model.FirstName, "contactFirstName", htmlClass: "w70percent", maxLength: 128, placeholder: "First Name")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.LastName"))
                @Confluence.LabelAsterisk()
            </div>
            <div class="display-block">
                @Confluence.InputText(Model.LastName, "contactLastName", htmlClass: "w70percent", maxLength: 128, placeholder: "Last Name")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.Title"))
                @Confluence.LabelAsterisk()
            </div>
            <div class="display-block">
                @Confluence.InputText(Model.Title, "contactTitle", htmlClass: "w70percent", maxLength: 128, placeholder: "Title")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.Telephone"))
                @Confluence.LabelAsterisk()
            </div>
            <div class="display-block">
                @Confluence.InputText(Model.Telephone, "contactPhone", htmlClass: "w70percent", maxLength: 64, placeholder: "Telephone")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.Fax"))
                @Confluence.LabelAsterisk()
            </div>
            <div class="display-block">
                @Confluence.InputText(Model.Fax, "contactFax", htmlClass: "w70percent", maxLength: 64, placeholder: "Fax")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.Email"))
                @Confluence.LabelAsterisk()
            </div>
            <div class="display-block">
                @Confluence.InputText(Model.Email, "contactEmail", htmlClass: "w70percent", maxLength: 128, placeholder: "Email")
            </div>
        </div>
        <div class="groupColumn col-md-6 pl0">
            <div class="display-block mb5">
                @Confluence.Label(Localization.GetText("CM.Label.Country"))
            </div>
            <div class="display-block">
                @Confluence.InputDropDown(Model.CountryId.ToString(), "contactCountry",
               Model.Country.Select(o => new SelectListItem
               {
                   Text = o.Text,
                   Value = o.Value
               }), orderAsc: false, htmlClass: "w100percent", required: false, placeholder: "(" + Localization.GetText("CM.Label.Country") + ")")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.Address"))
            </div>
            <div class="display-block">
                @Confluence.InputText(Model.Address, "contactAddress", htmlClass: "w100percent", required: false, maxLength: 200, placeholder: "Address")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.City"))
            </div>
            <div class="display-block">
                @Confluence.InputText(Model.City, "contactCity", htmlClass: "w70percent", required: false, maxLength: 40, placeholder: "City")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.ZipCode"))
            </div>
            <div class="display-block">
                @Confluence.InputText(Model.ZipCode, "contactZipCode", htmlClass: "w70percent", required: false, maxLength: 15, placeholder: "Zip Code")
            </div>
            <div class="display-block mb5 mt10">
                @Confluence.Label(Localization.GetText("CM.Label.State"))
            </div>
            <div class="display-block">
                @Confluence.InputText(Model.State, "contactState", htmlClass: "w70percent", required: false, maxLength: 30, placeholder: "State")
            </div>
        </div>
    </div>
    <div class="col-md-12 ml0">
        <div class="col-md-12">
            @Confluence.LabelTitleGroup(Localization.GetText("CM.Label.RoleInformation"), htmlClass: "bold pl0 mt20 mb20")
        </div>
        <div class="col-md-12">
            @Confluence.Label(Localization.GetText("CM.Label.Username"), htmlClass: "pl0")
        </div>
        <div class="col-md-12">
            <div class="col-md-6 pl0">
                @Confluence.InputDropDownAsync(Model.UserName, "contactUserName", Url.Action("GetUsersList", "Contacts", new { area = "Contacts" }), width: "100%", placeholder: "(" + Localization.GetText("CM.Label.Username") + ")", required: false)
            </div>
        </div>
        <div class="col-md-9 mt10 pr40 mb40">
            <table id="rolesTable" class="tableNormal mb20">
                <thead>
                    <tr>
                        <th class="w250">@Localization.GetText("CM.GridHeader.Operation")</th>
                        <th class="w300">@Localization.GetText("CM.GridHeader.EARole")</th>
                        <th class="w60">@Localization.GetText("CM.GridHeader.Action")</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.UserRole != null & Model.UserRole.Count > 0)
                    {
                        foreach (var item in Model.UserRole)
                        {
                            <tr>
                                <td class="w250 pl0">@Confluence.InputDropDownAsync(@item.OperationId.ToString(), "contactOperation", Url.Action("GetOperationsList", "ControlPanelContacts", new { area = "Contacts" }), placeholder: "(Operation Number)", required: false)</td>
                                <td class="w300">
                                    @Confluence.InputDropDown(@item.EaRoleId.ToString(), "eaRoles",
                                    item.EaRoles.Select(x => new SelectListItem
                                    {
                                        Text = x.Text,
                                        Value = x.Value
                                    })
                                    , orderAsc: false, htmlClass: "w100percent", placeholder: "(External User Role)", required: false)
                                </td>
                                <td class="w60" align="center">@Confluence.ButtonTrash(null, "removeRole", "removeRow", false)</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td class="w250 pl0">@Confluence.InputDropDownAsync(null, "contactOperation", Url.Action("GetOperationsList", "ControlPanelContacts", new { area = "Contacts" }), placeholder: "(Operation Number)", required: false)</td>
                            <td class="w300">
                                @Confluence.InputDropDown(null, "eaRoles", Model.EaRoles.Select(x => new SelectListItem
                               {
                                   Text = x.Text,
                                   Value = x.Value
                               })
                                , orderAsc: false, htmlClass: "w100percent", placeholder: "(External User Role)", required: false)
                            </td>
                            <td class="w60" align="center">@Confluence.ButtonTrash(null, "removeRole", "removeRow", false)</td>
                        </tr>
                    }
                </tbody>
            </table>
            @Confluence.ButtonAddNewRows(Localization.GetText("CM.Button.NewRole"), "rolesTable", "newRoleRow", "newRoleRow", htmlClass: "col-md-offset-3 col-md-4")
        </div>
    </div>
    <div class="col-md-12 mb30">
        @Html.Partial("EditPartial/EditContactsButtonsPartial")
    </div>
</div>
<script>
    $(document).ready(function () {
        setTimeout(function () { bindHandlers(); }, 1000);
        $("input[name='contactUserName_text']").val("@Html.Raw(Model.UserRole.Select(x => x.User.FullName).FirstOrDefault())");
        $("input[name='contactsInstitution_text']").val("@Html.Raw(Model.InstitutionAcronym + " - " + Model.InstitutionName)");
        $("input[name='contactOperation_text']").val("@Html.Raw(Model.OperationNumber)");
        var opNumbers = $("input[name='contactOperation_text']");
        var cont = 0;
        @foreach(var item in Model.UserRole)
        {
            <text>
            var opValue = opNumbers[cont];
            opValue.value = '@item.OperationNumber';
            cont++;
            </text>
        }
    });
    $("#backToContacts").on("click", function () {
        var container = $("#PageContent");
        showLoaderOptional();
        $.ajax({
            url: '@Url.Action("ControlPanelContacts", "Contacts", new { area = "Contacts" })',
            cache: false,
            contentType: false,
            processData: false,
            async: true,
            type: 'POST'
        }).done(function (data) {
            $(container).empty();
            $(container).append(data);
            bindHandlers();
        }).fail(function (jqXHR, textStatus) {
            hideLoaderOptional();
        });
    });

    $('.pull-right .buttonLink').on("click", function(){
        showLoaderOptional();
    });

    $('ul[aria-labelledby="id-contactUserName"] li').on('click', function(){
        clearWarningRole();
    });

    $('ul[aria-labelledby="id-contactOperation"] li').on('click', function(){
        clearWarningRole();
    })

    $('ul[aria-labelledby="id-eaRoles"] li').on('click', function(){
        clearWarningRole();
    });

    $('input[name="contactUserName_text"]').on('click', function(){
        clearWarningRole();
    });

    $('input[name="contactOperation_text"]').on('click', function(){
        clearWarningRole();
    });

    function removeRow(source) {
        var msg = '@Localization.GetText("OP.OD.Delete.Msg")';
        var title = '@Localization.GetText("Warning")';
        if (source.closest("tbody").find("tr").length != 1)
        {
            Confirm.ShowWarning(msg, title, "Ok", "Cancel").done(function (answer) {
                if (answer) {
                    var button = source;
                    button.closest("tr").remove();
                }
            });
        }
    }

    function removeRow(source) {
        var msg = '@Localization.GetText("OP.OD.Delete.Msg")';
        var title = '@Localization.GetText("Warning")';
        roleId = parseInt(source.closest('tr').find('input[name="eaRoles"]').val()) || 0;
        operationId = source.closest('tr').find("input[name='contactOperation']").GetValue();
        var roles = source.closest("tbody").find("tr").length;
        Confirm.ShowWarning(msg, title, "Ok", "Cancel").done(function (answer) {
            if (answer) {
                if(roles > 1)
                {
                    if(roleId != 0 && operationId != 0)
                    {
                        showLoaderOptional();
                        $.ajax({
                            url: '@Url.Action("RemoveRoleRow", "ControlPanelContacts", new { area = "Contacts" })',
                            cache: false,
                            type: 'POST',
                            data: {executorId : @Model.ExecutorContactId, RoleId: roleId, OperationId: operationId}
                        }).done(function (data) {
                            var button = source;
                            button.closest("tr").remove();
                            hideLoaderOptional();
                        }).fail(function (jqXHR, textStatus) {
                            hideLoaderOptional();
                        });
                    }
                    else{
                        var button = source;
                        button.closest("tr").remove();
                    }
                }
                else {
                    $('input[name="contactOperation"]').val('');
                    $('input[name="contactOperation_text"]').val('');
                    $('input[name="eaRoles"]').FirstorDefault();
                    $('input[name="contactUserName"]').val('');
                    $('input[name="contactUserName_text"]').val('');
                    clearWarningRole();
                }
            }
        });
    }

    function newRoleRow(button) {
        var container = $("#" + button.attr('dd-table')).find('tbody');
        showLoaderOptional();
        $.ajax({
            url: '@Url.Action("AddNewRoleRowControlPanelContacts", "ControlPanelContacts", new { area = "Contacts" })',
            cache: false,
            contentType: false,
            processData: false,
            async: false,
            type: 'POST'
        }).done(function (data) {
            if ($(container).find('td.dataTables_empty').length > 0) {
                $(container).find('tr').remove();
            }
            $(container).append(data);
            bindHandlers();
            hideLoaderOptional();
            
            $('ul[aria-labelledby="id-contactUserName"] li').on('click', function(){
                clearWarningRole();
            });

            $('ul[aria-labelledby="id-contactOperation"] li').on('click', function(){
                clearWarningRole();
            })

            $('ul[aria-labelledby="id-eaRoles"] li').on('click', function(){
                clearWarningRole();
            });

            $('input[name="contactUserName_text"]').on('click', function(){
                clearWarningRole();
            });

            $('input[name="contactOperation_text"]').on('click', function(){
                clearWarningRole();
            });
        }).fail(function (jqXHR, textStatus) {
            hideLoaderOptional();
        });
    }

    function saveEdit() {
        var container = $("#PageContent");
        var contactId = @Model.ExecutorContactId;
        var contactFirstName = $("input[name='contactFirstName']").val();
        var contactLastName = $("input[name='contactLastName']").val();
        var contactTitle = $("input[name='contactTitle']").val();
        var contactPhone = $("input[name='contactPhone']").val();
        var contactFax = $("input[name='contactFax']").val();
        var contactEmail = $("input[name='contactEmail']").val();
        var contactCountry = $("input[name='contactCountry']").val();
        var contactAddress = $("input[name='contactAddress']").val();
        var contactZipCode = $("input[name='contactZipCode']").val();
        var contactCity = $("input[name='contactCity']").val();
        var contactState = $("input[name='contactState']").val();
        var contactUserName = $("input[name='contactUserName']").val();
        var contactInstitution = $("input[name='contactsInstitution']").val();
        var operationNumber = $("input[name='contactOperation']");
        var eaRoles = $("input[name='eaRoles']");
        var contactFullName = $("input[name='contactUserName']").GetText();
        var opNumberVal = $("input[name='contactOperation']").val();
        var eaRolesVal = $("input[name='eaRoles']").val();
        var operationNumberText = $("input[name='contactOperation_text']");
        var eaRolesId = $('button#id-eaRoles');
        var contact = {
            ExecutorContactId: contactId,
            FirstName: contactFirstName,
            LastName: contactLastName,
            Title: contactTitle,
            Telephone: contactPhone,
            Fax: contactFax,
            Email: contactEmail,
            CountryId: contactCountry,
            Address: contactAddress,
            City: contactCity,
            ZipCode: contactZipCode,
            State: contactState,
            InstitutionId: contactInstitution,
            UserName: contactUserName
        };
        var user = new Array();
        var validCount = 0;

        for (x = 0; x <= operationNumber.length - 1; x++) {
            if (contactUserName == "" && operationNumber[x].value == "" && eaRoles[x].value == "") {
                validCount++;
            }
            user.push({
                OperationNumber: $(operationNumber[x]).GetText(),
                OperationId: operationNumber[x].value,
                EaRoleId: parseInt(eaRoles[x].value),
                User: { UserName: contactUserName, FullName: contactFullName }
            })
        }

        if (validCount == operationNumber.length) {
            $("input[name='contactUserName']").removeAttr("data-force-parsley-validation");
            $("input[name='contactUserName']").removeAttr("data-parsley-required");
            $("input[name='contactUserName']").removeAttr("required");
            $("input[name='contactUserName']").removeClass("validation-fail");
            $("input[name='contactUserName_text']").removeClass("validation-fail");
            eaRoles.removeAttr("data-force-parsley-validation");
            eaRoles.removeAttr("data-parsley-required");
            eaRoles.removeAttr("required");
            eaRoles.removeClass("validation-fail");
            eaRolesId.removeClass("validation-fail");
            operationNumber.removeAttr("data-force-parsley-validation");
            operationNumber.removeAttr("data-parsley-required");
            operationNumber.removeAttr("required");
            operationNumber.removeClass("validation-fail");
            operationNumberText.removeClass("validation-fail");
        }
        else {
            $("input[name='contactUserName']").attr("data-force-parsley-validation", "true");
            $("input[name='contactUserName']").attr("data-parsley-required", "true");
            $("input[name='contactUserName']").attr("required", "required");
            eaRoles.attr("data-force-parsley-validation", "true");
            eaRoles.attr("data-parsley-required", "true");
            eaRoles.attr("required", "required");
            operationNumber.attr("data-force-parsley-validation", "true");
            operationNumber.attr("data-parsley-required", "true");
            operationNumber.attr("required", "required");
        }

        if (Validation.Container(container))
        {
            if (validateOp()){
                showLoaderOptional();
                $.ajax({
                    type: "POST",
                    async: true,
                    url: "@Url.Action("EditContact", "ControlPanelContacts", new { area = "Contacts" })",
                    data: { contact: contact, user: user, userName: '@Model.UserName' }
                }).done(function(data){
                    $(container).empty();
                    $(container).append(data);
                    bindHandlers();
                    hideLoaderOptional();
                }).fail(function (jqXHR, textStatus) {
                    hideLoaderOptional();
                });
            }
            else{
                var urlDuplicated = '@Localization.GetText("CM.Warning.OpDuplicated")';
                errorBar(urlDuplicated, 100, false);
            }
        }
    }

    function clearWarningRole(){
        var eaRoles = $('input[name="eaRoles"]');
        var operationNumber = $('input[name="contactOperation"]');
        var contactUserName = $('input[name="contactUserName"]').val();
        var conditionsOk = 0;
        
        for (x = 0; x <= operationNumber.length - 1; x++) {
            if (contactUserName == "" && operationNumber[x].value == "" && eaRoles[x].value == "") {
                conditionsOk++;
            }
        }

        if (conditionsOk == operationNumber.length) {
            $("input[name='contactUserName']").removeClass("validation-fail");
            $("input[name='contactUserName_text']").removeClass("validation-fail");
            $("input[name='eaRoles']").removeClass("validation-fail");
            $('button#id-eaRoles').removeClass("validation-fail");
            $("input[name='contactOperation']").removeClass("validation-fail");
            $("input[name='contactOperation_text']").removeClass("validation-fail");
            operationNumber.closest('div').find('.validation-element').addClass('hide');
            eaRoles.closest('div').find('.validation-element').addClass('hide');
        } 
    }

    function validateOpRole() {
        var eaRoles = $('input[name="eaRoles"]');
        var opNumb = $('input[name="contactOperation"]');
        var i = 0;
        var isValid = true;
        eaRoles.each(function () {
            var count = 0;

            for (x = 0; x <= eaRoles.length - 1; x++) {
                var opValue = $(this).closest('tr').find('input[name="contactOperation"]').val();

                if (eaRoles[x].value != "" && opNumb[x].value != "" && $(this).val() == eaRoles[x].value && opValue == opNumb[x].value) {
                    count++;
                }
            }

            if (count > 1) {
                isValid = false;
            }
        });
        return isValid;
    }

    function validateOp() {
        var opNumb = $('input[name="contactOperation"]');
        var i = 0;
        var isValid = true;
        opNumb.each(function () {
            var count = 0;

            for (x = 0; x <= opNumb.length - 1; x++) {
                var opValue = $(this).closest('tr').find('input[name="contactOperation"]').val();

                if (opNumb[x].value != "" && opValue == opNumb[x].value) {
                    count++;
                }
            }

            if (count > 1) {
                isValid = false;
            }
        });
        return isValid;
    }


</script>