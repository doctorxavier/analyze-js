@using IDB.Presentation.MVC4.Areas.FinancialPlan.Models;
@using IDB.MW.Application.FinancialPlanModule.Helpers;
@using IDB.MW.Application.FinancialPlanModule.Enums;
@model IDB.MW.Application.FinancialPlanModule.ViewModels.FinancialPlanViewModel

<section class="row">
    @Html.Partial("Partial/FinancialInformationRead", Model)
</section>

<section class="row">
    <div class="col-md-12">
        <div class="col-md-4 financial-tables-collapse">
            @Confluence.ButtonColapseAll(new List<string> { "tableDisbursement", "tableFinancialPrincipal", "tableDisbursementExtra" })
        </div>
        <div class="col-md-8 information-filter-selector re-align-items">
            <div class="col-md-12 planning-period-text-container">
                @Confluence.InputCheckbox(false, "SelectPlanningPeriod", "SelectPlanningPeriod") @Confluence.LabelBold(Localization.GetText("FP.INFORMATION.SelectPlanningPeriod"))
            </div>
            <div class="col-md-12 filter-data-container re-align-items">
                <div class="col-md-12 space-top-labels">
                    @Confluence.Label(Localization.GetText("FP.iNFORMATION.ProjectionStart"), htmlClass: "filter-search filter-labels-text-projection-start")
                    @Confluence.Label(Localization.GetText("FP.INFORMATION.ProjectionEnd"), htmlClass: "filter-search filter-labels-text-projection-end")      
                </div>
                <div class="col-md-12 filter-input-dropdown">
                    @Confluence.InputDropDown(
                        Model.PlanningPeriod != null
                        ? Model.PlanningPeriod.StartMonth.ToString()
                        : null,
                        "monthFilterFrom",
                        ViewModelMapperHelper.GetListMonth(),
                        width: "100%",
                        required: false,
                        orderAsc: false,
                        htmlClass: "filter-search monthFilter",
                        placeholder: DateInputPlaceHolderConst.Month)
                    
                    @Confluence.InputDropDown(
                        Model.PlanningPeriod != null
                        ? Model.PlanningPeriod.StartYear.ToString()
                        : null,
                        "yearFilterFrom",
                        ViewModelMapperHelper.GetListYears(Model.MinYear, Model.MaxYear),
                        width: "100%",
                        required: false,
                        htmlClass: "filter-search monthFilter",
                        placeholder: DateInputPlaceHolderConst.Year)
                
                    @Confluence.InputDropDown(
                        Model.PlanningPeriod != null
                        ? Model.PlanningPeriod.EndMonth.ToString()
                        : null,
                        "monthFilterTo",
                        ViewModelMapperHelper.GetListMonth(),
                        width: "100%",
                        required: false,
                        orderAsc: false,
                        htmlClass: "filter-search monthFilter ml20",
                        placeholder: DateInputPlaceHolderConst.Month)
                    
                    @Confluence.InputDropDown(
                        Model.PlanningPeriod != null
                        ? Model.PlanningPeriod.EndYear.ToString()
                        : null,
                        "yearFilterTo",
                        ViewModelMapperHelper.GetListYears(Model.MinYear, Model.MaxYear + 1),
                        width: "100%",
                        required: false,
                        htmlClass: "filter-search monthFilter",
                        placeholder: DateInputPlaceHolderConst.Year)
                        
                        @Confluence.ButtonBlue(Localization.GetText("FP.INFORMATION.ApplyFilter"), htmlClass: "pull-right hide filterButton")
                        @Confluence.InputHidden(Localization.GetText("FP.filter.CanNotBeApplied"), id: "filterCanNotBeApplied")
                        @Confluence.InputHidden(Localization.GetText("FP.filter.EmptyCanNotBeApplied"), id: "filterEmptyCanNotBeApplied")
                        @Confluence.InputHidden(Localization.GetText("FP.FILTER.StartDateBiggerThanEndDate"), id: "startDateBiggerThanEndDateMessage")
                </div>
        </div>
    </div>
</section>
<section class="row financial-tables">
    <div class="col-md-12">
        <div class="horizontalScrollTopBar">
            <div class="hiddenDivForScrollBar"></div>
        </div>
        <div class="table-responsive horizontalScrollBottomBar">
            @Html.Partial("Partial/ReportExtraTable", Model)
            <table id="tableFinancialPrincipal" class="tableNormal">
                @Html.Partial("Partial/FinancialTable", Model)
            </table>
        </div>
    </div>
    <div class="col-md-4 mt40">
        <table id="tableDisbursement" class="tableNormal">
            <thead>
                <tr>
                    <th class="tree icon">
                        <span class="icon mt10" id="extraClickActionSend" onclick="CollapseTable(this)">-</span>
                        <span></span>
                    </th>
                    <td colspan="100" class="tableNameTitle">@Confluence.LabelSubTitleGroup(Localization.GetText("FP.INFORMATION.IDBDisbursements"))</td>
                </tr>
            </thead>
            <tbody class="tableDisbursementItems">
                <tr data-id="">
                    <td class="tree"><span></span><span class=""></span></td>
                    <td class="top-and-border-light-color"><p>@Localization.GetText("FP.INFORMATION.AccumulatedAdvancesNotJustified")</p></td>
                    <td class="top-and-border-light-color accumulatedAdvances"><p data-usdValue="@Model.NotJustifiedAdvances">@Model.NotJustifiedAdvances</p></td>
                </tr>
                <tr data-id="">
                    <td class="tree"><span></span><span class=""></span></td>
                    <td><p>@Localization.GetText("FP.INFORMATION.AccumulatedExpensesNotJustified")</p></td>
                    <td class="hide">
                        <p>@Model.NotJustifiedExpenses</p>
                    </td>
                    <td class="notJustifiedExpenses">
                        <p data-pagemode="read" class="notJustifiedExpensesRead">@Model.NotJustifiedExpenses</p>
                        <p data-pagemode="edit" class="notJustifiedExpensesEdit">@Confluence.InputDecimal(value: Model.NotJustifiedExpenses, name: "IdNotJustifiedExpenses", dataAttributes: new Dictionary<string, string>() { { "usdValue", Model.NotJustifiedExpenses.ToString() } })</p>
                    </td>
                </tr>
                <tr data-id="">
                    <td class="tree"><span></span><span class=""></span></td>
                    <td><p>@Localization.GetText("FP.INFORMATION.FundsPendingJustification")</p></td>
                    <td class="top-and-border-dark-color pendingJustification"><p><strong>2100</strong></p></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="col-md-12">
        <div class="table-responsive">
            <table class="tableNormal" id="tableDisbursementExtra">
                <thead>
                    <tr style="visibility:hidden">
                        <th class="tree icon">
                            <span class="icon mt10" id="extraClickActionReceive" onclick="CollapseTable(this)">-</span>
                            <span></span>
                        </th>
                        <td colspan="100" class="disbursementExtraTitle">@Confluence.LabelSubTitleGroup(Localization.GetText("FP.INFORMATION.DisbursementExtra"))</td>
                    </tr>
                    <tr>
                        <th class="tree icon" style="visibility:hidden">

                        </th>
                        <th></th>
                        <th>As of End of Previous Period</th>
                        @if (Model.FinancialDisbursementTypes != null && Model.FinancialDisbursementTypes.Any())
                        {
                            var Months = Model.FinancialDisbursementTypes.First().FinancialCashFlows;
                            foreach (var months in Months)
                            {
                                <th class="financialMonth">@months.MonthName</th>
                            }
                        }

                        <th>@Localization.GetText("FP.INFORMATION.Total")</th>
                    </tr>
                </thead>
                <tbody>
                    <tr data-id="0" class="monthlyExpenses">
                        <td class="tree" style="visibility:hidden"><span></span><span class=""></span></td>

                        <td><p>@Localization.GetText("FP.INFORMATION.MonthlyExpenses")</p></td>
                        <td><p></p></td>
                        @if (Model.FinancialDisbursementTypes != null && Model.FinancialDisbursementTypes.Any())
                        {
                            var Months = Model.FinancialDisbursementTypes.First().FinancialCashFlows;
                            foreach (var months in Months)
                            {
                                <td>
                                    <ul class=@months.MonthName>
                                        <li>0</li>
                                    </ul>
                                </td>
                            }
                        }
                        <td>
                            <ul class="monthlyExpensesTotal">
                                <li></li>
                            </ul>
                        </td>
                    </tr>
                    <tr data-id="">
                        <td class="tree" style="visibility:hidden"><span></span><span class=""></span></td>
                        <td><p>@Localization.GetText("FP.INFORMATION.IDBCashFlowWithoutDisbursements")</p></td>
                        <td>
                            <ul class="idbCashFlowTotal">
                                <li></li>
                            </ul>
                        </td>
                        @if (Model.FinancialDisbursementTypes != null && Model.FinancialDisbursementTypes.Any())
                        {
                            var Months = Model.FinancialDisbursementTypes.First().FinancialCashFlows;
                            foreach (var months in Months)
                            {
                                <td>
                                    <ul class="idbCashFlow-@months.MonthName idbCashMonth">
                                        <li>0</li>
                                    </ul>
                                </td>
                            }
                        }
                        <td>
                            <ul class="idbCashFlow-Total">
                                <li>0</li>
                            </ul>
                        </td>
                    </tr>

                    <tr data-id="" class="totalDisbursementProjectionsRow">
                        <td class="noBackground tree icon">
                            <span class="buttonShowRowExpand icon js_buttonShowRowExpandSubTable">-</span>
                            <span class="buttonShowRowExpand line hide"></span>
                        </td>
                        <td><p>@Localization.GetText("FP.INFORMATION.TotalDisbursementProjections")</p></td>
                        <td><p></p></td>
                        @if (Model.FinancialDisbursementTypes != null && Model.FinancialDisbursementTypes.Any())
                        {
                            var Months = Model.FinancialDisbursementTypes.First().FinancialCashFlows;
                            foreach (var months in Months)
                            {
                                <td>
                                    <ul class="disbursementProjections-@months.MonthName idbCashMonth totals">
                                        <li>0</li>
                                    </ul>
                                </td>
                            }
                        }
                        <td>
                            <ul class="disbursementProjections-Total">
                                <li></li>
                            </ul>
                        </td>

                    </tr>
                    @if (Model.FinancialDisbursementTypes != null && Model.FinancialDisbursementTypes.Any())
                    {
                        var disbursementType = Model.FinancialDisbursementTypes;
                        foreach (var disbursement in disbursementType)
                        {
                                <tr data-id="" class="totalDisbursementProjections" data-sourceType="@disbursement.DisbursementType">
                                <td class="tree"><span></span><span class="selected"></span>
                                    <td><p>@disbursement.DisbursementTypeLabel</p></td>
                                <td><p></p></td>
                                @foreach (var months in disbursement.FinancialCashFlows)
                                {
                                    <td data-pagemode="read" class="disbursementType">
                                        <ul class="disbursementType-@months.MonthName">
                                            <li>@months.ProjectionAmount</li>
                                        </ul>
                                    </td>
                                    <td data-pagemode="edit" class="disbursement-edit disbursementType">
                                            <ul class="disbursementType-@months.MonthName" data-monthIndex="@months.MonthIndex" data-monthName="@months.MonthName" data-monthYear="@months.Year">
                                            <li>@Confluence.InputDecimal(value: @months.ProjectionAmount, name: "ProjectionAmount", dataAttributes: new Dictionary<string, string>() { { "usdValue", months.ProjectionAmount.ToString() } })</li>
                                        </ul>
                                    </td>
                                }
                                <td>
                                    <ul class="disbursementTypeRowTotal">
                                        <li>
                                        </li>
                                    </ul>
                                </td>
                            </tr>
                        }
                    }

                    <tr data-id="" class="idbNetCashFlowWithDisbursements">
                        <td class="tree" style="visibility:hidden"></td>
                        <td><p>@Localization.GetText("FP.INFORMATION.IDBNetCashFlowWithDisbursements")</p></td>
                        <td>
                            <ul class="idbCashFlowTotal">
                                <li></li>
                            </ul>
                        </td>
                        @if (Model.FinancialDisbursementTypes != null && Model.FinancialDisbursementTypes.Any())
                        {
                            var Months = Model.FinancialDisbursementTypes.First().FinancialCashFlows;
                            foreach (var months in Months)
                            {
                                <td>
                                    <ul class="idbNetCashFlow-@months.MonthName idbNetCashFlow">
                                        <li>0</li>
                                    </ul>
                                </td>
                            }
                        }
                        <td>
                            <ul class="idbNetCashFlowTotal">
                                <li>0</li>
                            </ul>
                        </td>
                    </tr>
                    <tr data-id="">
                        <td class="tree"></td>
                        <td><p></p></td>
                        @if (Model.FinancialDisbursementTypes != null && Model.FinancialDisbursementTypes.Any())
                        {
                            var Months = Model.FinancialDisbursementTypes.First().FinancialCashFlows;
                            foreach (var months in Months)
                            {
                                <td>
                                    <ul>
                                        <li></li>
                                    </ul>
                                </td>
                            }
                        }
                        <td>
                            <ul>
                                <li>@Localization.GetText("FP.INFORMATION.ProjectedLiquidityNeeds")</li>
                            </ul>
                        </td>
                        <td>
                            <ul class="projectedLiquidityNeedsTotal">
                                <li></li>
                            </ul>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</section>
<section class="row footer">
    <div class="col-md-12">
        @Html.Partial("Partial/Buttons", Model)
    </div>
</section>
