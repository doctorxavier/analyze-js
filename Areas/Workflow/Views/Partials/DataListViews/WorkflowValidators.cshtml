@using IDB.Presentation.MVC4.Helpers
@using IDB.Architecture.Language
@using IDB.MW.Application.Core.ViewModels
@using IDB.MW.GenericWorkflow.Enums

@model IDB.MW.GenericWorkflow.Models.TaskDetailViewModel

<div class="col-md-12">
<h4 class="subtitlegroup bold">
    @Localization.GetText("OP.MS.MissionWorkflowValidators.Validators")</h4>
</div>
<div class="col-md-12 pt20">
    <table class="tableNormal" id="tableWorkflowValidators" data-idb-fieldname="tblWorkflowValidators">
        <thead>
            <tr>
                <th>@Localization.GetText("OP.MS.MissionWorkflowValidators.Order")</th>
                <th>@Localization.GetText("WORKFLOW.VALIDATOR.TASKNAME")</th>
                <th>@Localization.GetText("OP.MS.MissionWorkflowValidators.Role")</th>
                <th>@Localization.GetText("OP.MS.Status")</th>
                @if (Model.HasPossibleValidators)
                {
                    <th>@Localization.GetText("WORKFLOW.VALIDATOR.POSSIBLE_VALIDATORS")</th>
                }
                <th>@Localization.GetText("OP.MS.Type")</th>
                <th>@Localization.GetText("WORKFLOW.VALIDATOR.AUTHORIZE")</th>
                <th data-pagemode="edit">@Localization.GetText("OP.MS.Action")</th>
            </tr>
        </thead>

        <tbody>
            @{int order = 1;}
            @foreach (var item in Model.Validators)
            {
                <tr data-id>
                    <td class="order">@order</td>
                    <td class="taskName">@item.TaskName</td>
                    <td class="role">@item.Role</td>
                    <td class="status">@item.Status</td>
                    @if (Model.HasPossibleValidators)
                    {
                        <td>
                            @string.Join(",",item.PossibleValidators)
                        </td>
                    }
                    <td class="type" data-type="@item.Mandatory">@(item.Mandatory 
                        ? Localization.GetText("OP.MS.MissionWorkflowValidators.MandatoryValidator") 
                        : Localization.GetText("OP.MS.MissionWorkflowValidators.AdditionalValidator"))
                    </td>
                    <td>
                        @string.Format("{0} {1} {2}",
                        item.Authorize,
                        item.Authorize.IsEmpty() ?
                            string.Empty :
                            Localization.GetText("WORKFLOW.VALIDATOR.AUTHORIZE_BY"),
                        item.Authorize_by)
                    </td>
                    <td data-pagemode="edit">
                    @if (item.DeletedEnabled && item.Status == TaskEnums.PENDING)
                    {
                        @Confluence.ButtonTrash(text: string.Empty, 
                            name: "btnDeleteTask",
                            action: "removeValidator")
                    }
                    </td>
                </tr>
                        order++;
            }
        </tbody>
    </table>
</div>
<span data-pagemode="edit">@Confluence.InputHidden(value: "", name: "deleteValidators", required: false)</span>

@if (Model.HasAdditionalValidator.Value)
{
    <div class="col-md-12 pt20 validatorsContainer">
        <div class="filterNormal col-md-12" data-pagemode="edit">
            <span class="pull-right ml10 mt10">
                @Confluence.ButtonBlue(
                    text: Localization.GetText("OP.MS.MissionWorkflowValidators.AddValidator"),
                    action: "addValidator",
                    dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "btnAddValidator" } })
            </span>
            <span class="pull-right">
                @Confluence.InputDropDown(
                    value: "",
                    name: "newRole",
                    elements: ViewBag.RetrieveListRoles,
                    placeholder: Localization.GetText("OP.MS.MissionWorkflowValidators.SelectRole"),
                    required: false, dataAttributes: new Dictionary<string, string> { { "idb-fieldname", "ddlNewRole" } })
            </span>
        </div>
    </div>
}


