<a name="others"><h1 class="secciones">Sección Otros</h1></a>
<div class="bloqueSeccion">
    <!-- #region Pestañas -->
    <a name="othPestana">
        <h1>Pestañas</h1>
        <h6>Confluence.Tabs</h6>
    </a>
    @Confluence.Tabs(new Dictionary<string, string>()
    {
        {"linktab1", "NombreTab1"},
        {"linktab2", "NombreTab2"},
        {"linktab3", "NombreTab3"}
    })
    <div class="tab-content">
        <div class="tab-pane" id="linktab1"
             data-parsley-validate="data-parsley-validate"
             data-parsley-excluded="[disabled]"
             data-url=""
             data-loadurl="">
            <div id="ContenidoColapsableAll" class="ContenidoColapsableTest">
                Soy un contenido1
            </div>
        </div>

        <div class="tab-pane" id="linktab2"
             data-parsley-validate="data-parsley-validate"
             data-parsley-excluded="[disabled]"
             data-url=""
             data-loadurl="">
            <div id="ContenidoColapsableAll" class="ContenidoColapsableTest">
                Soy un contenido2
            </div>
        </div>

        <div class="tab-pane" id="linktab3"
             data-parsley-validate="data-parsley-validate"
             data-parsley-excluded="[disabled]"
             data-url=""
             data-loadurl="">
            <div id="ContenidoColapsableAll" class="ContenidoColapsableTest">
                Soy un contenido3
            </div>
        </div>
    </div>

    <!-- #endregion -->
    <!-- #region Foto Persona-->
    <a name="othPersona">
        <h1>Foto persona</h1>
        <h6>Confluence.PicturePeople</h6>
    </a>
    @Confluence.PicturePeople("")
    <!-- #endregion -->
    <!-- #region Foto Persona con Elementos -->
    <a name="othPersonaElement">
        <h1>Foto persona + Elemento</h1>
        <h6>Confluence.PictureElement</h6>
    </a>
    @Confluence.PictureElement(null, @Confluence.Label("texto normal"))
    <!-- #endregion -->
    <!-- #region Informacion Azul-->
    <a name="othinfAzul">
        <h1>Informacion Azul</h1>
        <h6>Confluence.Information</h6>
    </a>
    @Confluence.Information("<p>hola</p>")
    <!-- #endregion -->
    <!-- #region Seccion Persona-->
    <a name="othinfSec">
        <h1>Seccion de Informacion</h1>
        <h6>Confluence.InformationSection</h6>
    </a>
    @Confluence.InformationSection("ejemplo")
    <!-- #endregion -->
    <!-- #region Seccion de Filtros-->
    <a name="othfil">
        <h1>Caja filtros</h1>
        <h6>Class: filterNormal</h6>
    </a>
    <div class="filterNormal"></div>
    <br />
    <p class="filterNormal"></p>

    <div class="filterNormal explain">
        Este es un ejemplo de como se visualiza, para utilizarlo solo se debe agregar la clases css al contenedor deseado
    </div>
    <!-- #endregion -->
    @if (ViewBag.Legacy)
    {
    <!-- #region Alert Legacy -->
        <a name="othAlert">
            <h1>Alert Message</h1>
            <h6>Funcion Javascript</h6>
        </a>
        @Confluence.ButtonBlue("alert", action: "alert")
        <script type="text/javascript">
        function alert() {
            showMessage("Mensaje");
        }
        </script>

        <div class="filterNormal explain">
            Para hacer trabajar el Alert, la funcion es showMessage(texto), es un ejemplo de como se visualiza el componente
        </div>
    <!-- #endregion -->
    }   
    <!-- #region Alert Info Custom-->
    <a name="othInfoAlert">
        <h1>Alert Info Message</h1>
        <h6>Funcion Javascript</h6>
    </a>
    @Confluence.ButtonBlue("alert Custom", action: "infoMsg")
    <script type="text/javascript">
        function infoMsg() {
            Alert.ShowInfo("Mensaje");
        }
    </script>

    <div class="filterNormal explain">
        Para hacer trabajar el Alert Info, la funcion es Alert.ShowInfo(mensaje, titulo), es un ejemplo de como se visualiza el componente
    </div>
    <!-- #endregion -->
    <!-- #region Alert Warning-->
    <a name="othWarningAlert">
        <h1>Alert Warning Message</h1>
        <h6>Funcion Javascript</h6>
    </a>
    @Confluence.ButtonBlue("alert", action: "infoWrg")
    <script type="text/javascript">
        function infoWrg() {
            Alert.ShowWarning("Mensaje");
        }
    </script>

    <div class="filterNormal explain">
        Para hacer trabajar el Alert Info, la funcion es Alert.ShowWarning(mensaje, titulo), es un ejemplo de como se visualiza el componente
    </div>
    <!-- #endregion -->
    <!-- #region Alert Error -->
    <a name="othErrorAlert">
        <h1>Alert Error Message</h1>
        <h6>Funcion Javascript</h6>
    </a>
    @Confluence.ButtonBlue("alert", action: "infoErr")
    <script type="text/javascript">
        function infoErr() {
            Alert.ShowError("Mensaje");
        }
    </script>

    <div class="filterNormal explain">
        Para hacer trabajar el Alert Info, la funcion es Alert.ShowError(mensaje, titulo), es un ejemplo de como se visualiza el componente
    </div>
    <!-- #endregion -->
    <!-- #region Alert Success -->
    <a name="othSuccessAlert">
        <h1>Alert Success Message</h1>
        <h6>Funcion Javascript</h6>
    </a>
    @Confluence.ButtonBlue("alert", action: "infoSucc")
    <script type="text/javascript">
        function infoSucc() {
            Alert.ShowSuccess("Mensaje");
        }
    </script>

    <div class="filterNormal explain">
        Para hacer trabajar el Alert Info, la funcion es Alert.Success(mensaje, titulo), es un ejemplo de como se visualiza el componente
    </div>
    <!-- #endregion -->


    <!-- #region Confirm Info-->
    <a name="othInfoConfirm">
        <h1>Confirm Info Message</h1>
        <h6>Funcion Javascript</h6>
    </a>
    @Confluence.ButtonBlue("Confirm", action: "infoMsgConfirm")
    <script type="text/javascript">
        function infoMsgConfirm() {
            Confirm.ShowInfo("Mensaje");
        }
    </script>

    <div class="filterNormal explain">
        Para hacer trabajar el Confirm, la funcion es Confirm.ShowInfo(mensaje, titulo).done(function(response) {}), es un ejemplo de como se visualiza el componente, ademas dentro del done el elemento response es un boleano de si fue afirmativa la respuesta
    </div>
    <!-- #endregion -->
    <!-- #region Confirm Warning-->
    <a name="othWarningConfirm">
        <h1>Confirm Warning Message</h1>
        <h6>Funcion Javascript</h6>
    </a>
    @Confluence.ButtonBlue("Confirm", action: "infoWrgConfirm")
    <script type="text/javascript">
        function infoWrgConfirm() {
            Confirm.ShowWarning("Mensaje");
        }
    </script>

    <div class="filterNormal explain">
        Para hacer trabajar el Confirm, la funcion es Confirm.ShowWarning(mensaje, titulo).done(function(response) {}), es un ejemplo de como se visualiza el componente, ademas dentro del done el elemento response es un boleano de si fue afirmativa la respuesta
    </div>
    <!-- #endregion -->
    <!-- #region Confirm Custom Info-->
    <a name="othInfoConfirmCustom">
        <h1>Info Confirm Message Custom</h1>
        <h6>Funcion Javascript</h6>
    </a>
    @Confluence.ButtonBlue("Confirm", action: "infoConfirmCustom")
    <script type="text/javascript">
        function infoConfirmCustom() {
            Confirm.ShowInfo("Mensaje", "", "", "", "", { cancel : false, ok : true});
        }
    </script>

    <div class="filterNormal explain">
        Para hacer trabajar el Confirm, la funcion es Confirm.Info(mensaje, titulo).done(function(response) {}), es un ejemplo de como se visualiza el componente, ademas dentro del done el elemento response es un boleano de si fue afirmativa la respuesta.
        Se incorpora como último parámetro un objeto con la propiedad de los botones cancel/ok para mostrarlos o no
        en este ejemplo : Confirm.ShowInfo("Mensaje", "", "", "", "", { cancel : false, ok : true}); el botón OK estara visible y el Cancel no
    </div>
    <!-- #endregion -->
    <!-- #region Confirm Error -->
    <a name="othErrorConfirm">
        <h1>Confirm Error Message</h1>
        <h6>Funcion Javascript</h6>
    </a>
    @Confluence.ButtonBlue("Confirm", action: "infoErrConfirm")
    <script type="text/javascript">
        function infoErrConfirm() {
            Alert.ShowError("Mensaje");
        }
    </script>

    <div class="filterNormal explain">
        Para hacer trabajar el Confirm, la funcion es Confirm.ShowError(mensaje, titulo).done(function(response) {}), es un ejemplo de como se visualiza el componente, ademas dentro del done el elemento response es un boleano de si fue afirmativa la respuesta
    </div>
    <!-- #endregion -->
    <!-- #region Alert Success -->
    <a name="othSuccessConfirm">
        <h1>Confirm Success Message</h1>
        <h6>Funcion Javascript</h6>
    </a>
    @Confluence.ButtonBlue("Confirm", action: "infoSuccConfirm")
    <script type="text/javascript">
        function infoSuccConfirm() {
            Alert.ShowSuccess("Mensaje");
        }
    </script>

    <div class="filterNormal explain">
        Para hacer trabajar el Confirm, la funcion es Confirm.Success(mensaje, titulo).done(function(response) {}), es un ejemplo de como se visualiza el componente, ademas dentro del done el elemento response es un boleano de si fue afirmativa la respuesta
    </div>
    <!-- #endregion -->


    @if (ViewBag.Legacy)
    {
    <!-- #region Warning Legacy-->
        <a name="othWarning">
            <h1>Warning Message</h1>
            <h6>Funcion Javascript</h6>
        </a>
        @Confluence.ButtonBlue("warning", action: "warning")
        <script type="text/javascript">
        function warning() {
            confirmAction("Mensaje");
        }
        </script>
        <div class="filterNormal explain">
            Este es un ejemplo de como se visualiza el complemento vex confirmAction()
        </div>
    <!-- #endregion -->
    }

    <!-- #region Bar Succes-->
    <a name="othSuccesBar">
        <h1>Succes Bar</h1>
        <h6>Funcion Javascript</h6>
    </a>
    @Confluence.ButtonBlue("alert", action: "bar1")
    <script type="text/javascript">
        function bar1() {
            successBar("mensaje");
        }
    </script>
    <div class="filterNormal explain">
        Este es un ejemplo de como se visualiza la función: successBar(string mensaje, int duracion, bool autoClose)
    </div>
    <!-- #endregion -->
    <!-- #region Bar Error-->
    <a name="othErrorBar">
        <h1>Error Bar</h1>
        <h6>Funcion Javascript</h6>
    </a>
    @Confluence.ButtonBlue("alert", action: "bar2")
    <script type="text/javascript">
        function bar2() {
            errorBar("mensaje");
        }
    </script>
    <div class="filterNormal explain">
        Este es un ejemplo de como se visualiza la función: errorBar(string mensaje, int duracion, bool autoClose)
    </div>
    <!-- #endregion -->
    <!-- #region Bar Info-->
    <a name="othInfoBar">
        <h1>Info Bar</h1>
        <h6>Funcion Javascript</h6>
    </a>
    @Confluence.ButtonBlue("alert", action: "bar3")
    <script type="text/javascript">
        function bar3() {
            infoBar("mensaje");
        }
    </script>
    <div class="filterNormal explain">
        Este es un ejemplo de como se visualiza la función: infoBar(string mensaje, int duracion, bool autoClose)
    </div>
    <!-- #endregion -->
    <!-- #region Bar Warning-->
    <a name="othWarningBar">
        <h1>Warning Bar</h1>
        <h6>Funcion Javascript</h6>
    </a>
    @Confluence.ButtonBlue("alert", action: "bar4")
    <script type="text/javascript">
        function bar4() {
            warningBar("mensaje");
        }
    </script>
    <div class="filterNormal explain">
        Este es un ejemplo de como se visualiza la función: warningBar(string mensaje, int duracion, bool autoClose)
    </div>
    <!-- #endregion -->

    @if (ViewBag.Legacy)
    {
        <!-- #region Modal Vex -->
        <a name="othModal">
            <h1>Modal</h1>
            <h6>Sin Helper</h6>
        </a>
        <div data-id="ModalRegion">
            <button data-id="butttonExampleModal" class="buttonBlue"
                    data-modal-allowclose="true"
                    data-custom-modal="ExampleModal"
                    data-custom-modal-style=""
                    data-custom-modal-title="@Localization.GetText("Example Modal")"
                    data-custom-modal-validate="false"
                    data-custom-buttons='["save", "cancel"]'
                    data-custom-button-save-id="send"
                    data-custom-button-save="@Localization.GetText("Save")"
                    data-custom-button-save-style="btn btn-primary"
                    data-custom-button-save-callback="Save"
                    data-custom-button-save-closeatend="true"
                    data-custom-button-cancel-id="cancel"
                    data-custom-button-cancel="@Localization.GetText("Cancel")"
                    data-custom-button-cancel-style="btn btn-link"
                    data-custom-button-cancel-callback=""
                    data-custom-modal-onclose=""
                    data-custom-modal-closeonoverlayclick="false">
                Modal
            </button>

            <div id="ExampleModal" class="hide">
                Contenido
            </div>
        </div>
        <!-- #endregion -->
    }

    <!-- #region Modal Info-->
    <a name="othModalInfo">
        <h1>Modal Info</h1>
        <h6>Confluence.ModalInformation</h6>
    </a>
    <!-- Boton solo de ejemplo no es necesario para la modal -->
    @Confluence.ButtonBlue("Modal Info", dataAttributes: new Dictionary<string, string> { { "toggle", "modal" }, { "target", "#testInfo" } })

    <!-- elementos necesarios para modal-->
    @Confluence.ModalInformation(Html.Partial("Partials/ModalContent", "Info"), "testInfo")

    <div class="filterNormal explain">
        Para utilizar hay que llenar los parametros necesarios, puede ser con construccion de html o desde una parcial<br />
        Luego para ser llamado puede ser desde Javascript:<br />
        $("#id").modal()<br />
        como desde un boton agregando los siguientes parametros:<br />
        data-toggle="modal" data-target="#testSuccess"<br />
        para mayor informacion ver el codigo fuente
    </div>
    <!-- #endregion -->
    <!-- #region Modal Succes-->
    <a name="othModalSucces">
        <h1>Modal Success</h1>
        <h6>Confluence.ModalSuccessful</h6>
    </a>
    <!-- Boton solo de ejemplo no es necesario para la modal -->
    @Confluence.ButtonBlue("Modal Success", dataAttributes: new Dictionary<string, string> { { "toggle", "modal" }, { "target", "#testSuccess" } })

    <!-- elementos necesarios para modal-->
    @Confluence.ModalSuccessful(Html.Partial("Partials/ModalContent", "Success"), "testSuccess")

    <div class="filterNormal explain">
        Para utilizar hay que llenar los parametros necesarios, puede ser con construccion de html o desde una parcial<br />
        Luego para ser llamado puede ser desde Javascript:<br />
        $("#id").modal()<br />
        como desde un boton agregando los siguientes parametros:<br />
        data-toggle="modal" data-target="#testSuccess"<br />
        para mayor informacion ver el codigo fuente
    </div>
    <!-- #endregion -->
    <!-- #region Modal Warning-->
    <a name="othModalWarning">
        <h1>Modal Warning</h1>
        <h6>Confluence.ModalWarning</h6>
    </a>
    <!-- Boton solo de ejemplo no es necesario para la modal -->
    @Confluence.ButtonBlue("Modal Warning", dataAttributes: new Dictionary<string, string> { { "toggle", "modal" }, { "target", "#testWarning" } })

    <!-- elementos necesarios para modal-->
    @Confluence.ModalWarning(Html.Partial("Partials/ModalContent", "Warning"), "testWarning")

    <div class="filterNormal explain">
        Para utilizar hay que llenar los parametros necesarios, puede ser con construccion de html o desde una parcial<br />
        Luego para ser llamado puede ser desde Javascript:<br />
        $("#id").modal()<br />
        como desde un boton agregando los siguientes parametros:<br />
        data-toggle="modal" data-target="#testSuccess"<br />
        para mayor informacion ver el codigo fuente
    </div>
    <!-- #endregion -->
    <!-- #region Modal Error-->
    <a name="othModalError">
        <h1>Modal Error</h1>
        <h6>Confluence.ModalError</h6>
    </a>
    <!-- Boton solo de ejemplo no es necesario para la modal -->
    @Confluence.ButtonBlue("Modal Error", dataAttributes: new Dictionary<string, string> { { "toggle", "modal" }, { "target", "#testError" } })

    <!-- elementos necesarios para modal-->

    @Confluence.ModalError(Html.Partial("Partials/ModalContent", "Success"), "testSuccess", ViewBag.ButtonModal)

    <div class="filterNormal explain">
        Para utilizar hay que llenar los parametros necesarios, puede ser con construccion de html o desde una parcial<br />
        Luego para ser llamado puede ser desde Javascript:<br />
        $("#id").modal()<br />
        como desde un boton agregando los siguientes parametros:<br />
        data-toggle="modal" data-target="#testSuccess"<br />
        para mayor informacion ver el codigo fuente
    </div>
    <!-- #endregion -->
    <!-- #region List Helper-->
    <a name="othListHelper">
        <h1>List Helpers</h1>
        <h6>Confluence.ListHelpers</h6>
    </a>
    @Confluence.ListHelpers(
                new List<HelperResult>()
                {
                    Confluence.Label("elemento"),
                    Confluence.LabelBold("elemento2"),
                    Confluence.InputText("elemento3", "inputList")
                }
    )
    <div class="filterNormal explain">
        Este componente sirve para poner mas de un elemento en las tablas.
    </div>
    <!-- #endregion -->
    <!-- #region Box Usuarios -->
    <a name="othBoxUsr">
        <h1>Box Users</h1>
        <h6>Confluence.BoxUser</h6>
    </a>
    <div class="contentFloats">
        @Confluence.BoxUser("Name 1", "user1", "Role", "org")
        @Confluence.BoxUser("Name 2", "user3", "Role", "org")
        @Confluence.BoxUser("Name 3", "user2", "Role", "org")
    </div>
    <!-- #endregion -->
    <!-- #region Box Usuarios Simple-->
    <a name="othBoxUsrSimple">
        <h1>Box Users Simplet</h1>
        <h6>Confluence.BoxUserSimple</h6>
    </a>
    <div class="contentFloats">
        @Confluence.BoxUserSimple("Name 1", "user1", "Role", "org")
        @Confluence.BoxUserSimple("Name 2", "user3", "Role", "org")
        @Confluence.BoxUserSimple("Name 3", "user2", "Role", "org")
    </div>
    <!-- #endregion -->
</div>