@using IDB.Presentation.MVC4.Helpers
<a name="inputs"><h1 class="secciones">Sección de Inputs</h1></a>
<div class="bloqueSeccion mb30">

    <a name="inptextarea">
        <h1>Textarea</h1>
        <h6>Confluence.InputTextArea</h6>
    </a>
    @Confluence.InputTextArea(null, "textarea1")
    @Confluence.InputTextArea(null, "textarea2", width: "100%", height: "100px")

    <a name="inpdropdown">
        <h1>Dropdown</h1>
        <h6>Confluence.InputDropDown</h6>
    </a>
    @Confluence.InputDropDown(null, "dropdown", (List<System.Web.Mvc.SelectListItem>)ViewBag.ListItem, required: false, placeholder: "")
    <br />
    @Confluence.InputDropDown("1", "dropdown2", (List<System.Web.Mvc.SelectListItem>)ViewBag.ListItem, width: "500px")
    <br />
    @Confluence.InputDropDown("1", "dropdown3", (List<System.Web.Mvc.SelectListItem>)ViewBag.ListItem, width: "100%")
    <br />
    <div class="filterNormal explain">
        <strong>Funciones:</strong>
        <ul>
            <li>
                <strong>$(element).FirstorDefault()</strong><br />
                Sirve para seleccionar el primer elemento de la lista.
            </li>
            <li>
                <strong>$(element).SelectIndex(index)</strong><br />
                Sirve para seleccionar el index del elemento de la lista. Empiesa en 0, si el index no se encuentra en la lista selecciona el primer elemento
            </li>
            <li>
                <strong>$(element).GetText()</strong><br />
                Sirve para obtener el texto seleccionado del componente.
            </li>
            <li>
                <strong>$(element).GetValue()</strong><br />
                Sirve para obtener el valor seleccionado del componente.
            </li>
            <li>
                <strong>$(element).SetValue(value, text)</strong><br />
                Sirve para setear el valor y el texto del componente seleccionado.
            </li>
        </ul>

    </div>

    <a name="inpdropdownAsync">
        <h1>Dropdown Asincronico</h1>
        <h6>Confluence.InputDropDownAsync</h6>
    </a>
    @Confluence.InputDropDownAsync(null, "dropdownfilter", Url.Action("DropDownList", "View", new { area = "Styles" }))
    @Confluence.InputDropDownAsync(null, "dropdownfilter2", Url.Action("DropDownList", "View", new { area = "Styles" }), textFindButton: "Buscar")
    <br />
    <div class="filterNormal explain">
        <strong>Funciones:</strong>
        <ul>
            <li>
                <strong>$(element).GetText()</strong><br />
                Sirve para obtener el texto seleccionado del componente.
            </li>
            <li>
                <strong>$(element).GetValue()</strong><br />
                Sirve para obtener el valor seleccionado del componente.
            </li>
            <li>
                <strong>$(element).SetValue(value, text)</strong><br />
                Sirve para setear el valor y el texto del componente seleccionado.
            </li>
        </ul>

    </div>

    <a name="inpdropdownAsyncPic">
        <h1>Dropdown Asincronico con Foto</h1>
        <h6>Confluence.InputDropDownAsyncPicture</h6>
    </a>
    @Confluence.InputDropDownAsyncPicture(null, "dropdownfilter3", Url.Action("DropDownList", "View", new { area = "Styles" }), showPicture: false)
    <br /><br />
    @Confluence.InputDropDownAsyncPicture(null, "dropdownfilter4", Url.Action("DropDownList", "View", new { area = "Styles" }))
    <br />
    @Confluence.InputDropDownAsyncPicture(null, "dropdownfilter5", Url.Action("DropDownList", "View", new { area = "Styles" }), textFindButton: "Buscar")
    <br />
    <div class="filterNormal explain">
        <strong>Funciones:</strong>
        <ul>
            <li>
                <strong>$(element).GetText()</strong><br />
                Sirve para obtener el texto seleccionado del componente.
            </li>
            <li>
                <strong>$(element).GetValue()</strong><br />
                Sirve para obtener el valor seleccionado del componente.
            </li>
            <li>
                <strong>$(element).SetValue(value, text)</strong><br />
                Sirve para setear el valor y el texto del componente seleccionado.
            </li>
        </ul>

    </div>

    <a name="inpdropdownAutoComplete">
        <h1>Dropdown AutoCompletar</h1>
        <h6>Confluence.InputDropDownAutoComplete</h6>
    </a>
    @Confluence.InputDropDownAutoComplete(null, "dropdownComplete", (List<System.Web.Mvc.SelectListItem>)ViewBag.ListItem, showButton: true)
    @Confluence.InputDropDownAutoComplete(null, "dropdownComplete2", (List<System.Web.Mvc.SelectListItem>)ViewBag.ListItem2, textFindButton: "Buscar", showButton: true)
    @Confluence.InputDropDownAutoComplete(null, "dropdownComplete3", (List<System.Web.Mvc.SelectListItem>)ViewBag.ListItem, width: "500px", showButton: true)
    <br />
    <div class="filterNormal explain">
        <strong>Funciones:</strong>
        <ul>
            <li>
                <strong>$(element).GetText()</strong><br />
                Sirve para obtener el texto seleccionado del componente.
            </li>
            <li>
                <strong>$(element).GetValue()</strong><br />
                Sirve para obtener el valor seleccionado del componente.
            </li>
            <li>
                <strong>$(element).SetValue(value, text)</strong><br />
                Sirve para setear el valor y el texto del componente seleccionado.
            </li>
        </ul>

    </div>

    <a name="inpdropdownAutoCompleteNonButton">
        <h1>Dropdown AutoCompletar sin boton</h1>
        <h6>Confluence.InputDropDownAutoComplete</h6>
    </a>
    @Confluence.InputDropDownAutoComplete(null, "dropdownComplete4", (List<System.Web.Mvc.SelectListItem>)ViewBag.ListItem)
    @Confluence.InputDropDownAutoComplete(null, "dropdownComplete5", (List<System.Web.Mvc.SelectListItem>)ViewBag.ListItem2)
    @Confluence.InputDropDownAutoComplete(null, "dropdownComplete6", (List<System.Web.Mvc.SelectListItem>)ViewBag.ListItem, width: "500px")
    <br />
    <div class="filterNormal explain">
        <strong>Funciones:</strong>
        <ul>
            <li>
                <strong>$(element).GetText()</strong><br />
                Sirve para obtener el texto seleccionado del componente.
            </li>
            <li>
                <strong>$(element).GetValue()</strong><br />
                Sirve para obtener el valor seleccionado del componente.
            </li>
            <li>
                <strong>$(element).SetValue(value, text)</strong><br />
                Sirve para setear el valor y el texto del componente seleccionado.
            </li>
        </ul>

    </div>

    <a name="inputButton">
        <h1>Input Button</h1>
        <h6>Confluence.InputButton</h6>
    </a>
    @Confluence.InputButton(null, "name", "butonActive")
    @Confluence.InputButton(null, "name", "butonActive", textFindButton: "Button")

    <a name="inputText">
        <h1>Input Text</h1>
        <h6>Confluence.InputText</h6>
    </a>
    @Confluence.InputText(null, "name")

    <a name="inputNumber">
        <h1>Input Number</h1>
        <h6>Confluence.InputNumber</h6>
    </a>
    @Confluence.InputNumber(null, "inputNumber")

    <a name="inputDecimal">
        <h1>Input Decimal</h1>
        <h6>Confluence.InputDecimal</h6>
    </a>
    @Confluence.InputDecimal(null, "inputDecimal")

    <a name="inputDecimal">
        <h1>Input Decimal Negative</h1>
        <h6>Confluence.InputDecimalNegative</h6>
    </a>
    @Confluence.InputDecimalNegative(null, "inputDecimalNegative")

    <a name="inputPercent">
        <h1>Input Porcentaje</h1>
        <h6>Confluence.InputPercent</h6>
    </a>
    @Confluence.InputPercent(null, "inputPercent")

    <a name="inputdate">
        <h1>Input Fecha</h1>
        <h6>Confluence.InputDatePicker</h6>
    </a>
    @Confluence.InputDatePicker(null, "calendarInput")

    <div class="filterNormal explain">
        El componente tiene las siguientes funciones de validación (como parametro):

        <ul>
            <li>
                <strong>minDate</strong><br />
                Acepta un elemento tipo date, y filtra al elemento que sea mayor o igual que la fecha ingresada
            </li>
            <li>
                <strong>maxDate</strong><br />
                Acepta un elemento tipo date, y filtra al elemento que sea menor o igual que la fecha ingresada
            </li>
            <li>
                <strong>lessThanNameDate</strong><br />
                Acepta un elemento tipo string, busca al elemento y dependiendo su valor filtra que sea menor que el elemento
            </li>
            <li>
                <strong>greaterThanNameDate</strong><br />
                Acepta un elemento tipo string, busca al elemento y dependiendo su valor filtra que sea mayor que el elemento
            </li>
        </ul>
    </div>

    <a name="inputComent">
        <h1>Caja de comentarios</h1>
        <h6>Confluence.InputCommentBox</h6>
    </a>
    @Confluence.InputCommentBox(
    Confluence.LabelsGroup("title1", Confluence.Label("content1"), false),
    Confluence.LabelsGroup("title2", Confluence.Label("content2"), false),
    Confluence.LabelsGroup("title3", Confluence.Label("content3"), false),
    null, null)

    <a name="inputrad">
        <h1>Input Radiobutton</h1>
        <h6>Confluence.InputRadioButton</h6>
    </a>
    @Confluence.InputRadioButton("valor", "radio", true, label: "texto")
    @Confluence.InputRadioButton("valor", "radio", false, label: "texto")
    @Confluence.InputRadioButton("valor", "radio", label: "texto")
    @Confluence.InputRadioButton("valor", "radio", label: "texto", labelBold: true)

    <a name="inputchk">
        <h1>Input Checkbox</h1>
        <h6>Confluence.InputCheckbox</h6>
    </a>
    @Confluence.InputCheckbox(true, "soyuncheck", "check1", "texto")
    @Confluence.InputCheckbox(false, "soyuncheck", "check1", "texto", labelBold: true)

    <a name="inputchklock">
        <h1>Input Checkbox PadLock</h1>
        <h6>Confluence.InputCheckPadlock</h6>
    </a>
    @Confluence.InputCheckPadlock(true, "soyuncheck", "check1", "texto")
    @Confluence.InputCheckPadlock(false, "soyuncheck", "check1", "texto", labelBold: true)

    <a name="inputmultiselect">
        <h1>Input Multiselect</h1>
        <h6>Confluence.InputDropDownMulti</h6>
    </a>
    @Confluence.InputDropDownMulti("multiselect", (List<MultiSelectListItem>)ViewBag.MultiListItem)


    <a name="inputsingleselect">
        <h1>Input Singleselect</h1>
        <h6>Confluence.InputSelectDropDownAutoComplete</h6>
    </a>
    @Confluence.InputSelectDropDownAutoComplete(null, "inputsingleselect", (List<System.Web.Mvc.SelectListItem>)ViewBag.ListItem, showButton: false)

    <a name="inpdropdownAutoCompleteList">
        <h1>Dropdown AutoCompletar Con Lista Previa</h1>
        <h6>Confluence.InputSelectDropDownAutoComplete</h6>
    </a>
    @Confluence.InputSelectDropDownAutoComplete(null, "inputsingleselect", (List<System.Web.Mvc.SelectListItem>)ViewBag.ListItem, showButton: false)
    
    <a name="inputhide">
        <h1>Input Hidden</h1>
        <h6>Confluence.InputHidden</h6>
    </a>
    @Confluence.InputHidden("valor", "inputHidden")


    @if (ViewBag.Legacy)
    {
        <a name="inputMuliText">
            <h1>Caja Multilenguaje Simple (modo edit disponible)</h1>
            <h6>Confluence.InputMultiLanguageSimpleText</h6>
        </a>
        @Confluence.InputMultiLanguageSimpleText(ViewBag.MultiLenguageSimple)

        <a name="inputMuliArea">
            <h1>Caja Multilenguaje Simple Area (modo edit disponible)</h1>
            <h6>Confluence.InputMultiLanguageSimpleArea</h6>
        </a>
        @Confluence.InputMultiLanguageSimpleArea(ViewBag.MultiLenguageSimple)

        <a name="inputMuli">
            <h1>Caja Multilenguaje (modo edit disponible)</h1>
            <h6>Confluence.InputMultiLanguage</h6>
        </a>
        @Confluence.InputMultiLanguage(ViewBag.MultiLenguage)
    }

    <a name="inputFile">
        <h1>Input File</h1>
        <h6>Confluence.InputFile</h6>
    </a>
    @Confluence.InputFile("inputFile")

    @if (ViewBag.Legacy)
    {
        <a name="inputRich">
            <h1>RichText (modo edit disponible)</h1>
            <h6>Confluence.InputRichText</h6>
        </a>
        <br />
        <br />
        @Confluence.InputRichText("text", "name")
    }

    <a name="inputMoney">
        <h1>Input Money</h1>
        <h6>Confluence.InputMoney</h6>
    </a>
    @Confluence.InputMoney(null, "inputMoney")
</div>