@using System.Globalization;
@using IDB.MW.Infrastructure.Configuration
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MVCControls.General.Helpers

@using IDB.MW.Application.ProcurementModule.ViewModels.FirmProcurement
@using IDB.MW.Application.BEOProcurementModule.ViewModels.FirmProcurement
@using IDB.Presentation.MVC4.Areas.BEOProcurement.Components
@using IDB.MW.Domain.EntityHelpers

@model ProtestDocViewModel

@{
    if (ViewBag.FirmList == null)
    {
        ViewBag.FirmList = new List<SelectListItem>();
    }

    var tableName = "ProtestDocs";
    var protestTable = Model.Rows.Select(d => new ProtestDocumentRecordModel
    {
        ProtestNumber = d.ProtestNumber,
        ProtestName = Confluence.LabelGetDropDown(d.OfferId, ViewBag.FirmListWithIDBComunication, false),
        Author = d.User,
        CreationDate = d.Date,
        DocumentId = d.Id,
        DocumentName = d.Description,
        DocumentNumber = d.DocumentNumber,
        Link = DownloadDocumentHelper.GetDocumentLink(d.DocumentNumber)
    })
    .ToList()
    .PopulateDataTable();
}

<table class="table-transparent mb10">
    <tbody>
        <tr>
            <td class="table-transparent-text protests-document">
                @Confluence.Label(Localization.GetText("TCP.FirmProcurement.TableSubTitle.Protests"))
            </td>
        </tr>
    </tbody>
</table>

<div class="row mb20">
    <div class="col-xs-12">
        @DocumentManagement.DynamicTable(tableName, tableName, protestTable, false, false)
    </div>
</div>