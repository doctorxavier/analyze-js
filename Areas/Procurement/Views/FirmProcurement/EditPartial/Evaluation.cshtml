@using System.Globalization;

@using IDB.MW.Infrastructure.Configuration
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MVCControls.General.Helpers
@using IDB.Presentation.MVC4.Helpers
@using IDB.MW.Infrastructure.Helpers;
@using IDB.MW.Application.BEOProcurementModule.ViewModels.FirmProcurement
@using IDB.Presentation.MVC4.Areas.BEOProcurement.Components
@using IDB.Presentation.MVC4.Areas.BEOProcurement.Helper.ConstantHelper
@using IDB.Architecture.ApplicationParameter
@using IDB.MW.Application.BEOProcurementModule.Enums;
@using IDB.MW.Infrastructure.BaseClasses
@using IDB.MW.Application.Core.ViewModels


@model EvaluationViewModel

@{
    var cmdCollection = (CustomEnumDictionary<MasterDataViewModel>)ViewBag.CMDCollection;
}
<div class="row">
    <div class="col-xs-12">
        @Html.Partial("EditPartial/DatatableDocsFirm",
        new FirmDocViewModel
        {
            HasLink = false,
            LinkURL = string.Empty,
            Prefix = string.Empty,
            Rows = Model.Clarifications,
            SubTitle = Localization.GetText("TCP.FirmProcurement.TableSubTitle.Clarifications"),
            TableName = "Clarifications",
            Title = Localization.GetText("TCP.FirmProcurement.TableTitle.Clarifications"),
            IsWinner = false,
            FirmList = ViewBag.FirmListShortListedWithBankResponse,
            FirmColumnName = Localization.GetText("TCP.FirmProcurement.Table.Column.Name"),
        })
    </div>
</div>

<div class="row mb10">
    <div class="col-xs-12 mb45">
        @Confluence.InputCheckbox(Model.IsCertifyClarification, name: "IsCertifyClarification", label: Localization.GetText("TCP.FirmProcurement.CheckboxText.Clarifications"), disabled: false)
    </div>
</div>

<div name="contentCertifyCheckBox">
    <div class="row 30">
        <div class="col-xs-12 mb40">
            @Html.Partial("EditPartial/DatatableDocsFirm",
            new FirmDocViewModel
            {
                HasLink = false,
                LinkURL = string.Empty,
                Prefix = string.Empty,
                Rows = Model.TechnicalProposalDocs,
                SubTitle = Localization.GetText("TCP.FirmProcurement.TableSubTitle.TechnicalProposalDocuments"),
                TableName = "TechnicalProposalDocs",
                Title = Localization.GetText("TCP.FirmProcurement.TableTitle.TechnicalProposalDocuments"),
                IsWinner = false
            })
            @Confluence.InputText("val", "nameTechnical", htmlClass: "hide", required: false, dataAttributes: new Dictionary<string, string>() { { "parsley-TechnicalProposalTab", "[name=TechnicalProposalDocs-FirmId]" }, { "parsley-TechnicalProposalDocNonTab", "[name=TechnicalProposalDocs-FirmId]" } })
        </div>
    </div>

    <div class="mb70">
        <div class="row">
            <div class="col-xs-12 aligment">
                @Confluence.LabelMainSubTitle(Localization.GetText("TCP.FirmProcurement.TableTitle.BAFO"))
                <div class="mb5">
                    @Confluence.Label(Localization.GetText("TCP.FirmProcurement.RadioButtonText.BAFO"))
                </div>
                @Confluence.InputRadioButton("True", "IsBAFOResquested", Model.IsBAFOResquested, id: "IsBAFOResquested", label: Localization.GetText("Common.Yes"), isInLine: true, disabled: false)
                @Confluence.InputRadioButton("False", "IsBAFOResquested", !Model.IsBAFOResquested, id: "IsNotBAFOResquested", label: Localization.GetText("Common.No"), isInLine: true, htmlClass: "radiobutton-default ml20", disabled: false)
            </div>
        </div>
        <div class="row" name="BafoSection">
            <div class="col-xs-12 mb35">
                @Html.Partial("EditPartial/DataTableDocsFirm",
            new FirmDocViewModel
            {
                HasLink = false,
                LinkURL = string.Empty,
                Prefix = string.Empty,
                Rows = Model.BAFODocs,
                SubTitle = Localization.GetText("TCP.FirmProcurement.TableSubTitle.BAFO"),
                TableName = "BAFODocs",
                Title = string.Empty,
                IsWinner = false
            })
                @Confluence.InputText("value", "checkEvaluatedFirm", htmlClass: "hide", required: false, dataAttributes: new Dictionary<string, string>() { { "parsley-EvaluatedFirmDocs", "EvaluatedFirmDocs" } })
            </div>
        </div>
    </div>

    <div class="row 30">
        <div class="col-xs-12 mb40">
            @Html.Partial("EditPartial/DatatableDocsFirm",
            new FirmDocViewModel
            {
                HasLink = false,
                LinkURL = string.Empty,
                Prefix = string.Empty,
                Rows = Model.FinancialProposalDocs,
                SubTitle = Localization.GetText("TCP.FirmProcurement.TableSubTitle.FinancialProposalDocuments"),
                TableName = "FinancialProposalDocs",
                Title = Localization.GetText("TCP.FirmProcurement.TableTitle.FinancialProposalDocuments"),
                IsWinner = false
            })
            @Confluence.InputText("valor", "nameHide", htmlClass: "hide", required: false, dataAttributes: new Dictionary<string, string>() { { "parsley-FinancialProposalTab", "[name=FinancialProposalDocs-FirmId]" }, { "parsley-FinancialProposalNon", "[name=FinancialProposalDocs-FirmId]" } })
            @Confluence.InputText("valor2", "nameHideDisq", htmlClass: "hide", required: false, dataAttributes: new Dictionary<string, string>() { { "parsley-FinancialProposalDisqualified", "[name=FinancialProposalDocs-FirmId]" } })
        </div>
    </div>

    @if (Model.Modality != Modality.SingleSourceSelection && Model.Modality != Modality.TaskSingleSourceSelection)
    {
        <div class="row">
            <div class="col-xs-12 mb40">
                @Html.Partial("EditPartial/DatatableDocsSimple",
         new SimpleDocViewModel
        {
            HasLink = false,
            LinkURL = string.Empty,
            Prefix = string.Empty,
            SimpleTable = Model.ScoringDocsTable,
            SubTitle = Localization.GetText("TCP.FirmProcurement.TableSubTitle.ScoringDocuments"),
            TableName = "ScoringDocs",
            Title = Localization.GetText("TCP.FirmProcurement.TableTitle.ScoringDocuments"),

        })
            </div>
        </div>

        <div class="mb15 aligment">
            @Confluence.LabelMainSubTitle(Localization.GetText("TCP.FirmProcurement.TableTitle.FirmScoring"))
        </div>

        <div class="row">
            <div class="col-xs-3">
                @Confluence.LabelsGroup(title: Localization.GetText("TCP.FirmProcurement.Evaluation.FirmScoring.TechnicalScoreWeight"),
                          contentAlways: Confluence.InputNumberText(Model.TechnicalWeight,
                             name: "TechnicalScoreWeight",
                             width: "40%",
                             minValue: "0",
                             maxValue: "99",
                             required: false,
                             dataAttributes: new Dictionary<string, string>() { { "optional-required", "true" } }))
            </div>
            <div class="col-xs-3 financialScoreWeight">
                @Confluence.LabelsGroup(title: Localization.GetText("TCP.FirmProcurement.Evaluation.FirmScoring.FinancialScoreWeight"),
                         contentAlways: Confluence.LabelBold(Model.FinancialWeight.ToString()))
                @Confluence.InputText(Model.FinancialWeight.ToString(), "financialScoringWeight", htmlClass: "hide", required: false)
            </div>
            <div class="col-xs-3">
                @Confluence.LabelsGroup(title: Localization.GetText("TCP.FirmProcurement.Evaluation.FirmScoring.MinimalTechnicalScoreWeight"),
                          contentAlways: Confluence.InputNumberText(Model.MinimalTechnicalWeight,
                             name: "MinimalTechnicalScoreWeight",
                             width: "40%",
                             minValue: "0",
                             maxValue: "99",
                             required: false,
                      dataAttributes: new Dictionary<string, string>() { { "parsley-minimunValue", "[name=TechnicalScoreWeight ]" }, { "optional-required", "true" } }))
            </div>

            <div class="col-xs-12 mt20 totalScore">
                @Html.Partial("EditPartial/DatatableFirmScoring", Model.FirmScoring)
            </div>
        </div>

    }

    <div class="row">
        <div class="col-xs-12 mb60">
            @Confluence.InputCheckbox(Model.IsCertifyScoring, name: "IsCertifyScoring", label: Localization.GetText("TCP.FirmProcurement.CheckboxText.FirmScoring"), disabled: false)
            @Confluence.LabelLinkBlank(text: Localization.GetText("TCP.FirmProcurement.Link.AccessSanctionsList"),
                    name: "accessSanctionsListLink",
                    url: AppParameter.GetText("Template.Site.Url.BEO.Templates.Sanction.List"),
                    htmlClass: "ml20 fontSize13")
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12 mb50">
            @Html.Partial("EditPartial/DataTableDocsSimple",
        new SimpleDocViewModel
        {
            HasLink = true,
            LinkURL = AppParameter.GetText("Template.Site.Url.BEO.Templates"),
            Prefix = string.Empty,
            SimpleTable = Model.CommunicationsRelatedDocsTable,
            SubTitle = Localization.GetText("TCP.FirmProcurement.TableSubTitle.CommunicationsRelatedDocs"),
            TableName = "CommunicationsRelatedDocs",
            Title = Localization.GetText("TCP.FirmProcurement.TableTitle.CommunicationsRelatedDocs")
        })
        </div>
    </div>

    <div class="mb5 aligment">
        @Confluence.LabelMainSubTitle(Localization.GetText("TCP.FirmProcurement.TableTitle.EvaluationChecklist"))
    </div>

    <div class="mb10">
        @Confluence.Label(Localization.GetText("TCP.FirmProcurement.TableSubTitle.EvaluationChecklist"))
    </div>

    <div class="row mb40">
        <div class="col-xs-12">
            @(Html.Checklist("EvaChecklist")
                .Items(Model.Checklist)
                .HeaderItemName(Localization.GetText("TCP.FirmProcurement.TableHeader.ChecklistItem"))
                .HeaderMandatory(Localization.GetText("TCP.FirmProcurement.TableHeader.Mandatory"))
                .HeaderCompleted(Localization.GetText("TCP.FirmProcurement.TableHeader.Completed"))
                .HeaderDateCompleted(Localization.GetText("TCP.FirmProcurement.TableHeader.DateCompleted"))
                .HeaderUser(Localization.GetText("COMMON.User"))
                .ValidationMessageFormat(ValidationMessageFormatEnum.ChecklistItemRed)
                .ValidateOnLoad()
                .Editable()
                .CurrentUser(ViewBag.CurrentUser ?? "")
            )
        </div>
    </div>
</div>


@Html.ScriptBlock(
    @<script type="text/javascript">
        registerCallback(function () {
            function getFunctionShowHide(targetRegion) {
                return
            }

            var modalityScreen = '@Model.Modality';
            var modalityFramework = '@ProcurementModalityEnum.Framework.GetEnumCode()';
            var message = "";
            var load = '@ViewBag.Initial';

            checkShowStatus("IsBAFOResquested", "BafoSection");
            checkShowStatus("IsCertifyClarification", "contentCertifyCheckBox");

            function getFunctionShowHide(targetRegion) {
                return function () {
                    var source = $(this);
                    var contenido = $(targetRegion);
                    if (source.is(':checked')) {
                        contenido.slideDown('fast');
                    }
                    else {
                        contenido.slideUp('fast');
                    }
                };
            }


            $(document).on('click', '[name="IsCertifyClarification"]', function () {
                checkShowStatus("IsCertifyClarification", "contentCertifyCheckBox");
            });

            $(document).on('change', '[name="IsBAFOResquested"]', function () {

                checkShowStatus("IsBAFOResquested", "BafoSection");

                var inputEvaluatedFirmDocs = $('[data-parsley-EvaluatedFirmDocs],[data-fake-EvaluatedFirmDocs]');

                if ($(this).val() == "True") {

                    inputEvaluatedFirmDocs.removeAttr('disabled');

                } else {

                    inputEvaluatedFirmDocs.attr('disabled', 'disabled');

                }

            });

            $(document).on('change', '[name="FirmScoring-TechnicalScoring"]', function () {

                var source = $(this);
                var modalityFrameworkId = '@cmdCollection[ProcurementModalityEnum.Framework].MasterId';
                var modalityId = $('[name="HeaderHiddenModalityId"]').val();

                var minimun = $('[name="MinimalTechnicalScoreWeight"]');
                var winnerScoring = $(this).closest('tr').find('[name="ScoringWinner"]');
                if (modalityId == modalityFrameworkId) {
                    winnerScoring = $(this).closest('tr').find('[name="FirmScoring-Winner"]');
                }

                var financialScoring = $(this).closest('tr').find('[name="FirmScoring-FinancialScoring"]');
                var currencyInput = $(this).closest('tr').find('[name="FirmScoring-CurrencyScore"]');
                var currencyDropDown = $(this).closest('tr').find('#id-FirmScoring-CurrencyScore');
                var file = $(this).closest('tr').find('[name="currencyChange"]');
                var price = $(this).closest('tr').find('[name="FirmScoring-Price"]');
                var status = $(this).closest('tr').find('[name="FirmScoring-StatusId"]');
                var statusDropDown = $(this).closest('tr').find('#id-FirmScoring-StatusId');
                var valueStatus = status.attr('value');

                var disqualifiedStatus = '@ViewBag.discualified';
                var currencyInit = '(select option)';

                var techScoringStr = source.val();
                var minTechScoringStr = minimun.val();

                var minTechScoring = parseInt(minTechScoringStr);
                if (isNaN(minTechScoring)) {
                    minTechScoring = 0;
                }

                var techScoring = parseInt(techScoringStr);
                if (isNaN(techScoring)) {
                    techScoring = 0;
                }

                source.removeClass('bkg-red');
                financialScoring.removeAttr('disabled');

                if (techScoring < minTechScoring && techScoringStr != '') {
                    source.addClass('bkg-red');

                    winnerScoring.attr('disabled', 'disabled');
                    winnerScoring.remove('checked');
                    winnerScoring.prop('checked', false);
                    winnerScoring.removeAttr('checked');

                    financialScoring.val('');
                    financialScoring.attr('disabled', 'disabled');

                    currencyInput.val("");
                    currencyInput.attr('disabled', 'disabled');
                    currencyDropDown.attr('disabled', 'disabled');
                    currencyInput.removeAttr('required');
                    currencyInput.removeAttr('data-optional-required');

                    var dropdown = currencyDropDown.find('span.valueText');
                    dropdown.html(currencyInit);
                    file.addClass('dropdown placeholder w200 widthDrop');

                    price.val('');
                    price.attr('disabled', 'disabled');
                    price.removeAttr('required');
                    price.removeAttr('data-optional-required');

                    selectDropDownItem(status, disqualifiedStatus);
                    status.attr('disabled', 'disabled');
                    statusDropDown.attr('disabled', 'disabled');
                    status.removeAttr('required');
                    status.removeAttr('data-optional-required');
                }
                else {
                    status.removeAttr('disabled');
                    statusDropDown.removeAttr('disabled');
                    status.attr('data-optional-required', true);
                }

                if (techScoringStr == '') {
                    financialScoring.val('');
                    financialScoring.attr('disabled', 'disabled');
                    status.removeAttr('disabled');
                    statusDropDown.removeAttr('disabled');
                    status.attr('data-optional-required', true);
                } else {
                    if (valueStatus == disqualifiedStatus) {
                        financialScoring.val('');
                        financialScoring.attr('disabled', 'disabled');
                    }

                }

                sumaScore(source.closest('tr'));

                if (load != false) {
                    selectionWinnerScore(source.closest('tr'));
                }


            });

            $(document).on('change', '[name="FirmScoring-FinancialScoring"]', function () {

                var source = $(this);
                sumaScore(source.closest('tr'));

                if (load != false) {
                    selectionWinnerScore(source.closest('tr'));
                }
            });

            $(document).on('change', '[name="FirmScoring-CurrencyScore"]', function () {

                var source = $(this);
                var row = source.closest('tr');
                var file = row.find('[name="currencyChange"]');
                var currencyDropDown = row.find('#id-FirmScoring-CurrencyScore');

                var dropdown = currencyDropDown.find('span.valueText');
                if (source.val() != "") {

                    file.removeClass('placeholder');
                }

            });

            $(document).on('change', '[name="MinimalTechnicalScoreWeight"]', function () {

                var source = $(this);
                var techScorings = $('[name="FirmScoring-TechnicalScoring"]');
                techScorings.change();

            });

            $(document).on('change', '[name="TechnicalScoreWeight"]', function () {

                var source = $(this);
                var techScorings = $('[name="FirmScoring-TechnicalScoring"]');
                var finScorings = $('[name="FirmScoring-FinancialScoring"]');

                var minTechScorings = $('[name="MinimalTechnicalScoreWeight"]');
                var finScoring = $('[name="financialScoringWeight"]');
                var finScoringLabel = $('.financialScoreWeight label.labelNormal');

                var techScoreWeightStr = source.val();

                var techScoring = parseInt(techScoreWeightStr);

                if (!isNaN(techScoring)) {
                    minTechScorings.attr('data-v-max', techScoring);
                    minTechScorings.data('vMax', techScoring);
                    minTechScorings.attr('data-max', techScoring);

                    techScorings.attr('data-v-max', techScoring);
                    techScorings.data('vMax', techScoring);
                    techScorings.attr('data-max', techScoring);
                    finScorings.attr('data-v-max', 100 - techScoring);
                    finScorings.data('vMax', 100 - techScoring);
                    finScorings.attr('data-max', 100 - techScoring);

                    finScoringLabel.html(100 - techScoring);
                    finScoring.val(100 - techScoring);

                    techScorings.autoNumeric('destroy');
                    minTechScorings.autoNumeric('destroy');
                    finScorings.autoNumeric('destroy');

                    techScorings.autoNumeric('init');
                    minTechScorings.autoNumeric('init');
                    finScorings.autoNumeric('init');
                }

            });

            window.ParsleyValidator.addValidator('EvaluatedFirmDocs', function (value, requirement) {

                var codeEvaluated = '@ViewBag.evaluated';
                var isBAFO = $("[name=IsBAFOResquested]:checked").val() == 'True';
                var result = true;

                if (isBAFO) {
                    resultFirm = true;

                    var firmsStatusId = $('input[name="FirmScoring-StatusId"]');
                    var firmEvaluatedIds = [];

                    firmsStatusId.each(function (key, item) {
                        if (resultFirm && $(item).val() == codeEvaluated) {
                            var firmId = $(item).closest('tr').attr('data-id');
                            firmEvaluatedIds.push(firmId);
                        }
                    });

                    var bafoFirmDoc = $('#BAFODocs tr:not(.template) [name$="FirmId"]');
                    var bafoDocFirmIds = [];
                    bafoFirmDoc.each(function (key, item) {
                        var firmId = $(item).val();
                        if (bafoDocFirmIds.indexOf(firmId) < 0) {
                            bafoDocFirmIds.push(firmId);
                        }
                    });

                    var notIncludeFIrmId = firmEvaluatedIds.filter(function (ix) {
                        return bafoDocFirmIds.indexOf(ix) < 0;
                    });

                    result = notIncludeFIrmId.length == 0;
                }

                return result;
            })
            .addMessage('en', 'EvaluatedFirmDocs', '@(Localization.GetText("TCP.FirmProcurement.ParsleyValidationMessage.EvaluatedFimrDocs"))');

            window.ChecklistValidator.AddValidator(
                'ReceivedProposalsRequired',
                function (row, selector) {
                    var codeEvaluated = '@ViewBag.evaluated';
                    var codeDisqualified = '@ViewBag.discualified';
                    var isValid = true;

                    var technicalProposalDocs = $('#TechnicalProposalDocs');
                    var financialProposalDocs = $('#FinancialProposalDocs');
                    var tableWinner = $('#FirmScoring');

                    var firmsStatusId = $('input[name="FirmScoring-StatusId"]');
                    var firmStatusEvalIds = [];
                    var firmStatusDisqlIds = [];


                    firmsStatusId.each(function (key, item) {
                        var firmId = $(item).closest('tr').attr('data-id');
                        var value = $(item).val();
                        if (value == codeEvaluated) {
                            firmStatusEvalIds.push(firmId);
                        } else if (value == codeDisqualified) {
                            firmStatusDisqlIds.push(firmId);
                        }
                    });

                    while (isValid && firmStatusEvalIds.length > 0) {
                        var firmId = firmStatusEvalIds.pop();
                        var filterTech = technicalProposalDocs.find('[name$="FirmId"]').filter(function () {
                            var value = $(this).val();
                            return firmId == value;
                        });
                        var filterFinancial = financialProposalDocs.find('[name$="FirmId"]').filter(function () {
                            var value = $(this).val();
                            return firmId == value;
                        });

                        isValid = isValid && (filterTech.length > 0) && (filterFinancial.length > 0);
                    }

                    while (isValid && firmStatusDisqlIds.length > 0) {
                        var firmId = firmStatusDisqlIds.pop();
                        var filterTech = technicalProposalDocs.find('[name$="FirmId"]').filter(function () {
                            var value = $(this).val();
                            return firmId == value;
                        });

                        isValid = isValid && (filterTech.length > 0);
                    }

                    return isValid;
                },
                'Faltan documentos de propuesta.',
                true);

            window.ParsleyValidator.addValidator('FinancialProposalTab', function (value, requirement) {

                var result = true;
                resultFirm = true;
                var codeEvaluated = '@ViewBag.evaluated';

                var firmsStatusId = $('input[name="FirmScoring-StatusId"]');
                var firmStatusEvalIds = [];

                firmsStatusId.each(function (key, item) {
                    if (resultFirm && $(item).val() == codeEvaluated) {
                        var firmId = $(item).closest('tr').attr('data-id');
                        firmStatusEvalIds.push(firmId);
                    }
                });


                var financialProposal = $('#FinancialProposalDocs tr:not(.template) [name$="FirmId"]');
                var financialProposalIds = [];
                financialProposal.each(function (key, item) {
                    var firmId = $(item).val();
                    if (financialProposalIds.indexOf(firmId) < 0) {
                        financialProposalIds.push(firmId);
                    }
                });

                var notIncludeFIrmId = firmStatusEvalIds.filter(function (ix, it) {
                    return financialProposalIds.indexOf(ix) < 0;
                });



                result = notIncludeFIrmId.length == 0;
                return result;

            })
           .addMessage('en', 'FinancialProposalTab', '@(Localization.GetText("TCP.FirmProcurement.ParsleyValidationMessage.Evaluated"))');

            window.ParsleyValidator.addValidator('FinancialProposalDisqualified', function (value, requirement) {

                var isValid = true;
                resultFirm = true;
                var codeDisqualified = '@ViewBag.discualified';

                var firmsStatusId = $('input[name="FirmScoring-StatusId"]');
                var disqualifiedFirmIds = [];

                firmsStatusId.each(function (key, item) {
                    if (resultFirm && $(item).val() == codeDisqualified) {
                        var firmId = $(item).closest('tr').attr('data-id');
                        disqualifiedFirmIds.push(firmId);
                    }
                });


                var financialProposal = $('#FinancialProposalDocs tr:not(.template) [name$="FirmId"]');
                var financialProposalFirmIds = [];
                financialProposal.each(function (key, item) {
                    var firmId = $(item).val();
                    if (financialProposalFirmIds.indexOf(firmId) < 0) {
                        financialProposalFirmIds.push(firmId);
                    }
                });

                var disqualifiedFirmIdsUsed = financialProposalFirmIds.filter(function (ix, it) {
                    return disqualifiedFirmIds.indexOf(ix) >= 0;
                });

                isValid = disqualifiedFirmIdsUsed.length == 0;
                return isValid;

            })
           .addMessage('en', 'FinancialProposalDisqualified', '@(Localization.GetText("TCP.BeoProcurement.Evaluation.FinancialProposal.NoInsertDisqualified"))');

            window.ParsleyValidator.addValidator('TechnicalProposalTab', function (value, requirement) {

                var source = $(requirement);

                var result = true;
                resultFirm = true;
                var codeEvaluated = '@ViewBag.evaluated';
                var codeDisqualified = '@ViewBag.discualified';
                var codeNonResponsive = '@ViewBag.nonResponsive';

                var firmsStatusId = $('input[name="FirmScoring-StatusId"]');
                var firmStatusEvalIds = [];
                var firmStatusDisqlIds = [];

                firmsStatusId.each(function (key, item) {
                    if (resultFirm && $(item).val() == codeEvaluated) {
                        var firmId = $(item).closest('tr').attr('data-id');
                        firmStatusEvalIds.push(firmId);
                    }
                });

                firmsStatusId.each(function (key, item) {
                    if (resultFirm && $(item).val() == codeDisqualified) {
                        var firmId = $(item).closest('tr').attr('data-id');
                        firmStatusDisqlIds.push(firmId);
                    }
                });

                var financialProposal = $('#TechnicalProposalDocs tr:not(.template) [name$="FirmId"]');
                var financialProposalIds = [];
                financialProposal.each(function (key, item) {
                    var firmId = $(item).val();
                    if (financialProposalIds.indexOf(firmId) < 0) {
                        financialProposalIds.push(firmId);
                    }
                });

                var notIncludeFIrmId = firmStatusEvalIds.filter(function (ix, it) {
                    return financialProposalIds.indexOf(ix) < 0;
                });

                var notIncludeFIrmIdDisq = firmStatusDisqlIds.filter(function (ix, it) {
                    return financialProposalIds.indexOf(ix) < 0;
                });

                result = notIncludeFIrmId.length == 0 && notIncludeFIrmIdDisq.length == 0;

                if (notIncludeFIrmId.length == 0 || notIncludeFIrmIdDisq.length == 0) {
                    message = '@(Localization.GetText("TCP.FirmProcurement.ParsleyValidationMessage.EvaluatedDisqualfied"))';
                }

                return result;

            })
            .addMessage('en', 'TechnicalProposalTab', '@(Localization.GetText("TCP.FirmProcurement.ParsleyValidationMessage.EvaluatedDisqualfied"))');


            window.ParsleyValidator.addValidator('FinancialProposalNon', function (value, requirement) {

                var source = $(requirement);

                var result = true;
                resultFirm = true;

                var codeNonResponsive = '@ViewBag.nonResponsive';

                var firmsStatusId = $('input[name="FirmScoring-StatusId"]');
                var firmStatusEvalIds = [];

                firmsStatusId.each(function (key, item) {
                    if (resultFirm && $(item).val() == codeNonResponsive) {
                        var firmId = $(item).closest('tr').attr('data-id');
                        firmStatusEvalIds.push(firmId);
                    }
                });

                var financialProposal = $('#FinancialProposalDocs tr:not(.template) [name$="FirmId"]');
                var financialProposalIds = [];
                financialProposal.each(function (key, item) {
                    var firmId = $(item).val();
                    if (financialProposalIds.indexOf(firmId) < 0) {
                        financialProposalIds.push(firmId);
                    }
                });

                var notIncludeFIrmId = firmStatusEvalIds.filter(function (ix, it) {
                    return financialProposalIds.indexOf(ix) >= 0;
                });

                result = notIncludeFIrmId.length == 0 

                return result;

            })
            .addMessage('en', 'FinancialProposalNon', '@(Localization.GetText("TCP.Evaluation.Documents.NonResponsive.NotAllowed"))');

            window.ParsleyValidator.addValidator('TechnicalProposalDocNonTab', function (value, requirement) {

                var source = $(requirement);

                var result = true;
                resultFirm = true;

                var codeNonResponsive = '@ViewBag.nonResponsive';

                var firmsStatusId = $('input[name="FirmScoring-StatusId"]');
                var firmStatusEvalIds = [];

                firmsStatusId.each(function (key, item) {
                    if (resultFirm && $(item).val() == codeNonResponsive) {
                        var firmId = $(item).closest('tr').attr('data-id');
                        firmStatusEvalIds.push(firmId);
                    }
                });

                var technicalProposal = $('#TechnicalProposalDocs tr:not(.template) [name$="FirmId"]');
                var technicalProposalIds = [];
                technicalProposal.each(function (key, item) {
                    var firmId = $(item).val();
                    if (technicalProposalIds.indexOf(firmId) < 0) {
                        technicalProposalIds.push(firmId);
                    }
                });

                var notIncludeFIrmId = firmStatusEvalIds.filter(function (ix, it) {
                    return technicalProposalIds.indexOf(ix) >= 0;
                });

                result = notIncludeFIrmId.length == 0

                return result;

            })
            .addMessage('en', 'TechnicalProposalDocNonTab', '@(Localization.GetText("TCP.Evaluation.Documents.NonResponsive.NotAllowed"))');

            function sumaScore(tr) {
                var technicalScoring = tr.find('[name="FirmScoring-TechnicalScoring"]');
                var financiaScoring = tr.find('[name="FirmScoring-FinancialScoring"]');
                var totalScoringLabel = tr.find('label.totalScoring');
                var totalScoringInput = tr.find('[name="FirmScoring-TotalScoring"]');

                var numberTechnicalScoring = parseInt(technicalScoring.val());
                var numberFinanciaScoring = parseInt(financiaScoring.val());

                if (isNaN(numberTechnicalScoring)) {
                    numberTechnicalScoring = 0;
                }

                if (isNaN(numberFinanciaScoring)) {
                    numberFinanciaScoring = 0;
                }

                totalScoringInput.val(numberTechnicalScoring + numberFinanciaScoring);
                totalScoringLabel.html(numberTechnicalScoring + numberFinanciaScoring);
            }


            $(document).on('change', '[name="FirmScoring-Winner"]', function () {
                var modalityScreens = '@Model.Modality';
                var framework = '@ProcurementModalityEnum.Framework.GetEnumCode()';

                if (modalityScreens == framework) {
                    var element = $(this);

                    var totalScores = $('tr input[name="FirmScoring-TotalScoring"]');

                    var row = element.closest('tr');
                    var totalScoreStr = row.find('[name="FirmScoring-TotalScoring"]').val();
                    var totalScore = parseInt(totalScoreStr);

                    if (element.is(':checked') == true) {

                        var winnerSelect = getWinnerCheckboxTotalScoreGreater(totalScore);
                        winnerSelect.prop('checked', true);

                    } else {
                        var winnerSelect = getWinnerCheckboxTotalScoreLess(totalScore);
                        winnerSelect.prop('checked', false);
                    }
                }
            });


            $(document).on('change', '[name="FirmScoring-StatusId"]', function () {

                var source = $(this);

                var disqualifiedStatus = '@ViewBag.discualified';
                var evaluatedStatus = '@ViewBag.evaluated';
                var nonCualifiedStatus = '@ViewBag.nonResponsive';
                var currencyInit = '(select option)';

                var row = source.closest('tr');
                var file = row.find('[name="currencyChange"]');

                var price = row.find('[name="FirmScoring-Price"]');
                var minScoringStr = $('[name="MinimalTechnicalScoreWeight"]');

                var winnerScoring = row.find('[name="ScoringWinner"]');
                var currencyInput = row.find('[name="FirmScoring-CurrencyScore"]');
                var currencyDropDown = row.find('#id-FirmScoring-CurrencyScore');
                var techScoring = row.find('[name="FirmScoring-TechnicalScoring"]');
                var finScoring = row.find('[name="FirmScoring-FinancialScoring"]');
                var winner = row.find('[name="FirmScoring-Winner"]');
                var valueStatus = row.find('[name="FirmScoring-StatusId"]').val();
                var totalScoring = row.find('[name="FirmScoring-TotalScoring"]');
                var totalScoringLabel = row.find('label.totalScoring');
                var techScoringVal = parseInt(techScoring.val());
                var minScoringVal = parseInt(minScoringStr.val());

                //We need theses var to validate the checklist when the user change the dropdown status
                var tab = source.closest('.tab-pane');
                var checklist = tab.find('[data-role="checklist"]');
                var checklistData = checklist.data('checklist');

                finScoring.removeAttr('required');
                currencyInput.removeAttr('required');
                source.removeAttr('required');
                techScoring.removeAttr('required');
                price.removeAttr('required');
                totalScoring.removeAttr('required');

                totalScoring.removeAttr('data-optional-required');
                finScoring.removeAttr('data-optional-required');
                currencyInput.removeAttr('data-optional-required');
                source.removeAttr('data-optional-required');
                techScoring.removeAttr('data-optional-required');
                price.removeAttr('data-optional-required');
                finScoring.attr('disabled', 'disabled');

                if (valueStatus == disqualifiedStatus) {

                    finScoring.removeAttr('data-optional-required');
                    currencyInput.removeAttr('data-optional-required');
                    price.removeAttr('data-optional-required');
                    techScoring.removeAttr('data-optional-required');
                    winnerScoring.remove('checked');
                    winnerScoring.prop('checked', false);
                    winner.removeAttr('checked');
                    techScoring.removeAttr('disabled');

                    finScoring.val("");
                    currencyInput.val("");
                    price.val("");
                    var dropdown = currencyDropDown.find('span.valueText');
                    dropdown.html(currencyInit);
                    file.addClass('dropdown placeholder w200 widthDrop');


                    if (techScoring == '') {
                        finScoring.val('');
                        finScoring.attr('disabled', 'disabled');
                    } else {
                        finScoring.attr('disabled', 'disabled');
                    }

                    if (techScoring.val() == "") {
                        techScoring.removeClass('bkg-red');
                    }


                    finScoring.attr('disabled', 'disabled');
                    currencyInput.attr('disabled', 'disabled');
                    currencyDropDown.attr('disabled', 'disabled');
                    price.attr('disabled', 'disabled');
                    winner.attr('disabled', 'disabled');
                    source.attr('data-optional-required', true);

                    if (load != false) {
                        selectionWinnerScore(row);
                    }
                    sumaScore(row);
                    initParsley();
                    destroyParsley();
                    initParsley();
                    destroyParsley();
                }

                if (valueStatus == evaluatedStatus) {

                    finScoring.attr('data-optional-required', true);
                    currencyInput.attr('data-optional-required', true);
                    source.attr('data-optional-required', true);
                    price.attr('data-optional-required', true);
                    techScoring.attr('data-optional-required', true);

                    file.addClass('dropdown w200 widthDrop');

                    if (isNaN(minScoringVal)) {
                        minScoringVal = 0;
                    }

                    if ((techScoringVal >= minScoringVal && techScoringVal != "")) {
                        finScoring.removeAttr('disabled');
                    }

                    if (techScoring.val() == "") {
                        techScoring.removeClass('bkg-red');
                    }


                    winnerScoring.remove('checked');
                    currencyInput.removeAttr('disabled');
                    techScoring.removeAttr('disabled');
                    price.removeAttr('disabled');
                    currencyDropDown.removeAttr('disabled');
                    winner.removeAttr('disabled');
                    if (load != false) {
                        selectionWinnerScore(row);
                    }
                    sumaScore(row);
                    initParsley();
                    destroyParsley();
                    initParsley();
                    destroyParsley();
                }

                if (valueStatus == nonCualifiedStatus) {

                    finScoring.removeAttr('data-optional-required');
                    currencyInput.removeAttr('data-optional-required');
                    price.removeAttr('data-optional-required');
                    techScoring.removeAttr('data-optional-required');
                    winnerScoring.remove('checked');
                    winnerScoring.prop('checked', false);
                    winner.removeAttr('checked');

                    finScoring.val("");
                    totalScoring.val("");
                    totalScoringLabel.html("");
                    techScoring.val("");
                    currencyInput.val("");
                    price.val("");

                    var dropdown = currencyDropDown.find('span.valueText');
                    dropdown.html(currencyInit);
                    file.addClass('dropdown placeholder w200 widthDrop');

                    finScoring.attr('disabled', 'disabled');
                    currencyInput.attr('disabled', 'disabled');
                    currencyDropDown.attr('disabled', 'disabled');
                    techScoring.attr('disabled', 'disabled');
                    price.attr('disabled', 'disabled');
                    winner.attr('disabled', 'disabled');
                    source.attr('data-optional-required', true);

                    if (load != false) {
                        selectionWinnerScore(row);
                    }
                    sumaScore(row);
                    initParsley();
                    destroyParsley();
                    initParsley();
                    destroyParsley();
                }

                if (valueStatus == "") {
                    finScoring.attr('data-optional-required', true);
                    currencyInput.attr('data-optional-required', true);
                    source.attr('data-optional-required', true);
                    price.attr('data-optional-required', true);
                    techScoring.attr('data-optional-required', true);
                    finScoring.attr('disabled', 'disabled');

                    finScoring.val("");
                    techScoring.val("");
                    currencyInput.val("");
                    price.val("");

                    var dropdown = currencyDropDown.find('span.valueText');
                    dropdown.html(currencyInit);
                    file.addClass('dropdown placeholder w200 widthDrop');

                    techScoring.removeClass('bkg-red');

                    winnerScoring.remove('checked');
                    winnerScoring.prop('checked', false);
                    winner.removeAttr('checked');
                    currencyInput.removeAttr('disabled');
                    techScoring.removeAttr('disabled');
                    price.removeAttr('disabled');
                    currencyDropDown.removeAttr('disabled');
                    winner.removeAttr('disabled');

                    if (load != false) {
                        selectionWinnerScore(row);
                    }

                    sumaScore(row);
                    initParsley();
                    destroyParsley();
                    initParsley();
                    destroyParsley();
                }

                //this function is called for validate checklist
                checklistData.Validate(null, false);

            });

            function getWinnerCheckboxTotalScoreGreater(n) {

                var allWinners = $('[name="FirmScoring-Winner"]');
                if (isNaN(n)) {
                    return;
                }

                var greaterWinner = allWinners.filter(function () {
                    var winner = $(this);
                    var tr = winner.closest('tr');
                    var totalScoreStr = tr.find('[name="FirmScoring-TotalScoring"]').val();

                    var totalScore = parseInt(totalScoreStr);

                    if (isNaN(totalScore)) {
                        return false;
                    }

                    return totalScore > n;

                });

                return greaterWinner;
            }

            function getWinnerCheckboxTotalScoreLess(n) {

                var allWinners = $('[name="FirmScoring-Winner"]');
                if (isNaN(n)) {
                    return;
                }

                var greaterWinner = allWinners.filter(function () {
                    var winner = $(this);
                    var tr = winner.closest('tr');
                    var totalScoreStr = tr.find('[name="FirmScoring-TotalScoring"]').val();

                    var totalScore = parseInt(totalScoreStr);

                    if (isNaN(totalScore)) {
                        return false;
                    }

                    return totalScore < n;

                });

                return greaterWinner;
            }


            function selectionWinnerScore(sourceRow, load) {

                var modalityScreens = '@Model.Modality';
                var evaluatedStatus = '@ViewBag.evaluated';
                var framework = '@ProcurementModalityEnum.Framework.GetEnumCode()';

                var valueStatus = sourceRow.find('[name="FirmScoring-StatusId"]').val();

                if (modalityScreens != framework) {

                    var totalScoreStr = $('[name="FirmScoring-TotalScoring"]');
                    var scores = [];
                    var maxScore = 0;

                    totalScoreStr.each(function () {

                        var source = $(this);

                        var scoreTotal = parseInt(source.val());
                        var row = source.closest('tr');
                        var winnerRadioButton = row.find('[name="ScoringWinner"]');
                        var valueStatus = row.find('[name="FirmScoring-StatusId"]').val();

                        if (valueStatus == evaluatedStatus) {
                            if (scoreTotal > maxScore) {

                                maxScore = scoreTotal;
                                scores = [];
                                scores.push(winnerRadioButton);

                            } else if (scoreTotal == maxScore) {
                                scores.push(winnerRadioButton);
                            }
                        }
                    });

                    var allWinners = $('[name="ScoringWinner"]');
                    allWinners.prop('checked', false);
                    var elementFirst = scores.pop();

                    if (elementFirst != null) {
                        elementFirst.prop('checked', true);
                    }



                } else if (modalityScreens == framework) {

                    if (load != false) {
                        selectionWinnerFrameworkModality(sourceRow);
                    }
                }
            }

            function selectionWinnerFrameworkModality(sourceRow) {
                var evaluatedStatus = '@ViewBag.evaluated';
                var valueStatus = sourceRow.find('[name="FirmScoring-StatusId"]').val();

                if (evaluatedStatus == valueStatus) {
                    var totalScoreInputStr = sourceRow.find('[name="FirmScoring-TotalScoring"]');
                    var currentFirmWinners = sourceRow.find('[name="FirmScoring-Winner"]');
                    var totalScoreInput = parseInt(totalScoreInputStr.val());

                    var currentIsWinner = currentFirmWinners.is(':checked');
                    currentFirmWinners.prop('checked', false);

                    var allWinners = $('[name="FirmScoring-Winner"]:checked');
                    var minScoreSelected = allWinners.length == 0 ? 0 : 9999;

                    allWinners.each(function () {
                        var sources = $(allWinners);
                        var row = sources.closest('tr');
                        var totalScoreInput = row.find('[name="FirmScoring-TotalScoring"]');
                        var scoreTotal = parseInt(totalScoreInput.val());

                        if (scoreTotal < minScoreSelected) {
                            minScoreSelected = scoreTotal;
                        }
                    });

                    if (totalScoreInput > minScoreSelected) {
                        currentFirmWinners.prop('checked', true);

                    } else if (totalScoreInput == minScoreSelected) {
                        currentFirmWinners.prop('checked', currentIsWinner);
                    } else {
                        currentFirmWinners.prop('checked', false);
                    }
                }

            }

            function desactivateItemList(item) {
                var items = $(item).find('ul.dropdown-menu');
                items.addClass('dropdown-listItems-selection');

                var source = $(item).find('ul.dropdown-menu li a[dd-value="separator-1"]');
                source.remove();

                items.each(function () {

                    var iteration = $(this);
                    var ulListItems = iteration.find('li').eq(3);
                    ulListItems.addClass('dropdown-separated-list');

                });

            }

            function initialScore() {
                var techScoringsWeight = $('[name="TechnicalScoreWeight"]');
                var minTechScoring = $('[name="MinimalTechnicalScoreWeight"]');

                if (techScoringsWeight.val() == "" && minTechScoring.val() != "") {
                    techScoringsWeight.val(80);
                }

                if (techScoringsWeight.val() != "" && minTechScoring.val() == "") {
                    minTechScoring.val(60);
                }

                if (techScoringsWeight.val() == "" && minTechScoring.val() == "") {
                    techScoringsWeight.val(80);
                    minTechScoring.val(60);
                }
            }

            $(document).ready(function () {

                load = false;
                var isVisible = $('[name="IsCertifyClarification"]').is(':checked');

                var techScoringsWeight = $('[name="TechnicalScoreWeight"]');
                var currencySection = $('div[name="currencyChange"]')
                var financialScorings = $('[name="FirmScoring-FinancialScoring"]');
                var status = $('[name="FirmScoring-StatusId"]');
                var techScorinh = $('[name="FirmScoring-TechnicalScoring"]');

                initialScore();
                desactivateItemList(currencySection);

                if (isVisible) {
                    techScorinh.change();
                    financialScorings.change();
                    status.change();
                }

                techScoringsWeight.attr('data-v-max', 100);
                techScoringsWeight.attr('data-max', 100);
                techScoringsWeight.data('vMax', 100);

                techScoringsWeight.change();

                load = true;

            });

        });

    </script>
)