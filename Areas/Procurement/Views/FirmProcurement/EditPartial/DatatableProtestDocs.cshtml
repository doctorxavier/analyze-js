@using System.Globalization;
@using IDB.MW.Infrastructure.Configuration
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MVCControls.General.Helpers
@using IDB.Presentation.MVC4.Helpers

@using IDB.MW.Application.ProcurementModule.ViewModels.FirmProcurement
@using IDB.MW.Application.BEOProcurementModule.ViewModels.FirmProcurement
@using IDB.Presentation.MVC4.Areas.BEOProcurement.Components
@using IDB.MW.Domain.EntityHelpers

@model ProtestDocViewModel

@{
    if (ViewBag.FirmList == null)
    {
        ViewBag.FirmList = new List<SelectListItem>();
    }

    var tableName = "ProtestDocs";
    int index = default(int);

    var protestTable = Model.Rows.Select(d =>
    {
        var record = new ProtestDocumentRecordModel
        {
            ProtestNumber = d.ProtestNumber,
            ProtestName = Confluence.InputDropDown(
                d.OfferId.ToString(),
                tableName + "[" + index + "].FirmId",
                ViewBag.FirmListWithIDBComunication,
                disabled: false,
                width: "100%"),
            ProtestOrder = d.OrderNumber,
            Author = d.User,
            CreationDate = d.Date,
            DocumentId = d.Id,
            DocumentName = d.Description,
            DocumentNumber = d.DocumentNumber,
            Link = DownloadDocumentHelper.GetDocumentLink(d.DocumentNumber),
        };

        index++;
        return record;
    })
    .ToList()
    .PopulateDataTable();
}

<table class="table-transparent mb10">
    <tbody>
        <tr>
            <td class="table-transparent-text protests-document">
                @Confluence.Label(Localization.GetText("TCP.FirmProcurement.TableSubTitle.Protests"))
            </td>
            <td class="table-transparent-buttons">
                <button class="buttonBlue pull-right"
                         type="button"
                         onclick="showDocumentModalBEO(event)"
                         data-linked-table="@tableName"
                         data-protest-document="true">
                    @Localization.GetText("DM.Add.Document")
                </button>
           </td>
        </tr>
    </tbody>
</table>

<div class="row mb20">
    <div class="col-xs-12">
        @DocumentManagement.DynamicTable(
       tableName,
       tableName,
       protestTable,
       true,
       false,
       deleteTargetFunction: "deleteDocumentBEO",
       loadDefaultModules: false)

        @Confluence.InputText("validate", name: "elements", htmlClass: "hide",
            dataAttributes: new Dictionary<string, string>
            {
                { "parsley-existElement", string.Format("#{0} tbody tr:not(.template)", tableName) }
            })
    </div>
</div>

<div class="hide" id="protestControlsTemplate">
    <div class="protestNameControl">
        @Confluence.InputDropDown(null, null, ViewBag.FirmListWithIDBComunication, disabled: false, width: "100%")
    </div>
    <div class="protestNumber">
        @Model.ProtestNumberBase
    </div>
</div>

@Html.ScriptBlock(
    @<script type="text/javascript">

        function AddIDBDocProtestProc(items, type, filenames, source) {
            var tableName = source.attr('data-linked-table');
            var tableId = '#' + tableName;
            var table = $(tableId);
            var tbody = table.children('tbody');

            var templateMain = tbody.children(':first');
            var templateDetail = tbody.children(':nth(1)');

            var docs = [];
            if (type == 'added') {
                items.forEach(function (item, index, list) {
                    docs.push({ DocumentNumber: item, Description: '' });
                });
            } else {
                docs = items;
            }

            var firstTR = tbody.children(':not(.template):first');

            var numRegs = table.find('tbody tr:not(.template)').length / 2;
            var allNewTR = [];
            docs.forEach(function (elem, index, list) {

                numRegs++;

                var newId = table.GenerateNewId();

                var newTrMain = templateMain.clone(false);
                var newTrDetail = templateDetail.clone(false);

                newTrMain.removeClass('hide');
                newTrMain.removeClass('template');
                newTrMain.attr('data-id', 'new-' + newId);
                if (numRegs % 2 == 0) {
                    newTrMain.addClass('custom-even');
                } else {
                    newTrMain.addClass('custom-odd');
                }
                newTrMain.find('.document-number').text(elem.DocumentNumber);
                newTrMain.find('input[name*="DocumentIDBDoc"]').val(elem.DocumentNumber);
                getNewProtestNumber($(newTrMain), tableName);

                newTrDetail.removeClass('hide');
                newTrDetail.removeClass('template');
                newTrDetail.attr('data-id', 'new-' + newId);
                newTrDetail.find('tr').attr('data-id', 'new-' + newId);
                

                CustomEnable(newTrMain);
                CustomEnable(newTrDetail);
                SelectFirstElementOnDropDown(newTrMain);
                SelectFirstElementOnDropDown(newTrDetail);

                newTrDetail.find('input[name*="Description"]').val(elem.Description);

                var datepickers = newTrMain.find('.hasDatepicker');
                datepickers.removeAttr('id');


                newTrMain.appendTo(tbody);
                newTrDetail.appendTo(tbody);

                allNewTR.push(newTrMain);
                bindHandlers(newTrMain);
                bindHandlers(newTrDetail);
            });

            validateChangeTable(table);

            activePublishFirstRowNegotiation(firstTR, allNewTR);

            initParsley();
            destroyParsley();
            initParsley();
            destroyParsley();
        }

        function activePublishFirstRowNegotiation(initialFirstTR, newTRs) {
            if (newTRs.length == 0) {
                return;
            }

            var defaulPublishUNDB = false;
            var startIndex = 1;

            if (initialFirstTR.length != 0) {
                var publishUNDB = initialFirstTR.find('[name="ContractDocs-IsPublishUNDB"]');
                defaulPublishUNDB = publishUNDB.is(':checked');
                startIndex = 0;
            }

            for (var i = startIndex; i < newTRs.length; i++) {
                var newTr = newTRs[i];
                var publishUNDB = newTr.find('[name="ContractDocs-IsPublishUNDB"]');

                publishUNDB.attr('disabled', 'disabled');
                if (defaulPublishUNDB) {
                    publishUNDB.attr('checked', 'checked');
                    publishUNDB.prop('checked', true);
                }
            }
        }

        function getNewProtestNumber(newTr, tableName) {
            //Obtain the max value for any protestNumber in Protest Table
            var maxNumber = 0;
            $('[name = "' + tableName + '-protestOrder"]').each(
                function (index) {
                    if ($(this).val() > maxNumber) {
                        maxNumber = $(this).val();
                    }
                });

            var newMaxNumber = parseInt(maxNumber) + 1;
            $(newTr).find('[name = "' + tableName + '-protestOrder"]').val(newMaxNumber);

            var pad = function (str, max) {
                str = str.toString();
                return str.length < max ? pad("0" + str, max) : str;
            };

            var textShown = $(newTr).find('.protestNumber').text().trim() + pad(newMaxNumber, 2);

            $(newTr).find('.protestNumber').text(textShown);
        }

        registerCallback(function () {

            $(document).on('click', '[name="addNewProtestDoc"]', function () {
                var source = $(this);

                var modalButton = $('[name="btn-open-popup-add-doc-protest"]');

                modalButton.data('pressed-by', source);
                modalButton.click();

                var modalSelector = modalButton.attr('data-new-modal');
                var modal = $(modalSelector);
                var tab = modal.find('[data-tab-id="add"]');
                tab.click();
            });
        });

    </script>
    )