@using System.Globalization;
@using IDB.MW.Infrastructure.Configuration
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MVCControls.General.Helpers
@using IDB.Presentation.MVC4.Helpers

@using IDB.MW.Application.BEOProcurementModule.ViewModels.FirmProcurement
@using IDB.Presentation.MVC4.Areas.BEOProcurement.Components
@using IDB.Presentation.MVC4.Areas.BEOProcurement.Helper.ConstantHelper
@using IDB.Architecture.ApplicationParameter
@using IDB.MW.Infrastructure.BaseClasses
@using IDB.MW.Application.Core.ViewModels
@using IDB.MW.Application.BEOProcurementModule.Enums


@model NegotiationViewModel
@{
    var cmdCollection = (CustomEnumDictionary<MasterDataViewModel>)ViewBag.CMDCollection;
}

<div>
    @Confluence.InputHidden(
        value: Model.WinnerChanges != null ? Model.WinnerChanges.Justification : string.Empty,
        name: "hiddenJustification")
</div>

@if (Model.Modality != Modality.TaskSingleSourceSelection && Model.Modality != Modality.SingleSourceSelection)
{
    <div class="row">
        <div class="col-xs-9 mb40">
            @Html.Partial("EditPartial/DatatableFinalFirmScorings", Model)
        </div>
    </div>
}

<div class="row">
    <div class="col-xs-12 mb40">
        @Html.Partial("EditPartial/DataTableDocsSimple",
        new SimpleDocViewModel
        {
            HasLink = true,
            LinkURL = AppParameter.GetText("Template.Site.Url.BEO.Templates"),
            Prefix = string.Empty,
            SimpleTable = Model.ComunicationsTable,
            SubTitle = Localization.GetText("TCP.FirmProcurement.TableSubTitle.CommunicationsRelatedDocs"),
            TableName = "NegComunications",
            Title = Localization.GetText("TCP.FirmProcurement.TableTitle.CommunicationsOtherRelatedDocuments")
        })
    </div>
</div>

<div class="row">
    <div class="col-xs-12 aligment mb40">
        @Html.Partial("EditPartial/DatatableDocsFirm",
        new FirmDocViewModel
        {
            HasLink = true,
            LinkURL = AppParameter.GetText("Template.Site.Url.BEO.Templates"),
            Prefix = string.Empty,
            Rows = Model.Negotiations,
            SubTitle = Localization.GetText("TCP.FirmProcurement.TableSubTitle.NegotiationMinutes"),
            TableName = "Negotiations",
            IsWinner = true,
            Title = Localization.GetText("TCP.FirmProcurement.TableTitle.NegotiationMinutes")

        })
    </div>
</div>

@if (Model.Modality != Modality.Framework)
{
    <div class="row mb20">
        <div class="col-xs-12 mb40">
            @Html.Partial("EditPartial/DatatableCommitFunds", Model)
        </div>
        <div class="col-xs-12 mb40">
            @Html.Partial("EditPartial/DatatableCommitFundsCompleted",
        new CommitFundsViewModel
        {
            IsTotal = false,
            Prefix = string.Empty,
            Rows = Model.CommitFundsSecond,
            TableName = "NegCommitFundsSecond"
        })
        </div>
    </div>
}

<div class="row mb20">
    <div class="col-xs-12 mb40">
        @Html.Partial("EditPartial/DatatableContractDates", Model)
    </div>
</div>

@if (Model.Modality != Modality.TaskSingleSourceSelection && Model.Modality != Modality.SingleSourceSelection && Model.Modality != Modality.TaskSimplifiedSelection)
{
    <div class="row">
        <div class="col-xs-12 mb40">
            @Html.Partial("EditPartial/DatatableContractDocs", Model)
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-xs-12 mb40">
            @Html.Partial("EditPartial/DatatableContractDocsSSS", Model)
        </div>
    </div>
}



@if (Model.Modality != Modality.TaskSingleSourceSelection && Model.Modality != Modality.SingleSourceSelection)
{
    <div class="mb20">
        <div class="row">
            <div class="col-xs-12 aligment">
                @Confluence.LabelMainSubTitle(Localization.GetText("TCP.FirmProcurement.TableTitle.Protests"))
                <div class="mb10">
                    @Confluence.Label(Localization.GetText("TCP.FirmProcurement.RadioButtonText.Protests"))
                </div>

                @Confluence.InputRadioButton("True", "HasProtest", Model.HasProtest, label: Localization.GetText("Common.Yes"), isInLine: true, disabled: false)
                @Confluence.InputRadioButton("False", "HasProtest", !Model.HasProtest, label: Localization.GetText("Common.No"), isInLine: true, htmlClass: "radiobutton-default ml20", disabled: false)

            </div>
        </div>

        <div class="row" name="protestSection">
            <div class="col-xs-12">
                @Html.Partial("EditPartial/DatatableProtestDocs", Model.ProtestDocs)
            </div>
            <div class="col-xs-12  mb40">
                @Confluence.InputCheckbox(Model.IsCertifyProtest, name: "IsCertifyProtest", label: Localization.GetText("TCP.FirmProcurement.CheckboxText.Protest"), disabled: false)
            </div>
        </div>
    </div>
}

<div class="mb10 pt30 aligment">
    @Confluence.LabelMainSubTitle(Localization.GetText("TCP.FirmProcurement.TableTitle.NegotiationChecklist"))
</div>

<div class="mb10">
    @Confluence.Label(Localization.GetText("TCP.FirmProcurement.TableSubTitle.ContractChecklist"))
</div>

<div class="row mb40">
    <div class="col-xs-12">
        @(Html.Checklist("NegChecklist")
            .Items(Model.Checklist)
            .HeaderItemName(Localization.GetText("TCP.FirmProcurement.TableHeader.ChecklistItem"))
            .HeaderMandatory(Localization.GetText("TCP.FirmProcurement.TableHeader.Mandatory"))
            .HeaderCompleted(Localization.GetText("TCP.FirmProcurement.TableHeader.Completed"))
            .HeaderDateCompleted(Localization.GetText("TCP.FirmProcurement.TableHeader.DateCompleted"))
            .HeaderUser(Localization.GetText("COMMON.User"))
            .ValidationMessageFormat(ValidationMessageFormatEnum.ChecklistItemRed)
            .ValidateOnLoad()
            .Editable()
            .CurrentUser(ViewBag.CurrentUser ?? "")
        )
    </div>
</div>

@Html.ScriptBlock(
    @<script type="text/javascript">
        registerCallback(function () {
            checkShowStatus("HasProtest", "protestSection");

            function disabledAddDocumentContractAward() {
                var document = $("#ContractDates tbody tr td div.document-number-text");
                var isDocument = $.trim(document.html());
                var isDocumentLink = $.trim(document.find('a').text());
                var buttonAddDocument = $('button.buttonBlue[data-linked-table="ContractDates"]');

                if (isDocument != "" && isDocumentLink != "") {
                    buttonAddDocument.addClass('disabled');
                    buttonAddDocument.attr('disabled', 'disabled');
                } else {
                    buttonAddDocument.removeClass('disabled');
                    buttonAddDocument.removeAttr('disabled');
                }
            }

            disabledAddDocumentContractAward();

            $(document).on('change', '[name="HasProtest"]', function () {
                var inputYes = $('input[name="HasProtest"][value="True"]');
                var inputIsCertifyProtest = $('input[name = "IsCertifyProtest"]');

                if (inputYes.is(':checked')) {
                    inputIsCertifyProtest.attr('required', 'required');

                } else {
                    inputIsCertifyProtest.removeAttr('required');
                }

                checkShowStatus("HasProtest", "protestSection");
            });

            $(document).on('click', '[name="addNewTCFund"]', function () {
                var source = $(this);
                var tableName = source.attr('data-linked-table');
                var table = $(String.format('#{0}', tableName));

                var newId = table.GenerateNewId();

                var trMainTemplate = table.find('tbody tr.template:first');
                var trDetailTemplate = table.find('tbody tr.template:nth(1)');

                var template = table.find('tbody tr.template');

                var newMain = trMainTemplate.clone();
                var newDetail = trDetailTemplate.clone();

                var trsMains = table.find('tbody tr:not(.template):not(.extend-custom):not(.sumAmountsColor)');
                if (trsMains.length % 2 == 0) {
                    newMain.addClass('custom-even');
                } else {
                    newMain.addClass('custom-odd');
                }

                newMain.attr('data-id', String.format('new-{0}', newId));
                newDetail.attr('data-id', String.format('new-{0}', newId));

                newMain.removeClass('template');
                newMain.removeClass('hide');
                newDetail.removeClass('template');
                newDetail.removeClass('hide');

                CustomEnable(newMain);
                CustomEnable(newDetail);

                var inputs = newMain.find('td.operationNumberHidden input, td.totalFundsHidden input');
                inputs.attr('disabled', 'disabled');

                inputs = newDetail.find('[data-role="drop-multiple"][data-bind="false"]');
                inputs.attr('data-bind', 'true');

                table.find('tbody tr:last').before(newMain);
                table.find('tbody tr:last').before(newDetail);

                //Parsley for amounts
                var amountId = newMain.find('[data-parsley-lessOrEqualsAmount]');
                amountId.each(function () {
                    var amount = $(this);
                    var selector = amount.attr('data-parsley-lessOrEqualsAmount');
                    selector = String.format(selector, "new-" + newId);
                    amount.attr('data-parsley-lessOrEqualsAmount', selector);
                });

                bindHandlers(newMain);
                bindHandlers(newDetail);

                validateChangeTable(table);

                destroyParsley();
                initParsley();
                destroyParsley();
                initParsley();
            });


            function desactivateItemList(item) {
                var items = $(item).find('ul.dropdown-menu');
                items.addClass('dropdown-listItems-selection');

                var source = $(item).find('ul.dropdown-menu li a[dd-value="separator-1"]');
                source.remove();

                items.each(function () {

                    var iteration = $(this);
                    var ulListItems = iteration.find('li').eq(3);
                    ulListItems.addClass('dropdown-separated-list');

                });

            }

            $(document).on('click', '[name="addNewAwardDoc"]', function () {
                var source = $(this);

                var modalButton = $('[name="btn-open-popup-add-doc-reoi-award"]');

                modalButton.data('pressed-by', source);
                modalButton.click();

                var modalSelector = modalButton.attr('data-new-modal');
                var modal = $(modalSelector);
                var tab = modal.find('[data-tab-id="add"]');
                tab.click();
            });

            $(document).on('change', '[name="ContractDates-startDate"], [name = "ContractDates-endDate"], [name="ContractDates-contractSignDate"]', function () {
                var modalityTaskSingleId = '@cmdCollection[ProcurementModalityEnum.TaskSingleSourceSelection].MasterId';
                var modalityTaskSimpledId = '@cmdCollection[ProcurementModalityEnum.TaskSimplifiedSelection].MasterId';
                var modalityId = $('[name="HeaderHiddenModalityId"]').val();

                if (modalityId == modalityTaskSimpledId || modalityId == modalityTaskSingleId) {

                    var source = $(this);
                    var trOffer = source.closest('tr');
                    var offer = trOffer.find('input[name="ContractDates-firmId"]');
                    var startDate = trOffer.find('input[name="ContractDates-startDate"]');
                    var endDate = trOffer.find('input[name="ContractDates-endDate"]');
                    var signDate = trOffer.find('input[name="ContractDates-contractSignDate"]');
                    var checkSignDate = source.attr('name') == "ContractDates-contractSignDate";

                    var url = '@Url.Action("CheckDatesFirm", "FirmProcurement", new { area = "Procurement" })';
                    var response = postUrl(url, { offerId: offer.val(), startDate: startDate.val(), endDate: endDate.val(), signDate: signDate.val(), checkSignDate: checkSignDate });

                    response.done(function (data) {
                        if ((data.ErrorMessage != null) && (data.ErrorMessage != "")) {
                            showMessage(data.ErrorMessage);
                        }
                    });
                }
            });

            window.ParsleyValidator.addValidator('contractDocumentsRequired', function (value, requirement) {

                var result = false;
                var document = $('[name="ContractDates-DocumentIDBDoc"]');
                var firms = $('[name="ContractDates-VendorID"]');
                var countDocuments = 0;
                var countFirms = 0;

                document.each(function () {
                    var sourceDocuments = $(this);
                    var value = sourceDocuments.val();
                    if (value != "") {
                        countDocuments++;
                    }

                });

                firms.each(function () {
                    var sourceFirms = $(this);
                    var value = sourceFirms.val();
                    countFirms++;
                });

                if (countDocuments == countFirms) {

                    result = true;
                }

                return result;
            })
           .addMessage('en', 'contractDocumentsRequired', '@(Localization.GetText("TCP.BeoProcurement.Negotiation.ContractDocument.Required"))');

            $(document).ready(function () {

                var source = $('#ContractDates');
                desactivateItemList(source);

            });

        });

        function AddIDBDocREOIAwardProc(items, type, filenames, source) {
            var idModal = $('[data-id-modal-drag-drop="documentModalDragDrop"]').attr('id');
            var idTable = idModal.replace('modal', '');
            var tableName = idTable;
            var tableId = '#' + tableName;
            var table = $(tableId);
            var tbody = table.children('tbody');
            var templateMain = tbody.children(':not(.hide):first');
            var templateDetail = tbody.children(':nth(1)');
            var docs = [];

            var inputHidden = function (val) {
                return $('<input>').attr({
                    type: 'hidden',
                    name: 'ContractDates-DocumentIDBDoc',
                    value: val
                })[0].outerHTML;
            };

            var urlDocument = function (docNumber) {
                var url = '@IDB.MW.Domain.EntityHelpers.DownloadDocumentHelper.GetDocumentLink("")' + docNumber;
                return inputHidden(docNumber) + $("<a>").attr({
                    href: url,
                    target: '_blank'
                }).append(docNumber)[0].outerHTML;
            };

            if (type == 'added') {
                items.forEach(function (item, index, list) {
                    docs.push({
                        DocumentNumber: item.DocumentNumber,
                        Description: item.DocumentName,
                        DocumentName: item.DocumentName,
                        CreatedBy: (item.CreatedBy != null && item.CreatedBy != typeof (undefined)
                            ? item.CreatedBy : '@IDBContext.Current.UserName'),
                        DocumentId: item.DocumentId
                    });
                });
            } else {
                docs = items;
            }

            var firstTR = tbody.children(':not(.template):first');
            var numRegs = table.find('tbody tr:not(.template)').length / 2;
            var allNewTR = [];

            var delRow = function () {
                var row = $("#ContractDates tbody tr");
                var maxDelRow = row.size() - 2;

                $.each(row, function (i, item) {
                    if (i < maxDelRow) {
                        item.remove();
                    }
                });
            };

            docs.forEach(function (elem, index, list) {

                numRegs++;

                var newId = table.GenerateNewId();
                var newTrMain = templateMain.clone(false);
                var newTrDetail = templateDetail.clone(false);

                newTrMain.removeClass('hide');
                newTrMain.removeClass('template');
                newTrMain.attr('data-id', 'new-' + newId);

                if (numRegs % 2 == 0) {
                    newTrMain.addClass('custom-even');
                } else {
                    newTrMain.addClass('custom-odd');
                }

                newTrDetail.removeClass('hide');
                newTrDetail.removeClass('template');
                newTrDetail.attr('data-id', 'new-' + newId);
                newTrDetail.find('tr').attr('data-id', 'new-' + newId);

                CustomEnable(newTrMain);
                CustomEnable(newTrDetail);
                SelectFirstElementOnDropDown(newTrMain);
                SelectFirstElementOnDropDown(newTrDetail);
                newTrMain.find('input[name*="ContractDocs-IsPublishIDB"]').attr('disabled', 'disabled');
                newTrDetail.find('input[name*="Description"]').val(elem.Description);

                var datepickers = newTrMain.find('.hasDatepicker');

                datepickers.removeAttr('id');

                if (tableName !== 'ContractDates') {
                    newTrMain.appendTo(tbody);
                    newTrDetail.appendTo(tbody);
                    allNewTR.push(newTrMain);
                }

                var row = $('table' + tableId + ' tbody tr td');
                var date = function () {
                    var dt = new Date();
                    return dt.getDate() + ' ' +
                           dt.toLocaleString(window.navigator.language,
                           { month: "short" }).replace('.', '') + ' ' + dt.getFullYear();
                };

                row.find('.document-number-text').html(urlDocument(elem.DocumentNumber));
                row.find('.document-name input').val(elem.DocumentName);
                row.find('.document-name').append(elem.DocumentName);

                if (type == 'added') {
                    if (elem.CreatedBy != '' && elem.CreatedBy != undefined) {
                        row.find('.document-user').text(elem.CreatedBy);
                    }
                    row.find('.document-date-text').html(date());
                } else {
                    if (elem.AuthorName != '' && elem.AuthorName != undefined) {
                        row.find('.document-user').text(elem.AuthorName);
                    } else {
                        row.find('.document-user').text('@IDBContext.Current.UserName');
                    }
                    row.find('.document-date-text').html(elem.UsDateParser);
                }

                if (tableName === 'ContractDates') {
                    row.find('[name="ContractDates-DocumentIDBDoc"]').each(function () {
                        $(this).val(elem.DocumentNumber);
                    });
                    row.find('[name="ContractDates-DocumentId"]').val(elem.DocumentId);
                }

                $('button.buttonBlue[data-linked-table="' + tableName + '"]').addClass('disabled');
                $('button.buttonBlue[data-linked-table="' + tableName + '"]').attr('disabled', 'disabled');


                bindHandlers(newTrMain);
                bindHandlers(newTrDetail);
            });

            validateChangeTable(table);
            initParsley();
            destroyParsley();
            initParsley();
            destroyParsley();
        }

    </script>
            )
