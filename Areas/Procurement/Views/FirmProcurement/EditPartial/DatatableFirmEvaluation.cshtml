@using System.Globalization;
@using IDB.MW.Infrastructure.Configuration
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MVCControls.General.Helpers

@using IDB.MW.Application.BEOProcurementModule.ViewModels.FirmProcurement

@model FirmEvaluationViewModel

@{

    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDecimal = appSettings.FormatDecimal;
    var formatDate = appSettings.FormatDate;
    var tableName = "AssociatedTasks";

    var config = Html.RenderDataTable(Model.Evaluation)
        .Name(tableName)
        .AddPrimaryKeyToName(false)
        .PrimaryKey(x => x.Id.ToString(CultureInfo.InvariantCulture))
        .UseDataTableNet(false)
        .UsePageMode(false)
        .Columns(columns =>
        {
            columns.Bound(c => c.Id)
                .Orderable(false)
                .CssClass("")
                .CssHeaderClass("")
                .Header(Localization.GetText(""))
                .HeaderAttribute("style", "")
                .Hidden(true);
            columns.Template(c => Confluence.Label(Localization.GetText(c.Name)))
                .Orderable(false)
                .CssClass("")
                .CssHeaderClass("")
                .Header("")
                .HeaderAttribute("style", "")
                .Hidden(false);
            columns.Template(c => inputEvaluation(c, 5))
                .Orderable(false)
                .CssClass("w50 textalign-center")
                .CssHeaderClass("")
                .Header("")
                .HeaderAttribute("style", "")
                .Hidden(false);
            columns.Template(c => inputEvaluation(c, 4))
                .Orderable(false)
                .CssClass("w50 textalign-center")
                .CssHeaderClass("")
                .Header("")
                .HeaderAttribute("style", "")
                .Hidden(false);
            columns.Template(c => inputEvaluation(c, 3))
                .Orderable(false)
                .CssClass("w50 textalign-center")
                .CssHeaderClass("")
                .Header("")
                .HeaderAttribute("style", "")
                .Hidden(false);
            columns.Template(c => inputEvaluation(c, 2))
                .Orderable(false)
                .CssClass("w50 textalign-center")
                .CssHeaderClass("")
                .Header("")
                .HeaderAttribute("style", "")
                .Hidden(false);
            columns.Template(c => inputEvaluation(c, 1))
                .Orderable(false)
                .CssClass("w50 textalign-center")
                .CssHeaderClass("")
                .Header("")
                .HeaderAttribute("style", "")
                .Hidden(false);
        })
        .RowTemplates(x =>
        {
            x.Create(RowTemplateType.FirstRow, t => valuesRow());
            x.Create(RowTemplateType.LastRow, t => overallPerformance(Model.Evaluation));
        })
    ;
    config.TableClass = "tableNormal";

    config.UseCustomHeader = true;
    config.CustomHeader = (@<thead>
        <tr>
            <th colspan="6">
                <div class="=row">
                    <div class="col-xs-12 mb5 mt5">
                        @Localization.GetText("TCP.FirmProcurement.TableHeader.PerformanceEvaluation")
                    </div>
                    <div class="col-xs-12 mb5">
                        @Localization.GetText("TCP.FirmProcurement.TableSubHeader.PerformanceEvaluation")
                    </div>
                    <div class="col-xs-12 mb5">
                        @Localization.GetText("TCP.FirmProcurement.TableSubHeader.PerformanceEvaluationScale")
                    </div>
                </div>
            </th>
        </tr>
    </thead>);
}

<div class="row mb20">
    <div class="col-xs-12">
        @Html.Partial("Controls/DataTable", config)
    </div>
</div>

@helper inputEvaluation(PerformanceEvaluationViewModel row, int value)
{

    var dataAttributeOptionalRequired = new Dictionary<string, string>() { { "optional-required", "true" } };
    @Confluence.InputRadioButton(
        value: value.ToString(),
        name: string.Format("answer-{0}", row.Id),
        disabled: false,
        isChecked: row.Score == value,
        required: false,
        dataAttributes: dataAttributeOptionalRequired)
}

@helper valuesRow()
{
    <tr>
        <td class="hide"></td>
        <td></td>
        <td class="w50 textalign-center">
            @Confluence.Label("5", htmlClass: "bold textalign-center")
        </td>
        <td class="w50 textalign-center">
            @Confluence.Label("4", htmlClass: "bold textalign-center")
        </td>
        <td class="w50 textalign-center">
            @Confluence.Label("3", htmlClass: "bold textalign-center")
        </td>
        <td class="w50 textalign-center">
            @Confluence.Label("2", htmlClass: "bold textalign-center")
        </td>
        <td class="w50 textalign-center">
            @Confluence.Label("1", htmlClass: "bold textalign-center")
        </td>
    </tr>
}

@helper overallPerformance(List<PerformanceEvaluationViewModel> model)
{
    var average = 0M;
    if (model.Any())
    {
        average = (decimal)model.Average(t => t.Score);
    }
    <tr>
        <td colspan="5" class="textalign-right">
            @Confluence.Label(Localization.GetText("TCP.FirmProcurement.TableOptions.PerformanceEvaluation.OverallPerformance"))
        </td>
        <td class="textalign-center">
            @Confluence.LabelDecimal(average, htmlClass: "bold textalign-center overallPerformance")
        </td>
    </tr>
}
