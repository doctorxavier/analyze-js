@using IDB.MW.Infrastructure.Configuration
@using IDB.MW.Infrastructure.BaseClasses
@using IDB.MW.Application.BEOProcurementModule.ViewModels.FirmProcurement
@using IDB.Presentation.MVC4.Areas.BEOProcurement.Components
@using IDB.MW.Application.Core.ViewModels
@using IDB.MW.Application.BEOProcurementModule.Enums
@using IDB.Architecture.ApplicationParameter
@using IDB.Presentation.MVC4.Areas.BEOProcurement.Helper.ConstantHelper
@using IDB.MW.Application.ProcurementModule.ViewModels.FirmProcurement
@using IDB.MW.Domain.EntityHelpers

@model ContractModificationViewModel

@{
    Model.TableName = "ModificationDocs";

    if (ViewBag.FirmList == null)
    {
        ViewBag.FirmList = new List<SelectListItem>();
    }

    if (ViewBag.ModificationList == null)
    {
        ViewBag.ModificationList = new List<SelectListItem>();
    }

    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDecimal = appSettings.FormatDecimal;
    var formatDate = appSettings.FormatDate;

    var tableNameSpecific = Model.TableName
        + Model.ContractModificationsViewModels.OfferId.ToString();
    var tableName = Model.TableName;
    var optionList = Model.Modality != Modality.Framework ? ViewBag.ModificationList : ViewBag.ModificationFWList;

    int index = default(int);
    System.Data.DataTable modficationTable;

    switch (Model.Modality)
    {
        case Modality.Framework:
            modficationTable = Model.ContractModificationsViewModels.ModificationDocs.Select(d =>
            {
                var record = new ModificationDocumentRecordModel
                {
                    Author = d.User,
                    CreationDate = d.Date,
                    DocumentId = d.Id,
                    DocumentName = d.Description,
                    DocumentNumber = d.DocumentNumber,
                    Link = DownloadDocumentHelper.GetDocumentLink(d.DocumentNumber),
                    ContractId = d.ContractId,
                    ModificationList = ColumnModifications(d, optionList, index),
                    EndDate = ColumnNewEndDate(d, index)
                };

                index++;
                return record;
            }).ToList().PopulateDataTable();
            break;
        default:
            modficationTable = Model.ContractModificationsViewModels.ModificationDocs.Select(d =>
            {
                var record = new ModificationDocumentAmountRecordModel
                {
                    Author = d.User,
                    CreationDate = d.Date,
                    DocumentId = d.Id,
                    DocumentName = d.Description,
                    DocumentNumber = d.DocumentNumber,
                    Link = DownloadDocumentHelper.GetDocumentLink(d.DocumentNumber),
                    ContractId = d.ContractId,
                    ModificationList = ColumnModifications(d, optionList, index),
                    EndDate = ColumnNewEndDate(d, index),
                    ContractTotalAmount = ColumnContractAmount(d, index)
                };

                index++;
                return record;
            }).ToList().PopulateDataTable();
            break;
    }
}

<table class="table-transparent mb10">
    <tbody>
        <tr>
            <td class="table-transparent-text protests-document">
                @Confluence.Label(Localization.GetText("TCP.FirmProcurement.TableSubTitle.ContractModifications"))
                @(new HtmlString("&nbsp"))
                @Confluence.Label(Localization.GetText("TCP.FirmProcurement.UploadDocuments.AnyContractModification"))
            </td>
            <td class="table-transparent-buttons">
                @Confluence.LabelLinkBlank(text: Localization.GetText("TCP.FirmProcurement.Link.ViewTemplates"),
        name: "viewTemplatesLink",
        url: AppParameter.GetText("Template.Site.Url.BEO.Templates"),
        htmlClass: "bold")
            </td>
            <td class="table-transparent-buttons">
                <div class="mb5">
                    @*@Confluence.ButtonBlue(Localization.GetText("Common.Add"), name: "addNewContractModificationCancellationDoc", dataAttributes: new Dictionary<string, string> { { "linked-table", tableNameSpecific } })*@
                    <button class="buttonBlue pull-right"
                            type="button"
                            onclick="showDocumentModalBEO(event)"
                            data-linked-table="@tableNameSpecific"
                            data-contract-modification="true">
                        @Localization.GetText("DM.Add.Document")
                    </button>
                </div>
            </td>
        </tr>
    </tbody>
</table>

<div class="row mb20">
    <div class="col-xs-12">
        @DocumentManagement.DynamicTable(
       tableNameSpecific,
       tableNameSpecific,
       modficationTable,
       true,
       false,
       deleteTargetFunction: "deleteDocumentBEO",
       loadDefaultModules: false)
    </div>
</div>

@{ 
    string templateModification = "templateContractModificacion" + Model.ContractModificationsViewModels.OfferId.ToString();
    string templateAmount = "templateContractAmount" + Model.ContractModificationsViewModels.OfferId.ToString();
    string templateDate = "templateContractEndData" + Model.ContractModificationsViewModels.OfferId.ToString();

}
<div id="@templateModification" class="hide">
    @ColumnModifications(new ModificationDocRowViewModel { Modifications = new List<int> { 0 } }, optionList, 0)
</div>

<div id="@templateAmount" class="hide">
    @ColumnContractAmount(new ModificationDocRowViewModel { Modifications = new List<int> { 0 } }, 0)
</div>

<div id="@templateDate" class="hide">
    @ColumnNewEndDate(new ModificationDocRowViewModel { Modifications = new List<int> { 0 } }, 0)
</div>

@helper ColumnModifications(ModificationDocRowViewModel c, List<MultiDropDownItem> items, int index)
{
    @(Html.MultiDropDown(Model.TableName + Model.ContractModificationsViewModels.OfferId.ToString() + "[" + index + "].ModificationList")
                            .HtmlClass("w100p")
                            .Items(items)
                            .AddAttributes("data-persist-offerId", Model.ContractModificationsViewModels.OfferId.ToString())
                            .AddAttributes("data-parsley-required", "true")
                            .SelectedItems(c.Modifications)
                            .Disable(false)
                            .Initialize(true)
                            .Required())
}

@helper ColumnContractAmount(ModificationDocRowViewModel c, int index)
{
    var datas = new Dictionary<string, string>() { { "persist-offerId", Model.ContractModificationsViewModels.OfferId.ToString() } };

    @Confluence.InputDecimal(
        value: c.NewTotalAmount,
        name: Model.TableName + Model.ContractModificationsViewModels.OfferId.ToString() + "[" + index + "].ContractTotalAmount",
        disabled: checkAvailabitlity(c.Modifications, ViewBag.ModificationCausesEnumValues, ProcurementModificationCauseEnum.Amount),
        required: true,
        dataAttributes: datas,
        width: "100%")
}

@helper ColumnNewEndDate(ModificationDocRowViewModel c, int index)
{
    var datas = new Dictionary<string, string>() { { "persist-offerId", Model.ContractModificationsViewModels.OfferId.ToString() } };

    @Confluence.InputDatePicker(
        value: c.NewEndDate,
        name: Model.TableName + Model.ContractModificationsViewModels.OfferId.ToString() + "[" + index + "].EndDate",
        disabled: checkAvailabitlity(c.Modifications, ViewBag.ModificationCausesEnumValues, ProcurementModificationCauseEnum.Dates),
        required: true,
        dataAttributes: datas,
        htmlClass: "col-min-120",
        width: "100%")
}

@functions {
    static bool checkAvailabitlity(List<int> selectedModifications, CustomEnumDictionary<MasterDataViewModel> dictionary, ProcurementModificationCauseEnum modifEnum)
    {
        var isDisabled = true;

        if (dictionary != null && dictionary.ContainsKey(modifEnum) && dictionary.ContainsKey(ProcurementModificationCauseEnum.Cancellation))
        {
            var itemId = dictionary[modifEnum].MasterId;
            var canelationId = dictionary[ProcurementModificationCauseEnum.Cancellation].MasterId;

            isDisabled = !selectedModifications.Contains(itemId) || selectedModifications.Contains(canelationId);
        }

        return isDisabled;
    }
}