@using System.Globalization;
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MW.Application.ProcurementModule.ViewModels.FirmProcurement
@using IDB.MW.Application.BEOProcurementModule.ViewModels.FirmProcurement
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.Presentation.MVC4.Areas.BEOProcurement.Components
@using IDB.MVCControls.DataTable.Models
@using IDB.MW.Application.BEOProcurementModule.Enums

@using IDB.MW.Application.Core.ViewModels
@using IDB.MW.Infrastructure.BaseClasses

@model ProcurementsByOutputViewModel

@if (Model != null)
{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDollar = appSettings.FormatIntegerDolar;

    var config = Html.RenderDataTable(Model.Procurements)
        .Name("ProcurementList")
        .AddPrimaryKeyToName(false)
        .PrimaryKey(x => x.Id.ToString(CultureInfo.InvariantCulture))
        .UseDataTableNet(false)
        .UsePageMode(false)
        .Columns(columns =>
        {
            columns.Template(ColumnId)
                .Header(Localization.GetText("TCP.FirmProcurement.ProcurementMessage.ID"));
            columns.Template(ColumnStage)
                .Header(Localization.GetText("TCP.FirmProcurement.ProcurementMessage.Stage"));
            columns.Template(ColumnStatus)
                .Header(Localization.GetText("TCP.FirmProcurement.ProcurementMessage.Status"));
            columns.Template(ColumnOriginalEstimate)
                .Header(Localization.GetText("TCP.FirmProcurement.ProcurementMessage.OriginalEstimate"));
            columns.Template(ColumnFinalAmount)
                .Header(Localization.GetText("TCP.FirmProcurement.ProcurementMessage.FinalAmount"));
            columns.Template(ColumnComments)
                .Header(Localization.GetText("TCP.FirmProcurement.ProcurementMessage.Comments"));
        })
    ;
    config.TableClass = "tableNormal";


    <div class="row mb20">
        <div class="col-xs-12">
            @Confluence.Label(Localization.GetText("TCP.FirmProcurement.ProcurementMessage.SeeProcurements"))
        </div>
    </div>

    <div class="row">
        <div class="col-xs-12 font13 outputIndicator">
            @(Confluence.LabelsGroup(
            title: Localization.GetText("TCP.FirmProcurement.ProcurementMessage.OutputIndicator"),
                contentAlways: Model.OutputName,
                asterisk: false)
            )
        </div>
    </div>

    <div class="mb5 aligment">
        @Confluence.LabelMainSubTitle(Localization.GetText("TCP.FirmProcurement.ProcurementMessage.CurrentProcurements"))
    </div>

    <div class="row mb40">
        <div class="col-xs-12">
            @Html.Partial("Controls/DataTable", config)
        </div>
    </div>


    <div class="row">
        <div class="col-xs-12">
            @Confluence.LabelBold(Localization.GetText("TCP.FirmProcurement.ProcurementMessage.IfWishAddProcurement"))
        </div>
    </div>

}

@helper ColumnId(SimpleProcurementRowViewModel row)
{
    @Confluence.LabelLink(row.VisibleId, dataNavigation: Url.Action("Read", "FirmProcurement", new { area = "Procurement", procurementId = row.Id }))
}

@helper ColumnStage(SimpleProcurementRowViewModel row)
{
    @Confluence.LabelGetDropDown(row.StageId.ToString(), ViewBag.StageList)
}

@helper ColumnStatus(SimpleProcurementRowViewModel row)
{
    @Confluence.LabelGetDropDown(row.StatusId.ToString(), ViewBag.StatusList)
}

@helper ColumnOriginalEstimate(SimpleProcurementRowViewModel row)
{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDollar = appSettings.FormatIntegerDolar;
    if (row.OriginalEstimate != 0)
    {
        @FormatHelper.Format(row.OriginalEstimate, formatDollar)
    }
}

@helper ColumnFinalAmount(SimpleProcurementRowViewModel row)
{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDollar = appSettings.FormatIntegerDolar;

    if (row.FinalAmount != 0)
    {
        @FormatHelper.Format(row.FinalAmount, formatDollar)
    }

}

@helper ColumnComments(SimpleProcurementRowViewModel row)
{
    @row.Comments.HtmlEncode()
}