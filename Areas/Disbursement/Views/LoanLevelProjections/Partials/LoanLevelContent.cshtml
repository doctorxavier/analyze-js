@using IDB.MW.Application.FinancialPlanModule.Enums
@using IDB.Presentation.MVC4.Models
@using Newtonsoft.Json
@model IDB.MW.Domain.Models.Disbursement.ProjectedLoanModel

@if (Model.HasServiceError)
{
    @Html.Partial("_mvc_messages", Model)
}
else
{
    <div class="verticalMargin20 col-md-12">
        <div class="col-md-9 pl0">
            @Confluence.Navigation(Confluence.LabelMainTitle(Localization.GetText("Disbursement.Main.DisbursementProjections")),
           Url.Action("Index", new { operationNumber = Model.OperationNumber }))
        </div>

        @Html.Partial("~/Areas/Disbursement/Views/LoanLevelProjections/Partials/Buttons.cshtml", Model)

        @Confluence.LabelTitleGroup(Model.LoanNumber, htmlClass: "col-md-12 pl0 pr0")
    </div>

    <input type="hidden" id="hidModel" data-json="@JsonConvert.SerializeObject(Model, Formatting.None)" data-url-1="@Url.Action("GroupingSection", "LoanLevelProjections")" data-url-2="@Url.Action("ReferenceInformation", "LoanLevelProjections")" data-url-3="@Url.Action("GridProjections", "LoanLevelProjections")" />
    <input type="hidden" id="useRating" value="false" />
    <div id="grouping-section">
        @Html.Partial("~/Areas/Disbursement/Views/LoanLevelProjections/Partials/GroupingSection.cshtml", Model)
    </div>

    @Html.Partial("_mvc_messages", Model)

    <div class="col-md-9 pl0 pt10">
        @Confluence.LabelSubTitleGroup(Localization.GetText("Disbursement.Title.CurrentProjection"))
    </div>

    if (!Model.EditMode)
    {
        if (Model.IsExecution && Html.HasPermission("Disbursement Projections Write") && Model.CurrCode != CurrencyConst.USD)
        {
            <div class="col-md-3 pt5">
                <input type="button" id="disbursement-convert" class="buttonBlue loanEdit floatRight" onclick="convertCurrency(this, '@Model.CurrCode')"
                       value='@Localization.GetText("Disbursement.Convert.Usd")'
                       data-url="@Url.Action("ConvertCurrency", "LoanLevelProjections",  new { area = "Disbursement" })">

                <input type="button" id="back-disbursement-convert" class="buttonBlue loanEdit floatRight hidden" onclick="backToCurrency(this)"
                       value='@Localization.GetText("Disbursement.Convert.Approval")'
                       data-url="@Url.Action("ConvertCurrency", "LoanLevelProjections")">
            </div>
        }

        <div id="grid_projections" class="col-md-12 pl0 pr0">
            @Html.Partial("_GridProjections", Model)
        </div>
    }
    else
    {
        <div class="col-md-3 pt5 hidden">
            @Confluence.ButtonBlue(Localization.GetText("Disbursement.retrieve.financial.plan"), "btnRetriveFinnancial", "retriveFinnancial", dataAttributes: new Dictionary<string, string>() { { "url", Url.Action("RetrieveFinancialData", "LoanLevelProjections", new { operationNumber = Model.OperationNumber, loanNumber = Model.LoanNumber, isExecution = Model.IsExecution }) } }, htmlClass: "pull-right")
        </div>

        <div id="grid_projections_edit" class="col-md-12 pl0 pr0">
            @Html.Partial("_GridProjectForm", (IDB.MW.Domain.Models.Disbursement.IProjectionViewModel)Model)
        </div>
    }
    <div class="col-md-12 mb20">
        <div class="col-md-10">
            @Html.Partial("~/Areas/Disbursement/Views/Shared/DisbursementLegends.cshtml")
        </div>
        @if ((bool)Model.Download)
        {
            <div class="col-md-2 text-right">
                <a title="Export PDF" style="color:white;border-radius:4px;" class="exportdata pdf" href='@(Url.Action("DownloadReportByLonNumber", "LoanLevelProjections", new { area = "Disbursement", format = "pdf", operationNumber = Model.OperationNumber, loanNumber = Model.LoanNumber, fundCode = Model.FundCode, loanTcdNum = Model.LoanTCDNumber, loanProjectNumber = Model.LoanProjectNumber, loanCurrencyCode = Model.LoanCurrencyCode, group = Model.Group}))'></a>
                <a title="Export Excel" style="color:white;border-radius:4px;" class="exportdata excel" href='@(Url.Action("DownloadReportByLonNumber", "LoanLevelProjections", new { area = "Disbursement", format = "xls", operationNumber = Model.OperationNumber, loanNumber = Model.LoanNumber, fundCode = Model.FundCode, loanTcdNum = Model.LoanTCDNumber, loanProjectNumber = Model.LoanProjectNumber, loanCurrencyCode = Model.LoanCurrencyCode, group = Model.Group}))'></a>
            </div>
        }
    </div>

    if (Model.IsExecution)
    {
        @Html.Partial("~/Areas/Disbursement/Views/Shared/_GraphValuesButtons.cshtml")

        var graphModel = new GraphModel
        {
            OperationNumber = Model.OperationNumber,  
            CurrentDisbursementExpirationDate = Model.CurrentDisbursementExpirationDate,         
            ProjectedMonths = Model.ProjectedMonths.Select(x => new ProjectedMonthYearModel
            {
                Month = x.Month,
                Year = x.Year,
                ProjectedAmount = x.ProjectedAmount == decimal.MinValue
                ? default(decimal?) : x.ProjectedAmount
            }).ToList(),
            AllLoansProjectedMonths = Model.AllLoans != null
            && Model.AllLoans.ProjectedMonths != null
            ? Model.AllLoans.ProjectedMonths.Select(x => new ProjectedMonthYearModel
            {
                Month = x.Month,
                Year = x.Year,
                ProjectedAmount = x.ProjectedAmount == decimal.MinValue
                ? default(decimal?) : x.ProjectedAmount
            }).ToList() : new List<ProjectedMonthYearModel>()
        };

        var agreedActualGraphModel = new GraphViewModel
        {
            OperationNumber = Model.OperationNumber,
            ActualAgreed = Model.EdwData,
            Group = null,
            CurrentProjectionMonth = Model.CurrentProjectionMonth,
            CurrentDisbursementExpirationDate = Model.CurrentDisbursementExpirationDate,
            ExchangeRate = Model.ExchangeRate,
            ExchangeRates = null,
            IsExecution = Model.IsExecution,
            LoanNumber = Model.LoanNumber,
            LoanNumbers = null,
            ProjectedYears = Model.ProjectedYears.Select(x =>
                        new ProjectedYearModel
                        {
                            Percentage = x.Percentage,
                            Total = x.Total,
                            Year = x.Year,
                            ProjectedMonths = x.ProjectedMonths.Select(y =>
                            new ProjectedMonthModel
                            {
                                Month = y.Month,
                                ProjectedAmount = y.ProjectedAmount == decimal.MinValue
                                ? default(decimal?) : y.ProjectedAmount
                            }).ToList()
                        }).ToList(),
            ProjectedMonths = Model.ProjectedMonths.Select(x => new ProjectedMonthYearModel
            {
                Month = x.Month,
                Year = x.Year,
                ProjectedAmount = x.ProjectedAmount == decimal.MinValue
                ? default(decimal?) : x.ProjectedAmount
            }).ToList(),
            AllLoansProjectedMonths = Model.AllLoans != null
            && Model.AllLoans.ProjectedMonths != null
            ? Model.AllLoans.ProjectedMonths.Select(x => new ProjectedMonthYearModel
            {
                Month = x.Month,
                Year = x.Year,
                ProjectedAmount = x.ProjectedAmount == decimal.MinValue
                ? default(decimal?) : x.ProjectedAmount
            }).ToList() : new List<ProjectedMonthYearModel>()
        };

        <input type="hidden" id="hidGraph" data-json="@JsonConvert.SerializeObject(graphModel, Formatting.None)" />
        <input type="hidden" id="hidGraphModel" data-json="@JsonConvert.SerializeObject(agreedActualGraphModel, Formatting.None)" />

        <div data-id="graphpanel" class="hide col-md-12 pl0 pr0">
            @Html.Partial("~/Areas/Disbursement/Views/Shared/_ProjectedGraph.cshtml")
            @Html.Partial("~/Areas/Disbursement/Views/Shared/_EarlyAcumulatedGraph.cshtml")
            @Html.Partial("~/Areas/Disbursement/Views/Shared/_MonthlyAcumulatedGraph.cshtml")
        </div>

        <div data-id="valuespanel">
            @{Model.IsOperationLevel = false;}
    @Html.Partial("~/Areas/Disbursement/Views/Shared/_GridReferenceInformationContent.cshtml", (IDB.MW.Domain.Models.Disbursement.IProjectionViewModel)Model)
        </div>
     }

    <div class="mt20 col-md-12">
        @Html.Partial("~/Areas/Disbursement/Views/LoanLevelProjections/Partials/Buttons.cshtml", Model)
    </div>

}



