@model IDB.MW.Domain.Models.Disbursement.OperationLevelProjectionsViewModel
<div class="row col-md-12 grouping-section">
    <div class="col-md-4 groupColumn ">
        <div class="col-md-6">
            @Html.HiddenFor(model => model.Balance)
            @Html.HiddenFor(model => model.Currency)
            @Html.HiddenFor(model => model.OriginalExpirationDate)
            @Html.HiddenFor(model => model.CurrentDisbursementExpirationDate)
            @Confluence.LabelsGroup(
            Localization.GetText("OP.FD.TabContractLevel.UndisbursedBalance"),
       Confluence.LabelDecimal(Model.Balance, true), false)
            
            @Confluence.LabelsGroup(
            Localization.GetText("Disbursement.ApprovalCurrency"),
       Confluence.LabelBold(Model.Currency), false)
        </div>

        <div class="col-md-6">
            <div class="@(!Model.IsExecution ? "hide" : null)">
                @if (!Model.EditMode)
                {
                    @Confluence.LabelsGroup(
Localization.GetText("Disbursement.PlannedCancellation"),
Confluence.LabelDecimal(Model.Cancellations, true), false)

                }
                else
                {
                    <div class="LabelsGroup">
                        <label class="lgTit">@Localization.GetText("Disbursement.PlannedCancellation")</label>
                        <label class="lgCont"><input type="text" value="@Model.Cancellations" class="inputBoder w100 leftAlign boldFont horizontalPadding5 number-only" onblur="disbursement_validate()" id="disbursement_cancellations" /></label>
                    </div>
                }
            </div>
            <div class="@(Model.IsExecution ? "hide" : null)">
                @Confluence.LabelsGroup(
                Localization.GetText("Disbursement.LoanLevelProj.SummaryGrid.RemainBalanceProj"),
                Confluence.LabelDecimal(Model.RemainingBalance, true, htmlClass: "disbursement_remaining_balance"), false)
            </div>
            

        </div>
    </div>
    <input type="hidden" id="disbursement_balance" value="@Model.Balance" />
    @if (Model.IsExecution)
    {
        <div class="col-md-4 groupColumn ">
            <div class="col-md-6">
                @Confluence.LabelsGroup(Localization.GetText("Disbursement.CommonLevelProj.OtherSources"),
                            Confluence.LabelDecimal(Model.OtherFinancingSources), false)
            </div>
            <div class="col-md-6 hide">
                @Confluence.LabelsGroup(Localization.GetText("Disbursement.CommonLevelProj.GovermentBudget"),
                            Confluence.LabelDecimal(Model.GovernmentBudget), false)
            </div>
        </div>
        <div class="col-md-4 groupColumn ">
            <div class="col-md-6">
                @Confluence.LabelsGroup(
        Localization.GetText("Disbursement.OriginalDate"),
        (Model.OriginalExpirationDate.HasValue &&
        (Model.OriginalExpirationDate != DateTime.MaxValue
        && Model.OriginalExpirationDate != DateTime.MinValue))
        ? Confluence.LabelGetDate(Model.OriginalExpirationDate, true)
        : Confluence.LabelBold("---------"), false)

                @Confluence.LabelsGroup(
    Localization.GetText("Disbursement.CurrentDate"),
        (Model.CurrentDisbursementExpirationDate != DateTime.MaxValue
        && Model.CurrentDisbursementExpirationDate != DateTime.MinValue)
        ? Confluence.LabelGetDate(Model.CurrentDisbursementExpirationDate, true)
        : Confluence.LabelBold("---------"), false)
            </div>
            <div class="col-md-6">
                @Confluence.LabelsGroup(
            Localization.GetText("Disbursement.CummulativeExtensions"),
            Confluence.LabelBold(Model.CummulativeExtensions), false)
            </div>
        </div>
    }
    else
    {
        <div class="col-md-4 groupColumn ">
            <div class="col-md-6">
                @Confluence.LabelsGroup(Localization.GetText("Disbursement.CommonLevelProj.OtherSources"),
                            Confluence.LabelDecimal(Model.OtherFinancingSources), false)
            </div>           
        </div>
    }
</div>