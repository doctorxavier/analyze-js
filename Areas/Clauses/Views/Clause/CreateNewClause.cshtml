@model IDB.MW.Domain.Models.Clauses.OperationRelatedModel
@{
    ViewBag.Title = "CreateNewClause";
    bool isOA420 = !(Model.IsOA421Check ?? false);
    bool isPBPOrPBLAndOA420Operation = Model.IsSpecialOperationPBLPBP && isOA420;
}

@section JavaScript {
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/thumbnail/thumbnail.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Clauses/Clause/saveOrRequest.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/moment-with-locales.min.js")"></script>


    <script type="text/javascript">
        $(window).load(function ()
        {
            $("#target").on("submit", function ()
            {
                if ($("#target").valid()) {
                    idbg.lockUi(null, true);
                }
            });

            $("input[type='checkbox']").each(function () {
                var caption = $(this).data("caption");
                $(this).closest("label").children("span").text(caption);
            });

            $(window.parent.document.body).scrollTop(0);
        });

        $(document).ready(function () {
            $(document).on('click', 'a[title="Cancel"], a.tipo1', function (){
                idbg.lockUi(null, true);
            });
            top.$("iframe[name=someFrame]").css("height", "100%");
        });

        var OtherP_421 = "@ViewData["OtherP_421"]";
        var IsOA421Check = "@Model.IsOA421Check";

        var hasTemplate = @(Model.HasTemplate.ToString().ToLower()); 

        var isPBPOrPBLAndOA420Operation = @(isPBPOrPBLAndOA420Operation.ToString().ToLower());

        var cmdNoApplyTrenchClauseId = "@Model.cmdTrenchClauseId";
    </script>
}

<style>
    .btn {
        display: inline-block;
        padding: 6px 12px;
        margin-bottom: 0;
        font-size: 14px;
        font-weight: 400;
        line-height: 1.42857143;
        white-space: nowrap;
        vertical-align: middle;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        background-image: none;
        border: 1px solid transparent;
        border-radius: 4px;
    }
    
    .w470px{
        width: 470px;
    }
</style>

@section CSS{
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/Risks/esmartGeneral.css")" />
    <link rel="stylesheet" type="text/css" 
        href="@Url.Content("~/Content/Modules/Clauses/clauses.css")" />
}

<section class="central clauses-create-new-clause">
    <h2 class="hide">Seccion central de Contenido</h2>
    <div class="mod_contenido_central contracts_and_clauses">
        @using (Html.BeginForm("CreateNewClause", "Clause", FormMethod.Post, new { area = "Clauses", id = "target" }))
        { 
            @Html.Hidden("dateForDependencyListforValidation", Json.Encode(Model.DateForDependencyListforValidation))
            @Html.Hidden("dependencyDirectionListValidation", Json.Encode(Model.DependencyDirectionListValidation))
            @Html.Hidden("AfterDirection", @Localization.GetText("After"));
            @Html.Hidden("BeforeDirection", @Localization.GetText("Before"));
            @Html.Hidden("dateAutomaticExpiration", Model.AutomaticExpirationForCLOtherContractCondPrec);
            @Html.HiddenFor(x => x.IncludeFinancialStatements);
            @Html.HiddenFor(x => x.Contracts[0].CurrentDisbursementExpirationDate, new Dictionary<string, Object> { { "id", "currentDisbursementExpirationDate" }, { "data_val", "false" } })
            @Html.HiddenFor(x => x.Contracts[0].Executor, new Dictionary<string, Object> { { "id", "executingAgency" }, { "data_val", "false" } })
            @Html.HiddenFor(x => x.Contracts[0].SignatureDate, new Dictionary<string, Object> { { "id", "signatureDate" }, { "data_val", "false" } })
            @Html.HiddenFor(x => x.Contracts[0].LegalEffectivenessDate, new Dictionary<string, Object> { { "id", "legalEffectivenessDate" }, { "data_val", "false" } })
            @*
            @Html.HiddenFor(x => x.Contracts[0].LastDisbursementDate, new Dictionary<string, Object> { { "id", "lastDisbursementDate" }, { "data_val", "false" } })
            *@
            @Html.HiddenFor(x => x.OperationId, new { data_val = "false" })
            @Html.HiddenFor(x => x.mainOperationNumber, new { data_val = "false" })
            @Html.HiddenFor(x => x.OperationNumber, new { data_val = "false" })
            @Html.HiddenFor(x => x.isParent, new { data_val = "false" })
            @Html.HiddenFor(x => x.OperationNameEn, new { data_val = "false" })
            @Html.HiddenFor(x => x.OperationNameEs, new { data_val = "false" })
            @Html.HiddenFor(x => x.OperationNameFr, new { data_val = "false" })
            @Html.HiddenFor(x => x.OperationNamePt, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].ContractId, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].ContractNumber, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].ContractClauseStatId, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].OriginalExpirationDate, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].UpdateLMSStatus, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].EligibilityDate, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseId, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseIndividualId, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].StatusId, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].Suffix, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].UpdateLMSStatus, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].IsDeleted, new { data_val = "false" })
            @Html.HiddenFor(x => x.Contracts[0].LmsTypeId, new { data_val = "false" })

            @Html.Hidden("ExpirationFromDependencyId", @ViewData["ExpirationFromDependencyId"]);
            @Html.Hidden("ExpirationToDependencyId", @ViewData["ExpirationToDependencyId"]);
            @Html.Hidden("FromShift", @ViewData["FromShift"]);
            @Html.Hidden("ToShift", @ViewData["ToShift"]);
            @Html.Hidden("ClauseId", @ViewData["ClauseId"]);

            <fieldset>
                <h3 class="headingh2">
                    @if ((bool)ViewBag.isTCOperation && ViewBag.TypeBank)
                    {
                        <a href="@(Url.Action("Index", "Contracts", new { area = "Clauses", operationNumber = Model.mainOperationNumber }))"
                           title="@Localization.GetText("CL.ClausesAndConditions")" class="tipo1">@Localization.GetText("CL.ClausesAndConditions")</a>
                    }
                    else
                    {
                        <a href="@(Url.Action("Index", "Contracts", new { area = "Clauses", operationNumber = Model.mainOperationNumber }))"
                           title="@Localization.GetText("CL.ContractsClauses")" class="tipo1">@Localization.GetText("CL.ContractsClauses")</a>
                    }                    
                </h3>
                <div class="editingButtonsEdit">
                    <a class="btn-secondary" href="@(Url.Action("Index", "Contracts", new { area = "Clauses", operationNumber = Model.mainOperationNumber }))" title="@Localization.GetText("Cancel")">@Localization.GetText("Cancel")</a>
                    <label for="Save">
                        <input type="submit"  class="btn-primary_2 save" value="@Localization.GetText("Save")" id="Save">
                    </label>
                </div>
                <div class="desheadingh3">
                    <p class="title">
                        @Model.OperationNumber <span class="draft">

                            @foreach (var masterData in Model.ListContractStatus)
                            {
                                if (masterData.ConvergenceMasterDataId == @Model.Contracts[0].ContractClauseStatId)
                                {
                                    @Localization.GetText(masterData.NameEn)
                                    break;
                                }
                            }
                        </span>
                        @if (Model.Contracts[0].LegalEffectivenessDate.HasValue && Model.Contracts[0].CurrentDisbursementExpirationDate.HasValue)
                        {
                            @String.Format("{0:dd MMM yyy}", Model.Contracts[0].LegalEffectivenessDate)<span class="titleTo"> @Localization.GetText("to") </span>@String.Format("{0:dd MMM yyy}", Model.Contracts[0].CurrentDisbursementExpirationDate)
                        }
                    </p>
                </div>

                @if ((bool)ViewBag.isTCOperation && ViewBag.TypeBank)
                {
                    <h4 class="headingh3"> @Localization.GetText("CL.NewCondition")</h4>
                }
                else
                {
                    <h4 class="headingh3"> @Localization.GetText("New Clause")</h4>
                }
                
                <div class="operationData">
                    <div class="custom operationData">
                        <label class=" editLabel input" for="number">
                            <span class="dataTitle inputTitle">@Localization.GetText("Number")<span class="asteriscoRojo">*</span></span>
                            
                            @if ((bool)ViewBag.isTCOperation && ViewBag.TypeBank)
                            {
                                @Html.TextBoxFor(x => x.Contracts[0].Clauses[0].ClauseNumber, new Dictionary<string, Object>
                            {
                               { "class", "input normal" },
                               { "id", "number" },
                               { "name", "number" },
                               { "placeholder", Localization.GetText("CL.ConditionNumber") },
                           })
                            }
                            else
                            {
                                @Html.TextBoxFor(x => x.Contracts[0].Clauses[0].ClauseNumber, new Dictionary<string, Object>
                            {
                               { "class", "input normal" },
                               { "id", "number" },
                               { "name", "number" },
                               { "placeholder", Localization.GetText("Clause Number") },
                            })
                            }
                            @{Html.ValidateFor(x => x.Contracts[0].Clauses[0].ClauseNumber);}
                        </label>
                        <label for="select">
                            @if (!Model.IncludeFinancialStatements)
                            {
                                <input type="button" class="btn-primary lnkModal" value="@Localization.GetText("Template")"
                                       title="@Localization.GetText("Template")" data-title=" @Localization.GetText("Template")"
                                       data-route="@(Url.Action("CreateClauseFromTemplate", "Clause", new
                                       {
                                           area = "Clauses",
                                           operationId = Model.OperationId,
                                           contractId = Model.Contracts[0].ContractId,
                                           mainOperationNumber = Model.mainOperationNumber,
                                           includeFinancialStatements = Model.IncludeFinancialStatements
                                       }))">
                            }
                        </label>
                    </div>
                    <div class="operationData dropDown">
                        <ul class="optionList" style="width: 210%;">
                            <li class="small">
                                <span class="dataTitle inputTitle">
                                    @Localization.GetText("Relation with contracts")
                                </span>
                                @Html.DropDownListFor(x =>
                                    x.Contracts[0].Clauses[0].ContractRelationId,
                                    (List<SelectListItem>)ViewData["ContractRelationQuery"],
                                    new { @class = "optionSelect" })
                            </li>
                        </ul>
                    </div>
                </div>

                <div class="operationData">
                    <div class="operationData dropDown" id="click_me">
                        <ul class="optionList">
                            <li class="small">
                                <span class="dataTitle inputTitle"> @Localization.GetText("Instances of the clause")</span>
                                <select class="optionSelect" name="@Localization.GetText("Instances of the clause")"
                                        id="instancesOfClause" onchange="getvalue(this)">
                                    <option value="Single" @Model.Contracts[0].Clauses[0].Frequency=0>@Localization.GetText("Single")
                                    </option>
                                    <option value="Multiple"
                                        @if (@Model.Contracts[0].Clauses[0].Frequency > 0 || Model.IncludeFinancialStatements)
                                        {
                                            <text>selected="selected"</text>
                                        }
                                        >@Localization.GetText("Multiple")
                                    </option>
                                </select>
                            </li>
                        </ul>
                    </div>
                    <div>
                        <label id="labelForOtherDisbursement"class="normalText">
                                   @Localization.GetText("CL.OtherPrecedingFirstDisbursement")
                        </label>
                    </div>
                   
                    <div class="custom operationData months" id="div_x">
                        <span class="normalText"> @Localization.GetText("each") </span>
                        <label class=" editLabel input" for="eachMonths">
                            @Html.TextBoxFor(x => x.Contracts[0].Clauses[0].Frequency,
                                new Dictionary<string, Object>
                                {
                                    { "class", "input normal numberOnlyAll" },
                                    { "id", "eachMonths" },
                                    { "name", "each Months" },
                                    { "maxlength", "4" }
                                })
                            @{Html.ValidateFor(x => x.Contracts[0].Clauses[0].Frequency);}
                        </label>
                        <span class="normalText"> @Localization.GetText("Months").</span>
                    </div>
                </div>
                <div class="operationData">
                    <span class="expirationDate"> @Localization.GetText("CL.ExpirationDate")</span>
                </div>
                <div class="operationData fromDateDependency">
                    <div class="custom operationData fromTo">
                        <div class="fromToLeft">
                            <span class="fromToText"> @Localization.GetText("From")</span>
                        </div>
                        <div class="fromToRight">
                            <label id="radioBtnFromDate" for="radio1" class="editLabel radioButton" onclick="getRa(this);">
                                @Html.RadioButtonFor(x => x.Contracts[0].Clauses[0].isFromDependencyDate, "false", new Dictionary<string, Object> { { "id", "radio1" }, { "style", "display:none;" }, { "name", "radio1" }, { "class", "hidden-field" } })
                                <span class="custom radio" id="getdate"> @Localization.GetText("Date")</span>
                            </label>

                            <label id="radioBtnFromDependency" for="radio2" class="editLabel radioButton" onclick="getRadioValue(this);">
                                @Html.RadioButtonFor(x => x.Contracts[0].Clauses[0].isFromDependencyDate, "true", new Dictionary<string, Object> { { "id", "radio2" }, { "style", "display:none;" }, { "name", "radio2" }, { "class", "hidden-field" } })
                                <span class="custom radio" id="getDependency"> @Localization.GetText("Dependency")</span>
                            </label>
                        </div>
                    </div>
                </div>

                <div class="operationData fromDateDependency" id="muestradate">
                    <div class="fromToRight">
                        <div class="operationData datePicker fromTo">
                            <div class="dateSelect">
                                <label for="datepicker09">
                                    <span class="hide">Datepicker</span>
                                    @Html.TextBoxFor(x => x.Contracts[0].Clauses[0].ExpirationFrom, "{0:dd MMM yyyy}", new Dictionary<string, Object> { { "id", "datePicker09" }, { "class", "datepicker" }, { "name", "datePicker09" }, { "placeholder", "DD MMM YYYY" }, { "style", "display:block;" } })
                                    @{Html.ValidateFor(x => x.Contracts[0].Clauses[0].ExpirationFrom);}
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="operationData fromDateDependency" id="muestratodo">
                    <div class="fromToRight">
                        <div class="operationData dropDown fromTo">
                            <div class="fromToRight">
                                <ul class="optionList">
                                    <li class="small">
                                        @Html.DropDownListFor(x => x.Contracts[0].Clauses[0].ExpirationFromDependencyId, new SelectList(Model.dateForDependencyList, "Value", "Text", @Model.Contracts[0].Clauses[0].ExpirationFromDependencyId), new Dictionary<string, Object> { { "class", "optionSelect" }, { "id", "expirationFromDependencyId" } })
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <div class="custom operationData monthsDirection">
                            <span class="normalText"> @Localization.GetText("Month") </span>
                            <label class=" editLabel input" for="monthsDirection">
                                <span class="hide"> @Localization.GetText("each months")</span>
                                @Html.TextBoxFor(x => x.Contracts[0].Clauses[0].FromShift, new Dictionary<string, Object> { { "class", "input normal" }, { "name", "monthsDirection" }, { "id", "monthsDirectionFrom" } })
                                @{Html.ValidateFor(x => x.Contracts[0].Clauses[0].FromShift);}
                            </label>
                            <span class="normalText"> @Localization.GetText("Direction")</span>
                        </div>

                        <div class="operationData dropDown">
                            <ul class="optionList">
                                <li class="small">
                                    <select id="fromDependencyDirection" class="optionSelect" name="fromDependencyDirection">
                                        <option value="After" selected> @Localization.GetText("After")</option>
                                        <option value="Before"> @Localization.GetText("Before")</option>
                                    </select>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

                <div class="operationData">
                    <div class="custom operationData fromTo clDisburment">
                        <div class="fromToLeft">
                            <span class="fromToText fromToTextTo"> @Localization.GetText("To")</span>
                        </div>
                        <div class="fromToRight">
                            <label id="radioBtnToDate" for="radio3" class="editLabel radioButton" onclick="getRe(this);">
                                @Html.RadioButtonFor(x => x.Contracts[0].Clauses[0].isToDependencyDate, "false", new Dictionary<string, Object> { { "id", "radio3" }, { "style", "display:none;" }, { "name", "radio3" }, { "class", "hidden-field" } })
                                <span class="custom radio" id="getdatedown"> @Localization.GetText("Date")</span>
                            </label>
                            <label id="radioBtnToDependency" for="radio4" class="editLabel radioButton" onclick="getRadioValue1(this);">
                                @Html.RadioButtonFor(x => x.Contracts[0].Clauses[0].isToDependencyDate, "true", new Dictionary<string, Object> { { "id", "radio4" }, { "style", "display:none;" }, { "name", "radio4" }, { "class", "hidden-field" } })
                                <span class="custom radio" id="getDependencydown"> @Localization.GetText("Dependency")</span>
                            </label>
                        </div>
                    </div>
                </div>

                @*div para el datepicker*@
                <div class="operationData" id="muestratododown">
                    <div class="fromToRight">
                        <div class="operationData datePicker fromTo">
                            <div class="dateSelect">
                                <label class="input" for="datepicker09">
                                    @Html.TextBoxFor(x => x.Contracts[0].Clauses[0].ExpirationTo, "{0:dd MMM yyyy}", new Dictionary<string, Object> { { "id", "datePicker10" }, { "class", "datepicker" }, { "name", "datePicker10" }, { "placeholder", "DD MMM YYYY" } })
                                    @{Html.ValidateFor(x => x.Contracts[0].Clauses[0].ExpirationTo);}
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="operationData" id="muestradatedown">
                    @*DIV para dependency*@
                    <div class="fromToRight">
                        <div class="operationData dropDown fromTo">
                            <div class="fromToRight">
                                <ul class="optionList">
                                    <li class="small">
                                        @Html.DropDownListFor(x => x.Contracts[0].Clauses[0].ExpirationToDependencyId, new SelectList(Model.dateForDependencyList, "Value", "Text", @Model.Contracts[0].Clauses[0].ExpirationToDependencyId), new Dictionary<string, Object> { { "class", "optionSelect" }, { "id", "expirationToDependencyId" } })
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <div class="custom operationData monthsDirection">
                            <span class="normalText"> @Localization.GetText("Month") </span>
                            <label class=" editLabel input" for="monthsDirection">
                                <span class="hide"> @Localization.GetText("each months")</span>
                                @Html.TextBoxFor(x => x.Contracts[0].Clauses[0].ToShift, new Dictionary<string, Object> { { "class", "input normal numberOnlyAll" }, { "name", "monthsDirection" }, { "id", "monthsDirectionTo" }, { "maxlength", "4" } })
                                @{Html.ValidateFor(x => x.Contracts[0].Clauses[0].ToShift);}
                            </label>
                            <span class="normalText"> @Localization.GetText("Direction")</span>
                        </div>

                        <div class="operationData dropDown">
                            <ul class="optionList">
                                <li class="small">
                                    <select class="optionSelect" id="toDependencyDirection">
                                        <option value="After" selected> @Localization.GetText("After")</option>
                                        <option value="Before"> @Localization.GetText("Before")</option>
                                    </select>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <br>
                <br>
                
                <div class="operationData">
                    <div class="operationData dropDown downPart" id="divCategory" data-route="@(Url.Action("EditDropdownForClauseType", "Clause", new { area = "Clauses" }))">
                        <ul class="optionList">
                            <li class="small">
                                <span class="dataTitle inputTitle">@Localization.GetText("Category")<span class="asteriscoRojo">*</span></span>
                                @Html.DropDownListFor(x => x.Contracts[0].Clauses[0].CategoryId,
                                    new SelectList(Model.ListClauseCategory2, "Value", "Text", Model.Contracts[0].Clauses[0].CategoryId),
                                    new Dictionary<string, Object> 
                                        { { "id", "dropdownForCategory" }, 
                                        { "class", "optionSelect" } })
                            </li>
                        </ul>
                    </div>
                    <div class="operationData dropDown downPart">
                        <ul class="optionList">
                            <li class="small">
                                <span class="dataTitle inputTitle">@Localization.GetText("Type")<span class="asteriscoRojo">*</span></span>
                                @Html.DropDownListFor(x => x.Contracts[0].Clauses[0].ClauseTypeId,
                                    new SelectList(Model.ListClauseType2, 
                                        "Value", 
                                        "Text", 
                                        Model.Contracts[0].Clauses[0].ClauseTypeId), 
                                    new Dictionary<string, Object> { { "id", "dropdownForType" }, 
                                        { "class", "optionSelect" } })
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="operationData">
                    <div class="operationData dropDown downPart marginRight3">
                        <ul class="optionList">
                            <li class="small">
                                <span class="dataTitle inputTitle">@Localization.GetText("Location")<span class="asteriscoRojo">*</span></span>
                                @Html.DropDownListFor(x => x.Contracts[0].Clauses[0].LocationId, new SelectList(Model.ListClauseLocation2, "Value", "Text", Model.Contracts[0].Clauses[0].LocationId), new Dictionary<string, Object> { { "class", "optionSelect" } })
                                @{Html.ValidateFor(x => x.Contracts[0].Clauses[0].LocationId);}
                                
                            </li>
                        </ul>
                    </div>
                    <div class="custom operationData ">
                        <label class="editLabel paddingTop_label" for="specialcause">
                            @*@Html.CheckBoxFor(x => x.Contracts[0].Clauses[0].IsSpecial, new Dictionary<string, Object> { { "id", "specialcause" }, { "name", "specialcause" }, { "style", "display:none" }, { "data-caption", Localization.GetText("Special Clause Class") } })<span>@Localization.GetText("CL.SpecialClauseClass")</span>*@
                            
                            @if ((bool)ViewBag.isTCOperation && ViewBag.TypeBank)
                            {
                                @Html.CheckBoxFor(x => x.Contracts[0].Clauses[0].IsSpecial, new Dictionary<string, Object> { { "id", "specialcause" }, { "name", "specialcause" }, { "style", "display:none" }, { "data-caption", Localization.GetText("CL.SpecialConditionClass") } })
                            }
                            else
                            {
                                @Html.CheckBoxFor(x => x.Contracts[0].Clauses[0].IsSpecial, new Dictionary<string, Object> { { "id", "specialcause" }, { "name", "specialcause" }, { "style", "display:none" }, { "data-caption", Localization.GetText("Special Clause Class") } })
                            }
                        </label>                        
                    </div>
                </div>
                <div class="operationData">
                    <div class="custom">
                        <div class="w470px">
                        <label class="editLabel input" for="Desciption">
                            <span class="dataTitle inputTitle">@Localization.GetText("Description")
                            <span class="asteriscoRojo">*</span></span>
                            
                            @if ((bool)ViewBag.isTCOperation && ViewBag.TypeBank)
                            {
                                @Html.TextAreaFor(x => x.Contracts[0].Clauses[0].Description,
                                    new Dictionary<string, Object>
                                    {
                                        { "class", "input normal w470px" },
                                        { "name", "Description" },
                                        { "id", "Description" },
                                        { "cols", "55" },
                                        { "rows", "3" },
                                        { "placeholder", Localization.GetText("CL.SpecialConditionClass") }
                                    })
                            }
                            else
                            {
                                @Html.TextAreaFor(x => x.Contracts[0].Clauses[0].Description,
                                    new Dictionary<string, Object>
                                    {
                                        { "class", "input normal w470px" },
                                        { "name", "Description" },
                                        { "id", "Description" },
                                        { "cols", "55" },
                                        { "rows", "3" },
                                        { "placeholder", Localization.GetText("Clause Description") }
                                    })
                            }
                            @{Html.ValidateFor(x => x.Contracts[0].Clauses[0].Description);}
                        </label>
                        </div>
                    </div>
                    @if (Model.IsSpecialOperationPBLPBP && isOA420)
                      {
                          <div class="operationData dropDown downPart marginRight3">
                            <ul class="optionList">
                                <li class="small">
                                    <p class="dataTitle inputTitle">@Localization.GetText("CL.Trench")</p>
                                    @Html.DropDownListFor(x => x.Contracts[0].Clauses[0].TrenchId,
                                        new SelectList(
                                            Model.ListTrench,
                                            "Value",
                                            "Text", 
                                            Model.Contracts[0].Clauses[0].TrenchId),
                                        new Dictionary<string, Object> { { "class", "optionSelect" }, { "id", "Trench" } })
                                </li>
                            </ul>
                        </div>
                      }
                    
                    
                </div>
                <div class="editingButtonsEdit">
                    <a class="btn-secondary" href="@(Url.Action("Index", "Contracts", new { area = "Clauses", operationNumber = Model.mainOperationNumber }))" title="@Localization.GetText("Cancel")">@Localization.GetText("Cancel")</a>
                    <label for="Save2">
                        <input type="submit" class="btn-primary_2 save" value="@Localization.GetText("Save")" id="Save1">
                    </label>
                </div>
            </fieldset>
        }

    </div>

    <div class="hide" id="AdvTemplate" data-title="@Localization.GetText("Warning")">
        <div class=" padding20 popUpBody">
            <div class="marginBottom2">
                <div>
                   @Html.Raw(Localization.GetText("CL.Warning.TEMPLATE"))
                    <br />
                </div>
                <div class="rightAlign absolute right1 verticalPadding10 w95">
                    <input type="button" class="button blueButton" id="ConfirmAdvTemplate" value="@Localization.GetText("OK")" />
                </div>
            </div>
        </div>
    </div>
 </section>