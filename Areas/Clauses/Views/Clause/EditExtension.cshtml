@using IDB.MW.Domain.Values;
@model IDB.MW.Domain.Models.Clauses.OperationRelatedModel
@{
    ViewBag.Title = "CreateNewExtension";
    bool popupNoSpecialExtension = false;
}

<link href="@Url.Content("~/Content/esmartGeneral.css")" rel="stylesheet" />
@Styles.Render("~/Content/ModalConfluenceCss")

@section JavaScript 
{
    @Scripts.Render("~/bundles/OnlyNewConfluence")
    <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Clauses/Clause/clausesCustomScript.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Document/addDocument.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/thumbnail/thumbnail.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Clauses/Clause/EditApprovalRequest.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Clauses/addComment.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/concurrence.js" + @System.Configuration.ConfigurationManager.AppSettings["cache"].ToString())"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Clauses/Contract/ValidationRequest.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/plugins/jquery.tablesorter.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/plugins/jquery.tablednd.js")"></script>

    <script type="text/javascript" src="@Url.Content("~/Scripts/datepicker/datepicker.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Clauses/Clause/extension.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/concurrence.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Clauses/Clause/BlockExtension.js")"></script>
    @Scripts.Render("~/bundles/ModalConfluenceScripts")

    <script type="text/javascript">
    $(document).ready(function () {
        if ($("#TypeRequest_1").prop("checked")) {
            loadRequestByMonths();
        } else {
            loadRequestByDate();
        }

        var isChecked = $('#Is_Special_Extension_Id').is(':checked');
        $('#Contracts_0__Clauses_0__ClauseIndividuals_0__ClauseExtension_0__IsSpecial').val(isChecked);
        $('#IsSpecialExtensionCheck').val(isChecked);

        if (isChecked) {
            $('#Contracts_0__Clauses_0__ClauseIndividuals_0__ClauseExtension_0__ExecutorRequest').val($('#executorRequestedMonths').val());
            $('#Contracts_0__Clauses_0__ClauseIndividuals_0__ClauseExtension_0__IdbRequest').val($('#idbRequest').val());
            $('#idbRequest, #executorRequestedMonths').prop('disabled', true);
            $('#TypeRequest_2Label').hide();
            return;
        }
        $('#Contracts_0__Clauses_0__ClauseIndividuals_0__ClauseExtension_0__ExecutorRequest').remove();
        $('#Contracts_0__Clauses_0__ClauseIndividuals_0__ClauseExtension_0__IdbRequest').remove();

        $(document).on('click', 'a[title="Cancel"]', function (){
            idbg.lockUi(null, true);
        });
    });

        var saveAndRequest = function(){

            var targetUrl= '@Url.Action("CreateExtensionSpecial", "Clause", "Clause")';
            var confirmMessage="@Localization.GetText("Clause.Create.Special.Extension.Confirm.Message")";
            var noSpecialMessage= "@Localization.GetText("Clause.Create.NoSpecial.Extension.Informative.Message")";
            @if (ViewBag.Normative == ClauseNormative.OA_421 &&
                ViewBag.category == ClauseConstants.LAST_DISBURMENT)
            {
                popupNoSpecialExtension = true;
            }
            isSpecialClausePopupBuilder(
                @popupNoSpecialExtension.ToString().ToLower(),
                confirmMessage,
                noSpecialMessage,
                targetUrl);
        }
    </script>
}

@Html.Hidden("CurrentExpirationDate", (object)ViewBag.CurrentExpirationDate)
@Html.Hidden("RequestedDate", (object)ViewBag.RequestedDate)
@(Html.Hidden(
    "determine-validator-udr",
    Url.Action("DetermineLASTDExtensionMandatoryValidator", "Clause")))

<section class="central">
    <h2 class="hide">Seccion central de Contenido</h2>
    <div class="mod_contenido_central contracts_and_clauses clause304">
        @using (Html.BeginForm("EditExtension", "Clause", FormMethod.Post, new { area = "Clauses", id = "target" }))
        { 
             @Html.Hidden("CurrentExpirationDate", (object)ViewBag.CurrentExpirationDate)
            @Html.HiddenFor(x => x.OperationId)
            @Html.HiddenFor(x => x.mainOperationNumber)
            @Html.HiddenFor(x => x.Contracts[0].ContractId)
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseId)
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseIndividualId)
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].CurrentExpirationDate)
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].ClauseExtensionId)
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].ValidationStageId)
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].IdbRequest)
            @Html.HiddenFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].ExecutorRequest)
            @Html.HiddenFor(x => x.IsSpecialExtensionCheck)
            <input type="hidden" id="ExistRequestExtensionDate" value="@(((DateTime)ViewBag.CurrentExpirationDate).ToString("dd MMM yyyy"))"/>
            <input type="hidden" id="ExistIdbRequest" value="@Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].IdbRequest"/> 
            <input type="hidden" id="ExistExecutorRequest" value="@Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].ExecutorRequest"/>
            <h3 class="headingh2 w50">
                <a href="@(Url.Action("Index", "Contracts", new { area = "Clauses", operationNumber = Model.mainOperationNumber }))" title=" @Localization.GetText("CL.ContractsClauses")" class="tipo1">@Localization.GetText("CL.ContractsClauses")</a>
            </h3>                        
            <div class="editingButtonsEdit up">
                <a class="cancel" id="Cancelar" href="@(Url.Action("DetailsExtension", "Clause", new { area = "Clauses", operationId = Model.OperationId, contractId = Model.Contracts[0].ContractId, clauseId = Model.Contracts[0].Clauses[0].ClauseId, clauseIndividualId = Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseIndividualId, clauseExtensionId = Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].ClauseExtensionId, mainOperationNumber = Model.mainOperationNumber }))" title="@Localization.GetText("Cancel")">@Localization.GetText("Cancel")</a>
                <label for="delete">
                    <a onclick="deleteItem(this)" data-route="@Url.Action("DeleteItem", "Clause", new { area = "Clauses", operationId = Model.OperationId, contractId = Model.Contracts[0].ContractId, clauseId = Model.Contracts[0].Clauses[0].ClauseId, clauseIndividualId = Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseIndividualId, extensionId = Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].ClauseExtensionId, RevolvingFund = 0, entityRelated = "", year = 0, entityRegisterId = 0, visualProjectId = 0, visualProjectVersionId = 0, documentId = 0, userCommentId = 0, itemToDelete = "Extension", mainOperationNumber = Model.mainOperationNumber })" class="btn-secondary" title=" @Localization.GetText("Delete")">@Localization.GetText("Delete")</a>
                </label>
                <label for="saveandrequest">
                    <input type="button" class="btn-primary_2 saveandrequest" name="action:Save&RequestExtension"
                           value="@Localization.GetText("CL.CreateExtension.ButtonLabel.FirstSaveAndRequest")" id="saveandrequest" onclick="saveAndRequest()">
                </label>
                <label for="save">
                    <input type="submit" id="Save-Extension" class="btn-primary_2 save" name="action:EditExtension" value="@Localization.GetText("Save")" >
                </label>

            </div>                              
            <div class="desheadingh3 w65">
                <p class="title">@Model.OperationNumber <span class="draft">

                    @foreach (var masterData in ViewBag.ListContractStatus)
                    {
                        if (masterData.ConvergenceMasterDataId == @Model.Contracts[0].ContractClauseStatId)
                        {
                        @Localization.GetText(masterData.NameEn);
                                                     break;
                        }
                    }
                </span>
                    @if (Model.Contracts[0].LegalEffectivenessDate.HasValue && Model.Contracts[0].CurrentDisbursementExpirationDate.HasValue)
                    {
                        @String.Format("{0:dd MMM yyy}", Model.Contracts[0].LegalEffectivenessDate)<span class="titleTo"> to </span>@String.Format("{0:dd MMM yyy}", Model.Contracts[0].CurrentDisbursementExpirationDate)
                    }
                </p>
                <p class="description"><span class="descriptionBold">@Model.Contracts[0].ContractNumber</span> @Model.OperationNameEn</p>
            </div>
            <h4 class="headingh3 min_bottom_headingh3">@Localization.GetText("Edit extension")</h4>            
            <fieldset>
                <legend class="hide">@Localization.GetText("Dates")</legend>

                <div class="operationData">
                    <div class="data1">
                        <div class="verticalMargin20">
                            <span class="grayColor">@Localization.GetText("Type Request")</span>
                        </div>
                        <div class="w100 verticalMargin10">
                        @{
                            var requestByMonths = Model
                                .Contracts[0]
                                .Clauses[0]
                                .ClauseIndividuals[0]
                                .ClauseExtension[0]
                                .RequestExtensionDate == null;
                        }

                        @if (requestByMonths)
                        {
                            @Html.RadioButtonFor(x =>
                                x.TypeRequestDate,
                                "Month",
                                new 
                                {
                                    @class = "fancy-radio verticalAlignMiddle",
                                    @checked = "checked",
                                    @id = "TypeRequest_1"
                                })
                        }
                        else
                        {
                            @Html.RadioButtonFor(x =>
                                x.TypeRequestDate,
                                "Month",
                                new
                                {
                                    @class = "fancy-radio verticalAlignMiddle",
                                    @id = "TypeRequest_1"
                                })
                        }
                        <label id="TypeRequest_1Label"
                            for="TypeRequest_1"
                            class="fancy-label-radio-circle verticalAlignMiddle">
                                @Localization.GetText("Months")
                        </label>

                        @if(requestByMonths)
                        {
                            @Html.RadioButtonFor(x =>
                                x.TypeRequestDate,
                                "Date",
                                new
                                {
                                    @class = "fancy-radio verticalAlignMiddle",
                                    @id = "TypeRequest_2"
                                })
                        }
                        else
                        {
                            @Html.RadioButtonFor(x =>
                                x.TypeRequestDate,
                                "Date",
                                new
                                {
                                    @class = "fancy-radio verticalAlignMiddle",
                                    @checked = "checked",
                                    @id = "TypeRequest_2"
                                })
                        }
                        <label
                            id="TypeRequest_2Label"
                            for="TypeRequest_2"
                            class="@(Model.IsSignatureDeadline ? "hide" : null) fancy-label-radio-circle marginLeft5 verticalAlignMiddle">     
                                @Localization.GetText("Date")
                        </label>
                    </div>
                    </div>
                    @if (Model.Contracts[0].Clauses[0]
                        .ClauseIndividuals[0].
                        ClauseExtension[0]
                        .IsSpecial)
                    {
                        <div class="verticalMargin20"> 
                            @Confluence.InputCheckbox(
                                Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].IsSpecial,
                                id: "Is_Special_Extension_Id",
                                name: "Is_Special_Extension_Id",
                                dataAttributes: new Dictionary<string, string> { { "readonly", Model.IsSignatureDeadline.ToString() } },
                                label:@Localization.GetText("Clause.Create.Special.Extension.Check.Label"),
                                htmlClass: "pr10")
                        </div>
                    }
                 </div>
                @{
                    var disabledClass = Model.IsSignatureDeadline ? " disabled" : string.Empty;
                }
                <div class="operationData custom" id="monthsSelected">
                    <label class="editLabel input" for="requestedMonths">
                        <span class="dataTitle inputTitle">@Localization.GetText("Requested months")</span>
                        @Html.TextBoxFor(x =>x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].IdbRequest, new Dictionary<string, Object> { { "class", "input normal integer numberOnly" + disabledClass }, { "id", "idbRequest" }, { "name", "Requested months" }, { Model.IsSignatureDeadline ? "readonly" : "data-notdisabled", "disabled" } })
                        @{Html.ValidateFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].IdbRequest);}
                    </label>
                    <label class="editLabel input" for="executorRequestedMonths">
                        <span class="dataTitle inputTitle">@Localization.GetText("CL.ExecutorRequestedMonths")</span>
                        @Html.TextBoxFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].ExecutorRequest, new Dictionary<string, Object> { { "class", "input normal integer numberOnly" + disabledClass }, { "id", "executorRequestedMonths" }, { "name", "Executor Requested Months" }, { Model.IsSignatureDeadline ? "readonly" : "data-notdisabled", "disabled" } })
                        @{Html.ValidateFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].ExecutorRequest);}
                    </label>
                    <div class="data4">
                        <p class="dataTitle">@Localization.GetText("Requested expiration date")</p>
                        <p id="requestedDate"></p>                        
                    </div>
                </div>
                <div class="operationData custom" id="dateRequestSelected" style="display: none">
                    <label class="editLabel" for="RequestExtensionDate">

                        <span class="dataTitle inputTitle">@Localization.GetText("Request Date")</span>
                        @Html.TextBoxFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0]
                            .RequestExtensionDate,
                            new
                            {
                                @class = "kendoDatePicker typeDatepicker",
                                @id = "RequestExtensionDate",
                                @Value = String.Format("{0:dd MMM yyy}",
                                    @Model.Contracts[0].Clauses[0].ClauseIndividuals[0]
                                        .ClauseExtension[0].RequestExtensionDate)
                            })
                    </label>
                </div>


            </fieldset>
            <fieldset>
                <legend class="hide">@Localization.GetText("Extensions")</legend>
                <div class="operationData custom">
                    <label class="editLabel input" for="communicationNumber">
                        <span class="dataTitle inputTitle">@Localization.GetText("CL.CommunicationNumber")</span>
                        @Html.TextBoxFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].CommunicationNumber, new Dictionary<string, Object> { { "class", "input normal large" }, { "id", "communicationNumber" }, { "name", "Communication number" } })
                    </label>
                    <label class="editLabel input" for="requestedBy">
                        <span class="dataTitle inputTitle">@Localization.GetText("Requested by")</span>
                        @Html.TextBoxFor(x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].RequestedBy, new Dictionary<string, Object> { { "class", "input normal large" }, { "id", "requestedBy" }, { "name", "Requested by" } })
                    </label>
                    <div class="data4">
                        <p class="dataTitle">@Localization.GetText("Extension status")</p>
                        <p>@Localization.GetText(ViewBag.ValidationStage)</p>
                    </div>
                </div>
            </fieldset>
    <fieldset>
        <legend class="hide">@Localization.GetText("Description")</legend>
        <div class="operationData custom marginBottom2Con8">
            <div class="operationData">
                <label class="editLabel input w100" for="description">
                    <span class="dataTitle inputTitle">@Localization.GetText("Description")</span>
                    @Html.TextAreaFor(
                    x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].Description,
                    new Dictionary<string, Object> {
                        { "class", "input normal large" },
                        { "title", "Description" },
                        { "id", "description" },
                        { "cols", "55" },
                        { "rows", "10" }
                    })
                </label>
            </div>
            <div class="operationData">
                <label class="editLabel input w100" for="justification">
                    <span class="dataTitle inputTitle">@Localization.GetText("Justification")</span>
                    @Html.TextAreaFor(
                    x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].Justification,
                    new Dictionary<string, Object> {
                        { "class", "input normal large" },
                        { "title", "Justification" },
                        { "id", "justification" },
                        { "cols", "55" },
                        { "rows", "10" }
                    })
                </label>
            </div>
            <div class="operationData">
                <label class="editLabel input w100" for="recomendation">
                    <span class="dataTitle inputTitle">@Localization.GetText("Recomendation")</span>
                    @Html.TextAreaFor(
                    x => x.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].Recommendation,
                    new Dictionary<string, Object> {
                        { "class", "input normal large" },
                        { "title", "Recommendation" },
                        { "id", "recommendation" },
                        { "cols", "55" },
                        { "rows", "10" }
                    })
                </label>
            </div>
        </div>
    </fieldset>

             <div class="operationData width_Off min_padding_left dataSocial  ">
                <h4 class="headingh3 cero_left">@Localization.GetText("Documents") </h4>
            </div>
            <div class="editingButtonsEdit" style="margin-bottom: 4%; position: relative; right: 3%;">
                <input type="button" class="btn-primary marginOff lnkModal" value="@Localization.GetText("DM.Add.Document")" title="@Localization.GetText("DM.Add.Document")" data-title="@Localization.GetText("Add a document")" data-route="@(Url.Action("IndexDocumentRelationship", "Document", new { area = string.Empty, operationId = Model.OperationId, mainOperationNumber = Model.mainOperationNumber, operationNumber = Model.mainOperationNumber, parentEntityId = Model.Contracts[0].ContractId, subParentEntityId = Model.Contracts[0].Clauses[0].ClauseId, subsubParentEntityId = Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseIndividualId, entityRelated = "CLAUSE_INDIVIDUAL_EXTENSION_NOREQUEST", entityRegisterId = Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].ClauseExtensionId, isFirstTime = true, businessAreaCode = "BA_CLAUSES" }))">                
            </div>
            <div class="mod_tabla icon_entypo" style="width: 94%">
                <table class="grid2">
                    <thead>
                        <tr>
                            <th class="btn_azul_oscuro_flecha" data-field="User">@Localization.GetText("User")</th>
                            <th class="btn_azul_oscuro_flecha" data-field="Date">@Localization.GetText("Date")</th>
                            <th class="btn_azul_oscuro_flecha" data-field="IDBDocNum">@Localization.GetText("IDB Doc number")</th>
                            <th class="btn_azul_oscuro_flecha" data-field="Content">@Localization.GetText("Content")</th>
                            <th class="btn_azul_oscuro" data-field="Current">&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var document in Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].Documents)
                        {
                            <tr>
                                <td>@document.CreatedBy</td>
                                <td>@String.Format("{0:dd MMM yyy}", document.Created)</td>
                                <td>@document.DocumentReference</td>
                                <td>@document.Description</td>
                                <td>
                                   @{
                                       var secureUrl = IDB.MW.Domain.EntityHelpers.DownloadDocumentHelper.GetDocumentLink(document.DocumentReference);
                                }
                                <a class="btn_entypo" title=" @Localization.GetText("Download")" href=@secureUrl target="_blank" style="position: relative; left 25%; min-height 0.9em; min-width 1.5em;">&#58544;</a>

                                     <a class="btn_entypo" onclick="deleteItem(this)" title=" @Localization.GetText("Delete")" data-route="@Url.Action("DeleteItem", "Clause", new { area = "Clauses", operationId = Model.OperationId, contractId = Model.Contracts[0].ContractId, clauseId = Model.Contracts[0].Clauses[0].ClauseId, clauseIndividualId = Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseIndividualId, extensionId = Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].ClauseExtensionId, RevolvingFund = 0, entityRelated = "CLAUSE_INDIVIDUAL_EXTENSION_NOREQUEST", year = 0, entityRegisterId = Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].ClauseExtensionId, visualProjectId = 0, visualProjectVersionId = 0, documentId = @document.DocumentId, userCommentId = 0, itemToDelete = "Document", mainOperationNumber = Model.mainOperationNumber })" style="position: relative; left: 25%; min-height: 0.9em; min-width: 1.5em;">&#59177;</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="editingButtonsEdit">
                <a class="cancel" id="Cancelar2" href="@(Url.Action("DetailsExtension", "Clause", new { area = "Clauses", operationId = Model.OperationId, contractId = Model.Contracts[0].ContractId, clauseId = Model.Contracts[0].Clauses[0].ClauseId, clauseIndividualId = Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseIndividualId, clauseExtensionId = Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].ClauseExtensionId, mainOperationNumber = Model.mainOperationNumber }))" title="@Localization.GetText("Cancel")">@Localization.GetText("Cancel")</a>
                <label for="delete">
                    <a onclick="deleteItem(this)" data-route="@Url.Action("DeleteItem", "Clause", new { area = "Clauses", operationId = Model.OperationId, contractId = Model.Contracts[0].ContractId, clauseId = Model.Contracts[0].Clauses[0].ClauseId, clauseIndividualId = Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseIndividualId, extensionId = Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseExtension[0].ClauseExtensionId, RevolvingFund = 0, entityRelated = "", year = 0, entityRegisterId = 0, visualProjectId = 0, visualProjectVersionId = 0, documentId = 0, userCommentId = 0, itemToDelete = "Extension", mainOperationNumber = Model.mainOperationNumber })" class="btn-secondary" title=" @Localization.GetText("Delete")">@Localization.GetText("Delete")</a>
                </label>
                <label for="saveandrequest">
                    <input type="button" class="btn-primary_2 saveandrequest" name="action:Save&RequestExtension" 
                           value=" @Localization.GetText("CL.CreateExtension.ButtonLabel.FirstSaveAndRequest")" id="SaveAndRequest2" onclick="saveAndRequest()">
                </label>
                <label for="save">
                    <input type="submit" id="Save-Extension1" class="btn-primary_2 save" name="action:EditExtension" value=" @Localization.GetText("Save")">
                </label>
            </div>
            
            <div class="editingButtonsEdit paddingTop0Con3 hideNI" id="editingSpecial">
                <a class="ftl margin5"
                    id="Cancelar3"
                    href="@(Url.Action("Edit", "Clause",new { area = "Clauses",
                                                            operationId = Model.OperationId,
                                                            contractId = Model.Contracts[0].ContractId,
                                                            clauseId = Model.Contracts[0].Clauses[0].ClauseId,
                                                            clauseIndividualId = Model.Contracts[0].Clauses[0].ClauseIndividuals[0].ClauseIndividualId,
                                                            mainOperationNumber = Model.mainOperationNumber }))"
                title="@Localization.GetText("Cancel")">@Localization.GetText("Cancel")
                </a>
                <label for="continue">
                    <input
                        type="button"
                        class="btn-primary_2 saveandrequest"
                        value="@Localization.GetText("Continue")"
                        id="saveandrequest3"
                        onclick="isSpecialEvent('@Url.Action("CreateExtensionSpecial", "Clause", "Clause")')">
                </label>
            </div>
            <div class="editingButtonsEdit paddingTop0Con3 hideNI" id="editingSpecial2">
                <label for="continue">
                    <input
                        type="button"
                        class="btn-primary_2 saveandrequest"
                        value="@Localization.GetText("OK")"
                        id="popupNoSpecial"
                        onclick= "isSpecialEvent('@Url.Action("CreateExtensionSpecial", "Clause", "Clause")')">
                </label>
            </div>
        }
    </div>
</section>