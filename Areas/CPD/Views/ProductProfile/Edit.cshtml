@using IDB.MVCControls.General.Helpers
@using IDB.MW.Application.CPDModule.ViewModels.ProductProfile
@using IDB.MW.Infrastructure.Configuration
@using IDB.MW.Infrastructure.SecurityService.Enums
@using IDB.Presentation.MVC4.Helpers
@using IDB.Presentation.MVC4.Models.Modal
@using IDB.Presentation.MVC4.General

@model ProductDataViewModel

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDate = appSettings.FormatDate;
}

@if (Model != null)
{
     <button data-id="butttonNewRelatedOperationModal" class="hide"
        data-modal-allowclose="true"
        data-custom-modal="newRelatedOperationModal"
        data-custom-modal-style=""
        data-custom-modal-title="@Localization.GetText("OP.OD.AddRelationship.Title")"
        data-custom-modal-validate="false"
        data-custom-buttons='["save", "cancel"]'
        data-custom-button-save-id="send"
        data-custom-button-save="@Localization.GetText("OP.OD.Save")"
        data-custom-button-save-style="buttonBlue"
        data-custom-button-save-callback="relatedOperationSave"
        data-custom-button-save-closeatend="true"
        data-custom-button-cancel-id="cancel"
        data-custom-button-cancel="@Localization.GetText("OP.OD.Cancel")"
        data-custom-button-cancel-style="buttonLink"
        data-custom-button-cancel-callback=""
        data-custom-modal-onclose="addNewRelatedOperation"
        data-custom-modal-closeonoverlayclick="false"></button>

        <div id="newRelatedOperationModal" class="hide modalBody"></div>
    
    <div class="hide">
        @Display.AddModalButton(new ModalViewModel(contentSelector: "[data-name=\"delete-modal\"]",
        title: Localization.GetText("COMMON.Warning"),
        type: CssClass.ModalWarningNoIcon,
        moveOriginalContent: true,
        name: "deleteModal-open-warning-btn",
        closeOnOverlay: false,
        allowClose: true,
        actionOnClose: "")
          .AddButton(name: "cancel-delete",
          text: Localization.GetText("COMMON.Cancel"),
          type: CssClass.ButtonLink,
          callback: "")
              .AddButton(name: "confirm-delete",
              text: Localization.GetText("COMMON.Ok"),
              type: CssClass.Button05,
              callback: "ConfirmRemove",
              closeAtEnd: true))
        <div data-name="delete-modal" class="modalBody">
            @Localization.GetText("CS.PorductData.Modal.TextDelete")
        </div>
    </div>

    <div data-section="modals" class="hide">
        @Display.AddModalButton(new ModalViewModel(contentSelector: "[data-name=\"cancel-modal\"]",
        title: Localization.GetText("Common.Warning"),
        type: CssClass.ModalWarningNoIcon,
        moveOriginalContent: true,
        name: "btn-open-popup-cancel",
        closeOnOverlay: false,
        allowClose: true,
        actionOnClose: "")
    .AddButton(name: "btn-cancel-cancel",
                    text: Localization.GetText("Common.Cancel"),
                    type: CssClass.ButtonLink,
                    callback: "")
    .AddButton(name: "btn-cancel-ok",
                    text: Localization.GetText("Common.Ok"),
                    type: CssClass.Button05,
                    callback: "okCancel",
                    closeAtEnd: true))
        <div data-name="cancel-modal" class="hide modalBody">
            @Localization.GetText("CS.ProductProfile.Cancel.Warning")
        </div>
    </div>

    <div class="row mb30">
        <div class="col-md-12">
            @Html.Partial("EditPartial/Buttons")
            @Confluence.LabelMainTitle(Localization.GetText("CS.ProductProfile.Title"))
        </div>
    </div>
    <div class="page" data-parsley-validate="true" name="submitForm" data-ignore-nullable-values="true">
        @Confluence.Tabs(new Dictionary<string, string>()
        {{"linktabBasicData", Localization.GetText("CS.ProductProfile.Navigation.BasicData") },
        {"linktabResponsibilityData", Localization.GetText("CS.ProductProfile.Navigation.ResponsibilityData") }
    })
        <div class="tab-content mt20">
            @if (Model.BasicData != null)
            {
                <div class="tab-pane own-hide"
                     id="linktabBasicData"
                     data-idb-fieldname="cs-resp-data-edit-control"
                     data-parsley-validate="data-parsley-validate"
                     data-parsley-excluded="[disabled]"
                     name="submitFormBasicData"
                     data-ignore-nullable-values="true"
                     data-url="@Url.Action("SaveBasicData", "ProductProfile", new { area = "CPD" })">
                    <div data-fake-pagemode="edit">
                        @Html.Partial("EditPartial/EditBasicDataPartial", Model.BasicData)
                    </div>
                </div>
            }
            @if (Model.ResponsibilityData != null)
            {
                <div class="tab-pane own-hide"
                     id="linktabResponsibilityData"
                     data-idb-fieldname="cs-resp-data-edit-control"
                     data-parsley-validate="data-parsley-validate"
                     data-parsley-excluded="[disabled]"
                     name="submitFormResponsibilityData"
                     data-ignore-nullable-values="true"
                     data-url="@Url.Action("SaveResponsibilityData", "ProductProfile", new { area = "CPD" })">
                    <div data-fake-pagemode="edit">
                        @Html.Partial("EditPartial/EditResponsibilityDataPartial", Model.ResponsibilityData)
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="row mb30">
        <div class="col-md-12">
            @Html.Partial("EditPartial/Buttons")
        </div>
    </div>

    @section scripts{
        @CountryStrategyCommon.ChangeFakePageModeToReal()

        @ModuleScriptsOpus.CreationOperationScripts(Html, Url)
        @ModuleScriptsOpus.NewInstitutionScripts(Html, Url)

        <script type="text/javascript">
            function SelectTab(tabName) {
                switch (tabName) {
                    case '':
                    case '#linktabBasicData':
                        $('[dd-tab="#linktabBasicData"]').click();
                        break;
                    case '#linktabResponsibilityData':
                        $('[dd-tab="#linktabResponsibilityData"]').click();
                        break;
                }
            }

            function okCancel() {
                var promise = $.Deferred();
                var url = '@Url.Action("Cancel", "ProductProfile", new { area = "CPD", tabName = "#" })';

                var tabName = $('[dd-tab].active').attr('dd-tab').substr(1);
                url = url + tabName;

                LocationAssign(url);
                promise.resolve();
                return promise;
            }

            registerCallback(function () {
                $(document).ready(function () {
                    SelectTab('@ViewBag.ActiveTab');
                    $('[dd-tab]:not(.active)').addClass('disabled');
                });

                $(document).on('click', '[name="cancel-RD"]', function () {
                    var modalBtn = $('[name="btn-open-popup-cancel"]');
                    modalBtn.click();
                });

                $(document).on('click', '[name="save-RD"]', function () {
                    var activeTabId = $('[dd-tab].active').attr('dd-tab');
                    var activeTab = $(activeTabId);

                    var promise = $.Deferred();
                    var response = saveContainer(activeTab, '[name="hideViewModel"]', false, null, null, false, true, null);
                    if (response !== false) {
                        response.done(function (data) {
                            if ((data.ErrorMessage != null) && (data.ErrorMessage != "")) {
                                showMessage(data.ErrorMessage);
                            }
                        });
                    }
                    promise.resolve();
                    return promise;
                });

                $(document).on('click', '[name="removeRowTeamMember"]', function (e) {
                    var source = $(this);
                    deleteRowTable(e, source, "operationTeamsTable", true);
                });

                $(document).on('click', '[name="removeUnit"]', function (e) {
                    var source = $(this);
                    deleteRowTable(e, source, "responsibleUnitsTable", true);
                });

                $(document).on('click', '[name="addNewTeamMember"]', function () {
                    var source = $(this);
                    var newId = source.GenerateNewId();
                    var lastTr = $('#operationTeamsTable tbody tr:last');
                    var templateTr = $('#operationTeamsTable tbody tr:first');
                    var clonedTr = templateTr.clone(false).appendTo('#operationTeamsTable tbody');
                    var lastSecuence = lastTr.attr('class');
                    if (lastSecuence.indexOf('odd') > -1) {
                        clonedTr.removeAttr('class', 'odd');
                        clonedTr.attr('class', 'custom-even even');
                    } else {
                        clonedTr.removeAttr('class', 'even');
                        clonedTr.attr('class', 'custom-odd odd');
                    }
                    clonedTr.removeClass('hide');
                    clonedTr.attr('data-id', String.format('new-{0}', newId));
                    clonedTr.removeAttr('data-name')
                    clonedTr.find('input, select,button').removeAttr('disabled');
                    bindHandlers(clonedTr);
                });

                $(document).on('click', '[name="addNewUnit"]', function () {
                    var source = $(this);
                    var newId = source.GenerateNewId();
                    var lastTr = $('#responsibleUnitsTable tbody tr:last');
                    var templateTr = $('#responsibleUnitsTable tbody tr:first');
                    var clonedTr = templateTr.clone(false).appendTo('#responsibleUnitsTable tbody');
                    var lastSecuence = lastTr.attr('class');
                    if (lastSecuence.indexOf('odd') > -1) {
                        clonedTr.removeAttr('class', 'odd');
                        clonedTr.attr('class', 'custom-even even');
                    } else {
                        clonedTr.removeAttr('class', 'even');
                        clonedTr.attr('class', 'custom-odd odd');
                    }
                    clonedTr.removeClass('hide');
                    clonedTr.attr('data-id', String.format('new-{0}', newId));
                    clonedTr.removeAttr('data-name')
                    clonedTr.find('input, select,button').removeAttr('disabled');
                    bindHandlers(clonedTr);

                    destroyParsley();
                    initParsley();
                    destroyParsley();
                    initParsley();

                });

                $(document).on('click', 'ul.dropdown-menu[aria-labelledby="id-userNameTeam"] a', function () {
                    var nameUserForInsert = $(this).text();
                    var countUser = 0;
                    $('#operationTeamsTable tr td:first-child').each(function () {
                        var source = $(this);
                        var name = source.find('label').text();
                        if (name == '' || name == null) {
                            name = source.find('input').val();
                        }
                        if (nameUserForInsert == name) {
                            countUser++;
                        }
                    });

                    if (countUser > 1) {
                        var tr = $(this).closest('tr');

                        var inputName = tr.find('input[name="userNameTeam_text"]');
                        var inputNameId = tr.find('input[name="userNameTeam"]');
                        var labeltd3 = tr.find('td:eq(2)').find('label');
                        var ultd2 = tr.find('td:eq(1)').find('ul');

                        inputName.val('');
                        inputNameId.val('');
                        labeltd3.html('');
                        ultd2.FirstorDefault();
                        showMessage('@Localization.GetText("CS.ResponsabilityData.Message.SelectOtherUser")');
                    }
                });

                $(document).on('click', 'div.pictureLabel div ul[aria-labelledby="id-userNameTeam"] li a', function (key, item) {
                    var source = $(this);
                    var tableName = source.closest('table').attr('id');
                    var rowId = source.closest('tr').attr('data-id');
                    var userIdLabel = $('table[id="' + tableName + '"]').find('tr[data-id="' + rowId + '"] td[data-name="userName"] label');
                    var organizationalUnitLabel = $('table[id="' + tableName + '"]').find('tr[data-id="' + rowId + '"] td[data-name="organizationalUnit"] label');
                    var organizationalUnitInput = $('table[id="' + tableName + '"]').find('tr[data-id="' + rowId + '"] td[data-name="organizationalUnit"] input');
                    var delegateLabel = $('table[id="' + tableName + '"]').find('tr[data-id="' + rowId + '"] td[data-name="delegate"] label');
                    var additionalData = source.attr('additional-data');

                    additionalData = JSON.parse(additionalData);

                    userIdLabel.text(additionalData.UserId);
                    organizationalUnitLabel.text(additionalData.OrganizationalUnit);
                    delegateLabel.text(additionalData.Delegation);
                    organizationalUnitInput.val(additionalData.OrganizationalUnit);
                });

                window.ParsleyValidator
            .addValidator('OnlyOneRole', function (value, requirement) {

                var countRole = 0;
                var inputsRole = $('input[name="responsibleUnitsRole"]');
                inputsRole.each(function (ix, item) {
                    if (parseInt($(item).val()) == requirement) {
                        countRole++;
                    }
                });

                return countRole == 1;

            }, 32)
            .addMessage('en', 'OnlyOneRole', '@Localization.GetText("CS.ProductData.Message.ResponsibleOU")');


                window.ParsleyValidator
                    .addValidator('OnlyOneTeamLeader', function (value, requirement) {

                        var countRole = 0;
                        var inputsRole = $('input[name="operationTeamsRole"]');
                        inputsRole.each(function (ix, item) {
                            if (parseInt($(item).val()) == requirement) {
                                countRole++;
                            }
                        });

                        return countRole == 1;

                    }, 32)
                .addMessage('en', 'OnlyOneTeamLeader', '@Localization.GetText("CS.ProductData.Message.TeamLeaderRoleTeam")');

                $(document).on('click', 'ul.dropdown-menu[aria-labelledby="id-operationTeamsRole"] a', function () {
                    var countTeamLeader = 0;
                    if ($(this).text() == 'Team Leader') {
                        $('#operationTeamsTable .dropdown .valueText').each(function () {
                            if ($(this).text() == 'Team Leader') {
                                countTeamLeader++;
                            }
                        });

                        if (countTeamLeader == 2) {
                            $(this).closest('ul').FirstorDefault();
                            showMessage('@Localization.GetText("OP.CR.CreationForm.Message.AnyTeamLeader")');
                        }
                    }
                });
            });

            function deleteRowTable(e, source, idTable, showNotificationDelete) {
                if (showNotificationDelete) {
                    var modalButton = $('[name="deleteModal-open-warning-btn"]');
                    modalButton.data('pressed-by', source);
                    modalButton.click();
                } else {
                    ConfirmRemove(e, source);
                }
            }

            function ConfirmRemove(e, source) {
                var promise = $.Deferred();
                var tr = source.closest('tr');
                tr.remove();
                promise.resolve();
                return promise;
            }

            function searchEnter() {
                $('[name="associatedInstitutionsNameAcronymFilter"], [name="relatedOperation"]').keypress(function (e) {
                    if (e.which == 13) {
                        var name = $(this).attr('name');
                        if (name == "associatedInstitutionsNameAcronym") {
                            $(this).closest('td').find('.searchFilter').click();
                        } else {
                            $(this).parent().next().find('[data-action="relatedOperationSearch"]').click();
                        }
                    }
                });
            }

            function ValidateDatetime() {
                $('#newRelatedDates .hasDatepicker').change(function (source) {
                    var dateSelected = $(source.target);
                    var isCorrect = true;
                    var otherDate = $(source.target).parent().parent().next().find('.hasDatepicker');
                    if (otherDate.length > 0) {
                        isCorrect = dateDiffInDays(dateSelected.val(), otherDate.val());
                    } else {
                        otherDate = $(source.target).parent().parent().prev().find('.hasDatepicker');
                        isCorrect = dateDiffInDays(otherDate.val(), $(source.target).val());
                    }

                    if (!isCorrect) {
                        $(source.target).val("");
                        $(source.target).attr("data-parsley-required", true).removeClass('parsley-success').addClass('parsley-error');
                        $(source.target).parent().find('ul').remove();
                        $(otherDate).parent().find('ul').remove();
                        $(otherDate).attr("data-parsley-required", false).removeClass('parsley-error').addClass('parsley-success');
                        $(source.target).parent().append('<ul class="parsley-errors-list filled"><li class="parsley-required">range of dates incorrect.</li></ul>');
                        $(source.target).focus();
                    } else {
                        $(source.target).attr("data-parsley-required", false).removeClass('parsley-error').addClass('parsley-success');
                        $(source.target).parent().find('ul').remove();
                        $(otherDate).parent().find('ul').remove();
                        $(otherDate).attr("data-parsley-required", false).removeClass('parsley-error').addClass('parsley-success');
                    }
                });

                function dateDiffInDays(a, b) {
                    var diff = true;
                    var aDate = a == "" ? Date.parse("0") : Date.parse(a);
                    var bDate = b == "" ? Date.parse("0") : Date.parse(b);
                    var diff = (aDate) - (bDate);

                    if (aDate == Date.parse("0") || bDate == Date.parse("0")) {
                        return diff;
                    }
                    return diff <= 0 ? true : false;
                }
            }

        </script>
    }
}