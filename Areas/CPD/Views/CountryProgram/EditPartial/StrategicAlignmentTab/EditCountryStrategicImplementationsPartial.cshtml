@using IDB.MW.Application.CPDModule.ViewModels.CountryProgram
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.Architecture.Language

@model ICollection<DEMSummaryRowViewModel>

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatPercentage = appSettings.FormatPercent;
    var formatDecimal = appSettings.FormatDecimal;

    var config = Html.RenderDataTable(Model.ToList());
    config.TableClass = "tableNormal";
    config.Name("CountryStrategicImplementations")
    .PrimaryKey(m => m.RowId.ToString())
    .AddPrimaryKeyToName(false)
    .UseDataTableNet(false)
    .UsePageMode(false)
    .Columns(columns =>
    {
        columns.Bound(c => c.Name)
        .Header(Localization.GetText("CPD.CountryProgram.StrategicAligment.CountryStragegicImplementarion"))
        .CssClassDynamic(c => GetRowShadow(c))
        .Persistent();

        columns.Template(c => ColumnPercentage(c))
        .Header(Localization.GetText("CPD.CountryProgram.StrategicAligment.TableHeader.Percentage"))
        .CssClassDynamic(c => GetRowShadow(c))
        .CssClass("textalign-right w120")
        .Persistent();

        columns.Template(c => ColumnQuantity(c))
        .Header(Localization.GetText("CPD.CountryProgram.StrategicAligment.NumberOfAreasUnaattended"))
        .CssClassDynamic(c => GetRowShadow(c))
        .CssClass("textalign-right w300")
        .Persistent();

        columns.Template(c => ColumnTotalQuantity(c))
        .Header(Localization.GetText("CPD.CountryProgram.StrategicAligment.TotalNumberOfPriorityAreas"))
        .CssClassDynamic(c => GetRowShadow(c))
        .CssClass("textalign-right w300")
        .Persistent();
    });
}

@Html.Partial("Controls/DataTable", config)

@helper ColumnPercentage(DEMSummaryRowViewModel row)
{
    var tableName = "CountryStrategicImplementations";

    if (!row.IsBold)
    {
        @Confluence.InputDecimal(
            value: row.Percentage,
            name: tableName + "-Percentage",
            minValue: "0",
            maxValue: "100",
            decimalPrecision: 2,
            required: false,
            htmlClass: "textalign-right",
            width: "100%")
        @Confluence.InputHidden(row.RowTypeId.ToString(), tableName + "-RowTypeId");
    }
}

@helper ColumnQuantity(DEMSummaryRowViewModel row)
{
    var tableName = "CountryStrategicImplementations";

    if (!row.IsBold)
    {
        @Confluence.InputNumber(
            value: row.Quantity,
            name: tableName + "-Quantity",
            required: false,
            minValue: "0",
            maxValue: "9999",
            htmlClass: "textalign-right",
            width: "100%")
    }
}

@helper ColumnTotalQuantity(DEMSummaryRowViewModel row)
{
    var tableName = "CountryStrategicImplementations";

    if (!row.IsBold)
    {
        @Confluence.InputNumber(
            value: row.TotalQuantity,
            name: tableName + "-TotalQuantity",
            required: false,
            minValue: "0",
            maxValue: "9999",
            htmlClass: "textalign-right",
            width: "100%")
    }
}

@functions{
    private static string GetRowShadow(DEMSummaryRowViewModel row)
    {
        var cssClass = string.Empty;

        if (row.IsSection)
        {
            cssClass = "rowShadow";
        }

        if (row.IsBold)
        {
            if (cssClass == string.Empty)
            {
                cssClass = "rowBold";
            }
            else
            {
                cssClass = cssClass + " rowBold";
            }
        }

        return cssClass;
    }  
}