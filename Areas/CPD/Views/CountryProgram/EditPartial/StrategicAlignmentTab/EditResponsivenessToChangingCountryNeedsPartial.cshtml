@using IDB.MW.Application.CPDModule.ViewModels.CountryProgram
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.Configuration

@model List<DEMSummaryRowViewModel>

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatPercentage = appSettings.FormatPercent;
    var formatDecimal = appSettings.FormatDecimal;

    var config = Html.RenderDataTable(Model);
    config.TableClass = "tableNormal";
    config.Name("ResponsivenessToChangingCountryNeeds")
    .PrimaryKey(m => m.RowId.ToString())
    .AddPrimaryKeyToName(false)
    .UseDataTableNet(false)
    .UsePageMode(false)
    .Columns(columns =>
    {
        columns.Bound(c => c.Name)
        .Header(Localization.GetText("CPD.CountryProgram.StrategicAligment.Responsiveness"))
        .Persistent();

        columns.Template(c => ColumnPercentage(c))
        .Header(Localization.GetText("CPD.CountryProgram.StrategicAligment.TableHeader.Percentage"))
        .CssClass("textalign-right w120")
        .Persistent();

        columns.Template(c => ColumnQuantity(c))
        .Header(Localization.GetText("CPD.CountryProgram.StrategicAligment.NumberOfLoans"))
        .CssClass("textalign-right w300")
        .Persistent();

        columns.Template(c => ColumnTotalQuantity(c))
        .Header(Localization.GetText("CPD.CountryProgram.StrategicAligment.TotalNumberOfLoans"))
        .CssClass("textalign-right w300")
        .Persistent();
    });
}

@Html.Partial("Controls/DataTable", config)

@helper ColumnPercentage(DEMSummaryRowViewModel row)
{
    var tableName = "ResponsivenessToChangingCountryNeeds";

    if (!row.IsBold && !row.IsNSG)
    {
        @Confluence.InputDecimal(
        value: row.Percentage,
        name: tableName + "-Percentage",
        minValue: "0", 
        maxValue: "100",
        decimalPrecision: 2,
        required: false,
        htmlClass: "textalign-right",
        width: "100%")
        @Confluence.InputHidden(row.RowTypeId.ToString(), tableName + "-RowTypeId");
    }
    
    if (!row.IsBold && row.IsNSG)
    {
        var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
        var formatPercentage = appSettings.FormatPercent;
        var value = row.Percentage != null ? row.Percentage / 100 : row.Percentage;
        @FormatHelper.Format(value, formatPercentage);
    
        @Confluence.InputDecimal(
        value: row.Percentage,
        name: tableName + "-Percentage",
        minValue: "0",
        maxValue: "100",
        decimalPrecision: 2,
        required: false,
        htmlClass: "textalign-right hide",
        width: "100%",
        disabled: true)
    
        @Confluence.InputHidden(row.RowTypeId.ToString(), tableName + "-RowTypeId");
    }
}

@helper ColumnQuantity(DEMSummaryRowViewModel row)
{
    var tableName = "ResponsivenessToChangingCountryNeeds";

    if (!row.IsBold && !row.IsNSG)
    {
        @Confluence.InputNumber(
            value: row.Quantity,
            name: tableName + "-Quantity",
            required: false,
            minValue: "0",
            maxValue: "9999",
            htmlClass: "textalign-right",
            width: "100%")
    
    }

    if (!row.IsBold && row.IsNSG)
    {
        @Confluence.InputNumber(
        value: row.Quantity,
        name: tableName + "-Quantity",
        required: false,
        minValue: "0",
        maxValue: "9999",
        htmlClass: "textalign-right hide",
        width: "100%",
        disabled: true)
            
        <div>@row.Quantity</div>
    }
}

@helper ColumnTotalQuantity(DEMSummaryRowViewModel row)
{
    var tableName = "ResponsivenessToChangingCountryNeeds";

    if (!row.IsBold && !row.IsNSG)
    {
        @Confluence.InputNumber(
            value: row.TotalQuantity,
            name: tableName + "-TotalQuantity",
            required: false,
            minValue: "0",
            maxValue: "9999",
            htmlClass: "textalign-right",
            width: "100%")
    }
    
    if (!row.IsBold && row.IsNSG)
    {
        @Confluence.InputNumber(
        value: row.TotalQuantity,
        name: tableName + "-TotalQuantity",
        required: false,
        minValue: "0",
        maxValue: "9999",
        htmlClass: "textalign-right hide",
        width: "100%",
        disabled: true)
    
        <div>@row.TotalQuantity</div>
    }
}