@using IDB.MW.Application.CPDModule.ViewModels.CountryProgram
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.Architecture.Language

@model ICollection<DEMSummaryRowViewModel>

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatPercentage = appSettings.FormatPercent;
    var formatDecimal = appSettings.FormatDecimal;

    var config = Html.RenderDataTable(Model.ToList());
    config.TableClass = "tableNormal";
    config.Name("CountryStrategicImplementations")
    .PrimaryKey(m => m.RowId.ToString())
    .AddPrimaryKeyToName(false)
    .UseDataTableNet(false)
    .UsePageMode(false)
    .Columns(columns =>
    {
        columns.Bound(c => c.Name)
        .Header(Localization.GetText("CPD.CountryProgram.StrategicAligment.CountryStragegicImplementarion"))
        .CssClassDynamic(c => GetRowShadow(c))
        .Persistent();

        columns.Template(c => ColumnPercentage(c))
        .Header(Localization.GetText("CPD.CountryProgram.StrategicAligment.TableHeader.Percentage"))
        .CssClassDynamic(c => GetRowShadow(c))
        .CssClass("textalign-right w120")
        .Persistent();

        columns.Bound(c => c.Quantity)
        .Header(Localization.GetText("CPD.CountryProgram.StrategicAligment.NumberOfAreasUnaattended"))
        .CssClassDynamic(c => GetRowShadow(c))
        .CssClass("textalign-right w300")
        .Persistent();

        columns.Bound(c => c.TotalQuantity)
        .Header(Localization.GetText("CPD.CountryProgram.StrategicAligment.TotalNumberOfPriorityAreas"))
        .CssClassDynamic(c => GetRowShadow(c))
        .CssClass("textalign-right w300")
        .Persistent();
    });
}

@Html.Partial("Controls/DataTable", config)

@helper ColumnPercentage(DEMSummaryRowViewModel row)
{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatPercentage = appSettings.FormatPercent;
    var value = row.Percentage != null ? row.Percentage / 100 : row.Percentage;

    if (!row.IsBold)
    {
        @FormatHelper.Format(value, formatPercentage);
    }
}

@functions{
    private static string GetRowShadow(DEMSummaryRowViewModel row)
    {
        var cssClass = string.Empty;

        if (row.IsSection)
        {
            cssClass = "rowShadow";
        }

        if (row.IsBold)
        {
            if (cssClass == string.Empty)
            {
                cssClass = "rowBold";
            }
            else
            {
                cssClass = cssClass + " rowBold";
            }
        }

        return cssClass;
    }  
}