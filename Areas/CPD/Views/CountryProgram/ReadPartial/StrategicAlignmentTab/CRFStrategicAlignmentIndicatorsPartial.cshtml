@using IDB.MW.Application.CPDModule.ViewModels.CountryProgram
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.Architecture.Language
@using IDB.Presentation.MVC4.Helpers

@model List<StrategicAlignmentIndicatorRowViewModel>

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatPercentage = appSettings.FormatPercent;
    var greather2017 = Model[Model.Count()-1].Greather2017;

    var config = Html.RenderDataTable(Model);
    config.TableClass = "tableNormal";
    config.Name("CRFStrategicAlignmentIndicators")
    .PrimaryKey(m => m.RowId.ToString())
    .AddPrimaryKeyToName(false)
    .UseDataTableNet(false)
    .UsePageMode(false)
    .Columns(columns =>
    {
        columns.Template(c => ColumnRowTitle(c))
        .CssClassDynamic(c => GetRowShadow(c))
        .Persistent();

        columns.Template(c => ColumnPercentageSG(c))
        .CssClassDynamic(c => GetRowShadow(c))
        .CssClass("textalign-right maxw65")
        .Persistent();

        columns.Template(c => ColumnPercentageNSG(c))
        .CssClassDynamic(c => GetRowShadow(c))
        .CssClass("textalign-right maxw65")
        .Persistent();
    });

    config.UseCustomHeader = true;
    config.CustomHeader = (@<thead>
        <tr>
            <th></th>
            <th colspan="2">@Localization.GetText("CPD.CountryProgram.StrategicAligment.TableHeader.Indicators.PercentajeLending")</th>
        </tr>
        <tr>
            <th></th>
            @if (!greather2017) {
                <th>@Localization.GetText("CPD.CountryProgram.StrategicAligment.TableHeader.Indicators.SG")</th>
                <th>@Localization.GetText("CPD.CountryProgram.StrategicAligment.TableHeader.Indicators.NSG")</th>
            }
            else
            {
                <th>@Localization.GetText("CPD.CountryProgram.StrategicAligment.TableHeader.Indicators.IDB")</th>
                <th>@Localization.GetText("CPD.CountryProgram.StrategicAligment.TableHeader.Indicators.IDBInvest")</th>
            }
        </tr>
    </thead>);
}

@Html.Partial("Controls/DataTable", config)

@helper ColumnRowTitle(StrategicAlignmentIndicatorRowViewModel row)
{
    if (row.IsBold)
    {
           @Confluence.LabelBold(row.Name)
    }
    else
    {
           @Confluence.Label(row.Name)
    }
}

@helper ColumnPercentageSG(StrategicAlignmentIndicatorRowViewModel row)
{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatPercentage = appSettings.FormatPercent;
    var value = row.PercentageSG != null ? row.PercentageSG / 100 : row.PercentageSG;

    if (!row.IsBold)
    {
           @FormatHelper.Format(value, formatPercentage);
    }
}

@helper ColumnPercentageNSG(StrategicAlignmentIndicatorRowViewModel row)
{
var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
var formatPercentage = appSettings.FormatPercent;
var value = row.PercentageNSG != null ? row.PercentageNSG / 100 : row.PercentageNSG;

if (!row.IsBold)
{
        @FormatHelper.Format(value, formatPercentage);
    }
}

@functions {
    private static string GetRowShadow(StrategicAlignmentIndicatorRowViewModel row)
    {
        var cssClass = string.Empty;

        if (row.IsBold)
        {
            cssClass = "rowShadow rowBold";
        }

        return cssClass;
    }
}