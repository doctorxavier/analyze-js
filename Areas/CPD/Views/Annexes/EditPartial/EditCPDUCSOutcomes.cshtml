@using System.Globalization
@using IDB.Architecture.Language
@using IDB.Presentation.MVC4.Helpers
@using IDB.MVCControls.General.Helpers
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.MVCControls.DataTable.Models
@using IDB.Presentation.MVC4.Models.Modal
@using IDB.Presentation.MVC4.General

@using IDB.MW.Application.CPDModule.ViewModels.Annexes
@using NewConfluence

@model List<StrategicOutcomeRowViewModel>

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();

    var config = Html.RenderDataTable(Model);
    config.TableClass = "tableNormal tableResultsMatrix";
    config.Name("resultMatrixDataTable")
    .PrimaryKey(m => m.ObjectiveId.ToString(CultureInfo.InvariantCulture))
    .AddPrimaryKeyToName(false)
    .UsePageMode(false)
    .UseDataTableNet(false)
    .Columns(columns =>
    {
        columns.Bound(c => c.ExpectedOutcome)
        .Persistent()
        .Header(Localization.GetText("CPD.Label.ExpectedOutcome"))
        .Attribute("rowspan", x => x.RowSpanIndicatos.ToString())
        .HeaderAttribute("style", "width: 100px;")
        .Attribute("style", x => "width:100px; vertical-align: top !important;")
        .CssClassDynamic(c => GetClassOutcome(c.IsInitialOutcome))
        .CssClass("padding5pxCell borderButtonGray");

        columns.Bound(c => c.Indicator)
        .Persistent()
        .Header(Localization.GetText("CPD.Label.Indicator"))
        .HeaderAttribute("style", "width: 100px;")
        .Attribute("style", x => "width:100px;")
        .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));

        columns.Bound(c => c.UnitOfMeasure)
        .Persistent()
        .HeaderAttribute("style", "width: 70px;")
        .Attribute("style", x => "width:70px;")
        .Header(Localization.GetText("CPD.Label.UnitofMeasure"))
        .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));

        columns.Bound(c => c.Baseline)
        .Persistent()
        .HeaderAttribute("style", "width: 70px;")
        .Attribute("style", x => "width:70px;")
        .Header(Localization.GetText("CPD.Label.Baseline"))
        .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));

        columns.Bound(c => c.BaselineYear)
        .Persistent()
        .HeaderAttribute("style", "width: 70px;")
        .Attribute("style", x => "width:70px;")
        .Header(Localization.GetText("CPD.Label.BaselineYear"))
        .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));

        columns.Template(AlignmentToCRF)
        .Persistent()
        .HeaderAttribute("style", "width: 120px;")
        .Attribute("style", x => "width:120px;")
        .Header(Localization.GetText("CPD.Label.AlignmenttoCRF"))
        .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));

        columns.Template(InterventionsTemplate)
        .Persistent()
        .HeaderAttribute("style", "width: 120px;")
        .Attribute("style", x => "width:120px;")
        .Header(Localization.GetText("CPD.Annexes.ResultMatrix.UseOfCountrySystems.InterventionsProgrammingYear"))
        .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));

        columns.Template(OutcomesTemplate)
        .Persistent()
        .HeaderAttribute("style", "width: 120px;")
        .Attribute("style", x => "width:120px;")
        .Header(Localization.GetText("CPD.Annexes.ResultMatrix.UseOfCountrySystems.OutcomesAchievedDate"))
        .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));

        columns.Template(ExpectedOutcomeTemplate)
        .Persistent()
        .HeaderAttribute("style", "width: 139px;")
        .Attribute("style", x => "width:139px;")
        .Header(Localization.GetText("CPD.Annexes.ResultMatrix.UseOfCountrySystems.ExpectedOutcomeOutput"))
        .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));  
    });
}

@Html.Partial("Controls/DataTable", config)

@helper AlignmentToCRF(StrategicOutcomeRowViewModel model)
{
    <div class="lblvalue bold" style="margin-left:15px; font-size:11px !important;">
        @if (model.LinkedIndicators.Any())
        {
            <ul class="linked-indicators">
                @foreach (var indicator in model.LinkedIndicators)
                {
                    <li title="@(getCRFType(indicator, ViewBag.CRFIndicators))" class="@(getCRFType(indicator, ViewBag.CRFIndicators))">@FunctionConfluence.GetSelectedText(indicator.ToString(), ViewBag.CRFIndicators)</li>
                }
            </ul>
        }
    </div>
}

@helper InterventionsTemplate(StrategicOutcomeRowViewModel row)
{
    @Confluence.InputTextArea(
    value: row.InterventionsProgrammingYear,
    name: "interventions-ucscpd",
    dataAttributes: new Dictionary<string, string>() { { "persist-outcomeId", row.ExpectedOutcomeId.ToString() }, { "persist-indicatorId", row.IndicatorId.ToString() } },
    maxLength: 300,
    width: "120px",
    height: "120px",
    required: true)
}

@helper OutcomesTemplate(StrategicOutcomeRowViewModel row)
{
    @Confluence.InputTextArea(
    value: row.OutcomesAchieved,
    name: "outcomesAchieved-ucscpd",
    dataAttributes: new Dictionary<string, string>() { { "persist-outcomeId", row.ExpectedOutcomeId.ToString() }, { "persist-indicatorId", row.IndicatorId.ToString() } },
    maxLength: 300,
    width: "120px",
    height: "120px",
    required: true)
}

@helper ExpectedOutcomeTemplate(StrategicOutcomeRowViewModel row)
{
    @Confluence.InputTextArea(
    value: row.ExpectedOutcomeOutput,
    name: "expectedOutcomeOutput-ucscpd",
    dataAttributes: new Dictionary<string, string>() { { "persist-outcomeId", row.ExpectedOutcomeId.ToString() }, { "persist-indicatorId", row.IndicatorId.ToString() } },
    maxLength: 300,
    width: "139px",
    height: "120px",
    required: true)
}

@functions{
    private static string getCRFType(int indicatorId, List<SelectListItem> indicators)
    {
        var crfType = "";
        var indicator = indicators.Where(x => x.Value == indicatorId.ToString());
        crfType = indicator.Select(x => x.Group.Name).First();
        return crfType;
    }

    private static string GetClassOutcome(bool IsInitialOutcome)
    {
        var classOutcome = string.Empty;

        if (!IsInitialOutcome)
        {
            classOutcome = "hide";
        }
        return classOutcome;
    }

    private static string GetClassBorderGray(bool LastRowOutcome)
    {
        var classOutcome = string.Empty;

        if (LastRowOutcome)
        {
            classOutcome = "borderButtonGray";
        }
        return classOutcome;
    }
}
