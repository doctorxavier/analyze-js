@using System.Globalization

@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.Presentation.MVC4.Helpers
@using IDB.MW.Application.CPDModule.ViewModels.Core

@model  List<OperationTypeRowViewModel>

@{
    var config = Html.RenderDataTable(Model);
    config.TableClass = "tableNormal";
    config.Name("operationsApprovedTable")
    .PrimaryKey(m => m.RowId.ToString())
    .AddPrimaryKeyToName(false)
    .UseDataTableNet(false)
    .UsePageMode(false)
    .Columns(columns =>
    {
        columns.Template(c => ColumnOperationType(c))
        .Header(Localization.GetText("CS.PortfolioSummary.OperationApprTable.OperationType"))
        .CssClassDynamic(c => GetRowShadow(c))
        .Persistent();

        columns.Template(c => ColumnInstrument(c))
        .Header(Localization.GetText("CS.PortfolioSummary.OperationApprTable.Instrument"))
        .CssClassDynamic(c => GetRowShadow(c))
        .Persistent();

        columns.Template(c => ColumnNumberOperations(c))
        .Header(Localization.GetText("CS.PortfolioSummary.OperationApprTable.NumberOperations"))
        .CssClassDynamic(c => GetRowShadow(c))
        .CssClass("textalign-right")
        .Persistent();

        columns.Template(c => ColumnTotalCurrentApprovedAmount(c))
        .Header(Localization.GetText("CPD.Portfolio.TotalOriginalAprovalAmount"))
        .CssClassDynamic(c => GetRowShadow(c))
        .CssClass("textalign-right")
        .Persistent();
    });
}

@Html.Partial("Controls/DataTable", config)

@helper ColumnOperationType(OperationTypeRowViewModel row)
{
    if(row.IsBold)
    {
        @Confluence.LabelBold(row.OperationType)
    }
    else
    {
        @Confluence.Label(row.OperationType)
    }
}

@helper ColumnInstrument(OperationTypeRowViewModel row)
{
    if (row.IsBold)
    {
        @Confluence.LabelBold(row.Instrument)
    }
    else
    {
        @Confluence.Label(row.Instrument)
    }
}

@helper ColumnNumberOperations(OperationTypeRowViewModel row)
{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatInteger = appSettings.FormatInteger;
    var greather2017 = row.Greather2017;

    if (greather2017 && ((row.IsLink && row.NumberOfOperations > 0 && !row.IsBold) || (row.IsIIC && row.NumberOfOperations > 0)))
    {
        @Confluence.LabelLink(FormatHelper.Format(row.NumberOfOperations, formatInteger),
                                name: "opertionNumberApprovedLink",
                                dataAttributes: new Dictionary<string, string> {
                                { "rowId", row.RowId.ToString() },
                                { "typeInstrument", row.OrderValue.ToString() }});
    }
    else
    {
        if (row.IsBold)
        {
            @Confluence.LabelBold(row.NumberOfOperations.ToString())
            }
        else
        {
            @Confluence.Label(row.NumberOfOperations.ToString())
        }
    }
}

@helper ColumnTotalCurrentApprovedAmount(OperationTypeRowViewModel row)
{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDecimal = appSettings.FormatDecimal;
    
    if (row.IsBold)
    {
        @Confluence.LabelBold(FormatHelper.Format(row.AmountUSD, formatDecimal).ToString())
    }
    else
    {
        @Confluence.Label(FormatHelper.Format(row.AmountUSD, formatDecimal).ToString())
    }
}

@functions{
    private static string GetRowShadow(OperationTypeRowViewModel row)
    {
        var cssClass = "";

        if (row.IsRowTitle)
        {
            cssClass = "rowShadow";
        }
        
        return cssClass;
    }
}