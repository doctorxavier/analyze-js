@using System.Globalization
@using IDB.Architecture.Language
@using IDB.Presentation.MVC4.Helpers
@using IDB.MVCControls.General.Helpers
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.MVCControls.DataTable.Models
@using IDB.Presentation.MVC4.Models.Modal
@using IDB.Presentation.MVC4.General
@using IDB.MW.Application.CountryStrategyModule.ViewModels.UseCountry
@using NewConfluence

@model List<UCSExpectedOutcomeIndicatorViewModel>

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();

    var config = Html.RenderDataTable(Model);
    config.TableClass = "tableNormal tableResultsMatrix";
    config.Name("resultMatrixDataTable")
    .PrimaryKey(m => m.UCSStrategicObjectiveId.ToString(CultureInfo.InvariantCulture))
    .AddPrimaryKeyToName(false)
    .UsePageMode(false)
    .UseDataTableNet(false)
    .Columns(columns =>
    {

        columns.Bound(c => c.ExpectedOutcome)
            .Persistent()
            .Header(Localization.GetText("CS.UseCountrySystem.ExpectedOutcome"))
            .Attribute("rowspan", x => x.RowSpanIndicatos.ToString())
            .Attribute("style", x => "width:23%;")
            .CssClassDynamic(c => GetClassOutcome(c.IsInitialOutcome))
            .CssClass("padding5pxCell borderButtonGray");

        columns.Bound(c => c.Indicator)
            .Persistent()
            .Header(Localization.GetText("CS.UseCountrySystem.Indicator"))
            .Attribute("style", x => "width:23%;")
            .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));

        columns.Bound(c => c.UnitOfMeasure)
            .Persistent()
            .Attribute("style", x => "width:110px;")
            .Header(Localization.GetText("CS.UseCountrySystem.UnitMeasure"))
            .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));

        columns.Bound(c => c.Baseline)
            .Persistent()
            .Header(Localization.GetText("CS.UseCountrySystem.Baseline"))
            .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));

        columns.Bound(c => c.BaselineYear)
            .Persistent()
            .Header(Localization.GetText("CS.UseCountrySystem.BaselineYear"))
            .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));

        columns.Bound(c => c.Source)
            .Persistent()
            .Header(Localization.GetText("CS.UseCountrySystem.MainTarget"))
            .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));

        columns.Bound(c => c.TimmingType)
            .Persistent()
            .Attribute("style", x => "width:112px;")
            .Header(Localization.GetText("CS.UseCountrySystem.ResultMatrix.Timming"))
            .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));

        columns.Template(AlignmentToCRF)
            .Persistent()
            .Header(Localization.GetText("CS.ResultMatrix.AlignmentCRF"))
            .HeaderAttribute("style", "width: 15%;")
            .CssClassDynamic(c => GetClassBorderGray(c.LastRowOutcome));
    });
}

@Html.Partial("Controls/DataTable", config)

@helper AlignmentToCRF(UCSExpectedOutcomeIndicatorViewModel model)
{
      <div class="lblvalue bold" style="margin-left:15px; font-size:11px !important;">
        @if (model.LinkedIndicators.Any())
        {
            <ul class="linked-indicators">
                @foreach (var indicator in model.LinkedIndicators)
                {
                    <li title="@(getCRFType(indicator, ViewBag.CRFIndicators))" class="@(getCRFType(indicator, ViewBag.CRFIndicators))">@FunctionConfluence.GetSelectedText(indicator.ToString(), ViewBag.CRFIndicators)</li>
                }
            </ul>
        }
    </div>  
}

@functions{
    private static string getCRFType(int indicatorId, List<SelectListItem> indicators)
    {
        var crfType = "";
        var indicator = indicators.Where(x => x.Value == indicatorId.ToString());
        crfType = indicator.Select(x => x.Group.Name).First();
        return crfType;
    }

    private static string GetClassOutcome(bool IsInitialOutcome)
    {
        var classOutcome = string.Empty;

        if (!IsInitialOutcome)
        {
            classOutcome = "hide";
        }
        return classOutcome;
    }

    private static string GetClassBorderGray(bool LastRowOutcome)
    {
        var classOutcome = string.Empty;

        if (LastRowOutcome)
        {
            classOutcome = "borderButtonGray";
        }
        return classOutcome;
    }
}


