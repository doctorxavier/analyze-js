@using IDB.Architecture.Language

@using IDB.Presentation.MVC4.Helpers
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.MW.Infrastructure.SecurityService.Enums
@using IDB.Presentation.MVC4.Areas.CountryStrategy.Models
@using IDB.Presentation.MVC4.Areas.CountryStrategy.HtmlHelpers
@using IDB.MW.Application.CountryStrategyModule.ViewModels.UseCountry
@using IDB.MW.Application.IndicatorsModuleNew.ViewModels.LinkPredefinedIndicator
@using IDB.Presentation.MVC4.Areas.CountryStrategy.Controllers
@using IDB.Presentation.MVC4.General
@using IDB.Presentation.MVC4.Models.Modal

@model UseCountrySystemViewModel

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDate = appSettings.FormatDate;
}
<input hidden data-idb-pagename="UI-CS-007-UseOfCountrySystems" />

<div data-section="modals" class="hide">
    @Display.AddModalButton(new ModalViewModel(contentSelector: "[data-name=\"cancel-modal\"]",
        title: Localization.GetText("Common.Warning"),
        type: CssClass.ModalWarningNoIcon,
        moveOriginalContent: true,
        name: "btn-open-popup-cancel",
        closeOnOverlay: false,
        allowClose: true,
        actionOnClose: "")
            .AddButton(name: "btn-cancel-cancel",
                    text: Localization.GetText("Common.Cancel"),
                    type: CssClass.ButtonLink,
                    callback: "")
            .AddButton(name: "btn-cancel-ok",
                    text: Localization.GetText("Common.Ok"),
                    type: CssClass.Button05,
                    callback: "okCancel",
                    closeAtEnd: true))
    <div data-name="cancel-modal" class="hide modalBody">
        @Localization.GetText("CS.ProductProfile.Cancel.Warning")
    </div>
</div>
<div data-section="modals" class="hide">
    @Html.Partial("EditPartial/modals/deleteIndicator")
    @Html.Partial("EditPartial/modals/removeOutcome")
    @Html.Partial("EditPartial/modals/removeObjective")
    @Html.Partial("EditPartial/modals/LinkToPredefinedIndicatorCS", (LinkPredefinesIndicatorViewModel)ViewBag.LinkIndicatorModel)
    @Html.Partial("EditPartial/modals/unlinkCRF")
</div>

<div class="row mb30">
    <div class="col-md-12">
        @Html.Partial("EditPartial/Buttons", Model)
        @Confluence.LabelMainTitle(Localization.GetText("CS.UseCountrySystem.Title"))
    </div>
</div>

<div class="row mb30">
    <div class="col-md-2">
        @Confluence.LabelsGroup(Localization.GetText("CS.UseCountrySystem.LastUpdate"),
        contentAlways: FormatHelper.Format(Model.LastUpdate, formatDate))
    </div>
    <div class="col-md-2">
        @Confluence.LabelsGroup(Localization.GetText("CS.UseCountrySystem.Status"),
        contentAlways: Model.Status)
    </div>
    <div class="col-md-2">
        @Confluence.LabelsGroup(Localization.GetText("CS.UseCountrySystem.Username"),
        contentAlways: Model.Username)
    </div>
    <div class="col-md-6 text-right">
        @Confluence.ButtonWhite(Localization.GetText("CS.UseCountrySystem.NewStrategicObjective"), name: "newStrategicObjectiveButton")
    </div>
</div>
<div class="row mb5">
    <div class="col-md-12">
        
    </div>
</div>
<div class="row mb10">
    <div class="col-md-12">
        <div class="float-right">
            @(Html.CollapseAll("collapseAll")
            .CollapseSingleSelector("[data-name=\"collapseComponent\"]"))
        </div>
    </div>
</div>

<div class="hide" data-template="true">
    @{
        var templateUCSStrategicObjective = new UCSStrategicObjectiveViewModel(){ OperationId = Model.OperationId };
        var templateOutcome = new UCSExpectedOutcomeIndicatorViewModel() { IsInitialOutcome = false, RowSpanIndicatos = 1, LastRowOutcome = true };
        templateUCSStrategicObjective.ExpectedOutcomeIndicators.Add(templateOutcome);
    }
    @Html.Partial("EditPartial/UCSStrategicAlignment", templateUCSStrategicObjective)
</div>

<div class="page ml30" name="formUseCountrySystem"
     data-parsley-validate="data-parsley-validate"
     data-parsley-excluded="[disabled]"
     data-ignore-nullable-values="false"
     data-url="@Url.Action("Save", "UseCountrySystem", new { area = "CountryStrategy" })">
    <div data-fake-pagemode="edit">
        @Confluence.InputHidden(ViewBag.SerializedViewModel, name: "SerializedData")
        <div data-pagemode="edit">
            <input type="hidden" value="@UseCountrySystemController.SAVE_MODE" name="submitMode" />
        </div>
        <div class="row mb20">
            <div class="col-md-12">
                @(Html.CollapseSingle("collapseComponent")
               .HtmlClass("component-collapse alignSubtitle")
               .AsociatedCollapseAllSelector("[data-name=\"collapseAll\"]")
               .TargetRegionSelector("#userCountrySysResultMatrixSection")
                )
                <div>
                    @Confluence.LabelBold(Localization.GetText("CS.UseCountrySystem.ResultMatrix.Title"))
                </div>
            </div>
        </div>
        <div class="row mb30 pl25" id="userCountrySysResultMatrixSection">
            <div class="col-md-12">
                <div data-section="formContent" data-fake-pagemode="edit">
                    @foreach (var strategicObjective in Model.UCSStrategicObjective)
                    {
                        @Html.Partial("EditPartial/UCSStrategicAlignment", strategicObjective)
                    }
                </div>
            </div>
        </div>
        <div class="row mb10">
            <div class="col-md-12">
                @Confluence.Label(Localization.GetText("CS.UseCountrySystem.ResultMatrix.DescriptionText"), htmlClass: "use-country-RM-title")
            </div>
        </div>
        <div class="row mb20">
            <div class="col-md-12">
                @(Html.CollapseSingle("collapseComponent")
               .HtmlClass("component-collapse alignSubtitle")
               .AsociatedCollapseAllSelector("[data-name=\"collapseAll\"]")
               .TargetRegionSelector("#financialManagementSection")
                )
                <div>
                    @Confluence.LabelBold(Localization.GetText("CS.UseCountrySystem.CsSystemRecord.FinancialManagementTitle"))
                </div>
            </div>
        </div>
        <div class="row mb30" id="financialManagementSection">
            <div class="col-md-12">
                @Html.Partial("EditPartial/CSStytemRecordTableEdit",
            new CSStytemRecordTableViewModel("FinancialManagement")
            .SetCSStytemRecordRowViewModels(Model.FinancialManagement))
            </div>
        </div>
        <div class="row mb10">
            <div class="col-md-12">
                @(Html.CollapseSingle("collapseComponent")
               .HtmlClass("component-collapse alignSubtitle")
               .AsociatedCollapseAllSelector("[data-name=\"collapseAll\"]")
               .TargetRegionSelector("#procurementSection")
                )
                <div>
                    @Confluence.LabelBold(Localization.GetText("CS.UseCountrySystem.CsSystemRecord.ProcurementTitle"))
                </div>
            </div>
        </div>
        <div class="row mb60" id="procurementSection">
            <div class="col-md-12">
                @Html.Partial("EditPartial/CSStytemRecordTableEdit",
                new CSStytemRecordTableViewModel("Procurement")
                .SetCSStytemRecordRowViewModels(Model.Procurement))
            </div>
        </div>
    </div>
</div>
<div class="row mb30">
    <div class="col-md-12">
        <div class="float-right">
            @Html.Partial("EditPartial/Buttons", Model)
        </div>
    </div>
</div>

@section scripts{

    @CountryStrategyCommon.ChangeFakePageModeToReal()
    @CountryStrategyCommon.UseCountrySystemExportFunction(Url)

    <script type="text/javascript">

        function okCancel() {
            var promise = $.Deferred();
            var url = '@Url.Action("Cancel", "UseCountrySystem", new { area = "CountryStrategy" })';
            window.location.assign(url);
            promise.resolve();
            return promise;
        }

        registerCallback(function () {

            $(document).on('change', '[name="FinancialManagement-BaselineYear"]', function (e) {
                var source = $(this);
                var valueSource = source.val();
                var elements = $('[name="FinancialManagement-BaselineYear"]');
                elements.each(function () {
                    var input = $(this);
                    input.val(valueSource);
                });
            });

            $(document).on('change', '[name="Procurement-BaselineYear"]', function (e) {
                var source = $(this);
                var valueSource = source.val();
                var elements = $('[name="Procurement-BaselineYear"]');
                elements.each(function () {
                    var input = $(this);
                    input.val(valueSource);
                });
            });

            $(document).on('change', '[name="FinancialManagement-EstimateUseYear"]', function (e) {
                var source = $(this);
                var valueSource = source.val();
                var elements = $('[name="FinancialManagement-EstimateUseYear"]');
                elements.each(function () {
                    var input = $(this);
                    input.val(valueSource);
                });
            });

            $(document).on('change', '[name="Procurement-EstimateUseYear"]', function (e) {
                var source = $(this);
                var valueSource = source.val();
                var elements = $('[name="Procurement-EstimateUseYear"]');
                elements.each(function () {
                    var input = $(this);
                    input.val(valueSource);
                });
            });

            $(document).on('click', '[name="save"]', function (e) {
                $('[name="submitMode"]').val('@UseCountrySystemController.SAVE_MODE');
                var form = $('[name="formUseCountrySystem"]');

                destroyParsley(form);
                initParsley(form);
                destroyParsley(form);
                initParsley(form);

                var response = saveContainer(form, '[name="SerializedData"]', false, null, null, false, true, null);
                if (response !== false) {
                    response.done(function (data) {
                        if ((data.ErrorMessage != null) && (data.ErrorMessage != "")) {
                            showMessage(data.ErrorMessage);
                        }
                    });
                }
            });

            $(document).on('click', '[name="cancel"]', function (e) {
                var modalBtn = $('[name="btn-open-popup-cancel"]');
                modalBtn.click();
            });

        });

  registerCallback(function () {

        $(document).on('click', '[name="newStrategicObjectiveButton"]', function (e) {
            var source = $(this);
            var newId = String.format('new-{0}', source.GenerateNewId());
            var templatesContainer = $('[data-template]');
            var templateComponent = templatesContainer.children('[data-component-id]');

            var newComponent = templateComponent.clone(false);
            newComponent.attr('data-component-id', newId);
            newComponent.find('[data-id]').attr('data-id', newId);

            var idCollapseRegion = String.format('Component-{0}', newId);
            newComponent.find('[data-collapse-single-region]').attr('data-collapse-single-region', '#' + idCollapseRegion);
            newComponent.find('.component-objective-container').attr('id', idCollapseRegion);
            newComponent.find('div[data-section-outcome]').attr('id', idCollapseRegion);

            var section = $('[data-section="formContent"]');
            newComponent.find('table tbody tr').remove();
            newComponent.appendTo(section);

            var newOrderNumber = section.find('[data-component-id]').length;
            sumToComponentOrderNumber(newComponent, newOrderNumber);
            bindHandlers(newComponent);
        });


        $(document).on('click', '[name="newIndicator"]', function (e) {

            var source = $(this);
            var newId = String.format('new-{0}', source.GenerateNewId());

            var templatesContainer = $('[data-template]');
            var templateImpact = templatesContainer.find('table tbody tr:first');
            var component = source.closest('[data-component-id]');
            var componentId = component.attr('data-component-id');
            var tableResultMatrixtbdoy = component.find('table tbody');

            var newIndicator = templateImpact.clone(false);
            newIndicator.attr('data-id', componentId);
            newIndicator.find('[data-id]').attr('data-id', componentId);
            newIndicator.find('[data-persist-indicatorid]').attr('data-persist-indicatorid', newId);

            if (tableResultMatrixtbdoy.find('tr').length > 0) {
                var trForInsertnewIndicator = source.closest('tr');
                newIndicator.find("td:first").addClass('hide');
                newIndicator.attr('data-is-initialoutcome', 'false');

                var trOutcome = trForInsertnewIndicator.prevAll('tr[data-is-initialoutcome="true"]').first();
                var tdOutcome = trOutcome.find('td:first');
                var expectedOutcome = trOutcome.find('textarea[name="ExpectedOutcome"]');
                var idOutcome = expectedOutcome.attr('data-persist-outcomeid');
                var tbody = trOutcome.parent();
                newIndicator.find('[data-persist-outcomeid]').attr('data-persist-outcomeid', idOutcome);
                newIndicator.attr('data-outcomeid', idOutcome);
                tdOutcome.attr('rowspan', (parseInt(tdOutcome.attr('rowspan')) + 1));

                var prevTr = trForInsertnewIndicator.prev();
                if (prevTr.hasClass('custom-even')) {
                    newIndicator.removeClass('custom-even');
                    newIndicator.addClass('custom-odd');
                }
                newIndicator.insertBefore(trForInsertnewIndicator);
                resizeOutcome(trOutcome);
                bindHandlers(newIndicator);
                newIndicator.find('[name="linkCRFIndicator"]').LinkModalButton(
                {
                    LinkModalId: "LinkIndicator-link-modal"
                });
            }
        });

        $(document).on('click', '[name="resultMatrixDataTable-newRow"]', function (e) {

            var source = $(this);
            var templatesContainer = $('[data-template]');
            var buttonNewOutcomeTemplate = templatesContainer.find('[name="resultMatrixDataTable-newRow"]');
            var newOutcomeId = String.format('new-{0}', buttonNewOutcomeTemplate.GenerateNewId());
            var templateOutcome = templatesContainer.find('table tbody tr:first');
            var templateButtonImpact = templatesContainer.find('table tbody tr:last');
            var containerObjective = source.closest('[data-section-outcome]');

            var newOutcome = templateOutcome.clone(false);
            var newButtonImpact = templateButtonImpact.clone(false);

            var component = source.closest('[data-component-id]');
            var componentId = component.attr('data-component-id');
            var newIndicatorId = String.format('new-{0}', newButtonImpact.find('button[name="newIndicator"]').GenerateNewId());
            var tableResultMatrixtbdoy = containerObjective.find('table tbody');

            newOutcome.attr('data-id', componentId);
            newOutcome.attr('data-outcomeid', newOutcomeId);
            newOutcome.find('[data-id]').attr('data-id', componentId);
            newOutcome.find('[data-persist-outcomeid]').attr('data-persist-outcomeid', newOutcomeId);
            newOutcome.find('[data-persist-indicatorid]').attr('data-persist-indicatorid', newIndicatorId);

            newOutcome.find("td:first").removeClass('hide');
            newOutcome.attr('data-is-initialoutcome', 'true');
            newOutcome.find("td:first").find('textarea[name="ExpectedOutcome"]').removeAttr('disabled');
            newButtonImpact.find('td:first').removeClass('hide');

            newOutcome.removeClass('custom-odd');
            newOutcome.removeClass('custom-even');
            newOutcome.addClass('custom-even');

            newOutcome.appendTo(tableResultMatrixtbdoy);
            newButtonImpact.appendTo(tableResultMatrixtbdoy);

            bindHandlers(newOutcome);
            newOutcome.find('[name="linkCRFIndicator"]').LinkModalButton(
            {
                LinkModalId: "LinkIndicator-link-modal"
            });
        });

        $(document).on('click', '[name="removeOutcome"]', function (e) {
            var source = $(this);
            deleteRowTable(e, source, "Outcomes", true);
        });

        $(document).on('click', '[name="removeObjective"]', function (e) {
            var source = $(this);
            var modalButton = $('button[name="Objective-open-warning-btn"]');
            modalButton.data('pressed-by', source);
            modalButton.click();
        });

        $('[name="linkCRFIndicator"]').LinkModalButton(
        {
            LinkModalId: "LinkIndicator-link-modal"
        });

        $(document).on('click', '[name="unlinkCRFIndicator"]', function (e) {
            var source = $(this);
            var openPopupButton = $('[name="btn-open-popup-unlink"]');
            openPopupButton.data('pressed-by', source);

            var sourceOutcome = source.closest('tr');
            var sourceComponent = source.closest('[data-component-id]');
            var component = sourceComponent.find('input[name="strtegicObjective"]');
            var componentVal = component.val();
            var dropdown = $(component.closest('div'));
            var componentText = dropdown.find('span.valueText').html();
            var componentNumber = sourceComponent.find('[name="Component-OrderNumber"]').val();
            var outcomeName = sourceOutcome.find('[name="ExpectedOutcome"]').val();

            var modalContent = $('[data-name="unlink-crf-modal"]');
            var componentContainer = modalContent.find('[data-section="component-name"]');
            var outcomeContainer = modalContent.find('[data-section="outcome-name"]');

            if (componentVal != null && componentVal != "") {
                componentContainer.html(String.format('{0} {1}', componentNumber, componentText));
            } else {
                componentContainer.html(String.format('{0}', componentNumber));
            }
            outcomeContainer.html(outcomeName);

            var ulModal = modalContent.find('ul.linked-indicator');
            var liTemplate = ulModal.find('li:first');
            liTemplate.nextAll().remove();

            var lis = sourceOutcome.find('ul.linked-indicators li');
            lis.each(function () {
                var li = $(this);

                var crfId = li.find('input').val();
                var crfText = li.find('[data-linked="text"]').html();

                var newLI = liTemplate.clone(false);
                newLI.removeClass('hide');
                newLI.attr('data-crfId', crfId);
                newLI.find('[data-linked="text"]').html(crfText);

                newLI.appendTo(ulModal);
            });

            openPopupButton.click();
        });

        $(document).on('click', '[name="removeCRF"]', function (e) {
            var source = $(this);
            var li = source.closest('li');
            if (li.hasClass('toDelete')) {
                li.removeClass('toDelete');
            } else {
                li.addClass('toDelete');
            }
        });

        window.ParsleyValidator.addValidator('intervalYear', function (value, requirement) {
            var result = true;
            if (value != null && value != '') {
                var listElements = value.split('-');

                if (listElements.length > 1 && listElements.length < 3) {
                    var firstYear = listElements[0];
                    var secondYear = listElements[1];

                    if (firstYear.length == 0 || secondYear.length == 0) {
                        result = false;
                    }
                    else {
                        if (!isNaN(firstYear) && !isNaN(secondYear)) {
                            if (parseInt(secondYear) <= parseInt(firstYear)) {
                                result = false;
                            }
                        }
                        else {
                            result = false;
                        }
                    }
                }

                if (listElements.length > 3) {
                    result = false;
                }

                if (listElements.length == 1 && isNaN(value)) {
                    result = false;
                }
            }
            return result;
        }, 32).addMessage('en', 'intervalYear', '@(Localization.GetText("CS.ResultMatrix.Outcome.ValidateBaselineYear"))');

          var outcomesTr = $('[data-is-initialoutcome="true"]');
          outcomesTr.each(function () {
              resizeOutcome($(this));
          });

    });

        function deleteRowTable(e, source, idTable, showNotificationDelete) {
            if (showNotificationDelete) {
                var modalButton = $('[name="' + idTable + '-open-warning-btn"]');
                modalButton.data('pressed-by', source);
                modalButton.click();
            } else {
                ConfirmRemove(e, source);
            }
        }

        function ConfirmRemoveObjective(e, source) {
            var promise = $.Deferred();
            
            var divContent = source.closest('div[data-component-id]');
            divContent.remove();

            var orderNumber = $('span[data-orderNumber]');
            var element = 0;
            orderNumber.each(function () {
                var source = $(this);
                var container = source.closest('div[data-component-id]');
                container.find('input[name="Component-OrderNumber"]').val(element);
                source.html(element);
                element++;
            });

            promise.resolve();
            return promise;
        }

        function ConfirmRemove(e, source) {
            var promise = $.Deferred();
            var tr = source.closest('tr');

            if (tr.attr('data-is-initialoutcome') == "true") {
                var nextTr = tr.next();
                var attrInitialOutcome = nextTr.attr('data-is-initialoutcome');

                if (attrInitialOutcome == undefined || attrInitialOutcome == null) {
                    nextTr.remove();
                }

                if (attrInitialOutcome == "false") {
                    var valueExpectedOutcome = tr.find('textarea[name="ExpectedOutcome"]').val();
                    nextTr.find('textarea[name="ExpectedOutcome"]').val(valueExpectedOutcome);
                    nextTr.find('td:first').attr('rowspan', (parseInt(tr.find('td:first').attr('rowspan')) - 1));
                    nextTr.find('td:first').removeClass('hide');
                    nextTr.find('textarea[name="ExpectedOutcome"]').removeAttr('disabled');
                    nextTr.attr('data-is-initialoutcome', 'true');
                }
            }

            if (tr.attr('data-is-initialoutcome') == "false") {
                var trOutcome = tr.prevAll('tr[data-is-initialoutcome="true"]').first();
                var tdOutcome = trOutcome.find('td:first');
                
                tdOutcome.attr('rowspan', (parseInt(tdOutcome.attr('rowspan')) - 1));
;
            }

            

            var outcomeId = tr.attr('data-outcomeid');
            tr.remove();
            
            var trsAffected = $('tr[data-outcomeid="' + outcomeId + '"]');

            var element = 1;
            trsAffected.each(
                function (index) {
                    var source = $(this);
                    if (element % 2 == 0) {
                        source.removeClass('custom-even');
                        source.removeClass('custom-odd');
                        source.addClass('custom-odd');
                    } else {
                        source.removeClass('custom-even');
                        source.removeClass('custom-odd');
                        source.addClass('custom-even');
                    }
                    element++;
                }
            );
            
            trsAffected.first().find('.textAreaResultMatrix').css('height', 0)
            resizeOutcome(trsAffected.first());
            if (trsAffected.length == 1) {
                var firstTr = trsAffected.first();
                var newHeight = parseInt(firstTr.find('.textAreaResultMatrix').css('height').slice(0, -2))
                firstTr.find('.textAreaResultMatrix').css('height', newHeight - 20)
            }
            promise.resolve();
            return promise;
        }

        function LinkIndicatorLinkItems(source, indicator) {
            var outcomeContainer = source.closest('[data-outcome-container]');
            var objectiveContainer = source.closest('[data-objective-container]').last();
            var trContainer = source.closest('tr');

            var ulLinkedIndicators = outcomeContainer.find('ul.linked-indicators');

            var existIndicator = ulLinkedIndicators.find('li').filter(function () {
                var li = $(this);
                var indicatorId = li.find('input').val()
                return indicatorId == indicator.IndicatorId;
            });

            if (existIndicator.length > 0) {
                if ($('div.vex div.new-modal-content div[data-showmessage]').text() != '@Localization.GetText("CS.ResultMatrix.Message.IndicatorAlreadyLinked")') {
                    showMessage('@Localization.GetText("CS.ResultMatrix.Message.IndicatorAlreadyLinked")');
                }
                return true;
            }

            var input = objectiveContainer.find('input[name="Objective-OrderNumber"]');
            var componentId = input.attr('data-id');
            var objectiveId = input.attr('data-persist-objectiveid');
            var outcomeId = trContainer.find('[name="ExpectedOutcome"]').attr('data-persist-outcomeid');
            var indicatorId = trContainer.find('[name="ExpectedOutcome"]').attr('data-persist-indicatorid');

            var newLI = $('<li>');

            var spanInput = $('<span>');
            spanInput.attr('data-linked', 'input');
            var spanText = $('<span>');
            spanText.attr('data-linked', 'text');

            spanInput.appendTo(newLI);
            spanText.appendTo(newLI);

            spanText.html(String.format('{0}', indicator.IndicatorName));

            var input = $('<input>');
            input.attr('name', 'LinkedIndicator');
            input.attr('type', 'text');
            input.val(indicator.IndicatorId);
            input.addClass('inputText hide');
            input.attr('data-id', componentId);
            input.attr('data-persist-objectiveid', objectiveId);
            input.attr('data-persist-outcomeid', outcomeId);
            input.attr('data-persist-indicatorid', indicatorId);

            input.appendTo(spanInput);

            if (indicator.IsAlignment) {
                newLI.attr('class', 'alignment');
                newLI.attr('title', 'alignment');
            } else if (indicator.IsContribution) {
                newLI.attr('class', 'contribution');
                newLI.attr('title', 'contribution');
            }
            newLI.appendTo(ulLinkedIndicators);
            var tr = trContainer.parent().find('tr[data-id="' + outcomeId + '"][data-is-initialoutcome="true"]').first();
            resizeOutcome(tr);
        }

        function sumToComponentOrderNumber(components, value) {
            if (components == null) {
                return;
            }
            if (components.length == null) {
                components = [components];
            }

            components.each(function () {
                var component = $(this);

                var orderNumber = component.find('input[name="Component-OrderNumber"]');
                var orderNumberValue = parseInt(orderNumber.val());
                var newOrderNumnber = orderNumberValue + value;

                orderNumber.val(newOrderNumnber);
                component.find('.component-order-number').html(newOrderNumnber);
                component.find('[data-order-number="component"]').html(newOrderNumnber);
            });
        }

        function unlinkCRF(e, source) {
            var promise = $.Deferred();

            var modalContainer = $('[data-name="unlink-crf-modal"]');
            var liToRemove = modalContainer.find('ul.linked-indicator li.toDelete[data-crfId]');

            if (liToRemove.length > 0) {

                var idsToRemove = [];
                liToRemove.each(function () {
                    var li = $(this);
                    var crfId = li.attr('data-crfId');
                    idsToRemove.push(crfId);
                });

                var outcomeContainer = source.closest('[data-outcome-container]');
                var ul = outcomeContainer.find('ul.linked-indicators');
                var inputs = ul.find('input');

                inputsToRemove = inputs.filter(function () {
                    var input = $(this);
                    return idsToRemove.indexOf(input.val()) != -1;
                });

                inputsToRemove.closest('li').remove();
                var currentTr = outcomeContainer.parent().parent();
                var outcomeId = currentTr.attr('data-outcomeid');
                var firstTr = currentTr.parent().find('tr[data-outcomeid="' + outcomeId + '"]').first();
                firstTr.find('.textAreaResultMatrix').css('height', 0);
                resizeOutcome(firstTr);
            } else {
                showMessage('@Localization.GetText("CS.ResultMatrix.Message.UnlinkIndicatorNoneSelected")');
            }

            promise.resolve();
            return promise;
        }

        function resizeOutcome(tr) {
            var tbody = tr.parent();
            var dataId = tr.attr('data-id');
            var dataOutcomeId = tr.attr('data-outcomeid');
            var heightSum = 0;

            var rows = tbody.find('[data-id="' + dataId + '"][data-outcomeid="' + dataOutcomeId + '"]');
            rows.each(function () {
                var row = $(this);
                heightSum += parseInt(row.css('height').slice(0, -2));
            });

            if(rows.length == 1){
                heightSum -= 20;
            }
            
            tr.find('.textAreaResultMatrix').css('height', heightSum);
            resizeIframe();
        }

    </script>
}

