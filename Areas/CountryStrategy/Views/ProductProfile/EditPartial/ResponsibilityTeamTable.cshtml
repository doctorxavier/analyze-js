@using System.Globalization

@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Application.CountryStrategyModule.ViewModels.ProductProfile
@using IDB.MW.Domain.Values
@using IDB.MW.Infrastructure.Configuration
@using IDB.Presentation.MVC4.General
@using IDB.Presentation.MVC4.Helpers
@using IDB.Presentation.MVC4.Models.Modal

@model  List<OperationTeamRowViewModel>

<div class="row row-header">
    <div class="col-md-10 subtitleGroup">
        @Localization.GetText("CS.ProductData.Team")
    </div>
    <div class="col-md-2 text-right ">
        @Confluence.ButtonExcel("TeamDataReport", "exportTeamData")
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        @{
            var configOperationTeamTable = Html.RenderDataTable(Model);
            configOperationTeamTable.TableClass = "tableNormal endSpacing";
            configOperationTeamTable.Name("operationTeamsTable")
                .PrimaryKey(m => m.RowId.ToString(CultureInfo.InvariantCulture))
                .AddPrimaryKeyToName(false)
                .UsePageMode(false)
                .Columns(columns =>
                {
                    columns.Template(c => ColumnName(c, isTemplate: false))
                    .Header(Localization.GetText("CS.ProductData.Name"))
                    .Attribute("style", c => "width:250px;");

                    columns.Template(c => ColumnRole(c, isTemplate: false))
                    .Header(Localization.GetText("CS.ProductData.Role"))
                    .Attribute("style", c => "max-width:320px;");

                    columns.Template(c => Confluence.Label(c.UserName))
                    .Header(Localization.GetText("CS.ProductData.UserID"));

                    columns.Template(c =>Confluence.Label(c.OrganizationalUnit))
                    .Header(Localization.GetText("CS.ProductData.OrganizationalUnit"));

                    columns.Template(c => Confluence.Label(c.Delegate))
                    .Header(Localization.GetText("CS.ProductData.Delegate"));

                    columns.Template(ColumnActions).Attribute("style", c => "width:50px;").Center();
                });

            configOperationTeamTable.RowTemplates(x =>
            {
                x.Create(RowTemplateType.FirstRow, Template);
            });
        }
        @Html.Partial("Controls/DataTable", configOperationTeamTable)
        <div class="col-md-12 mb5">
            @Confluence.InputText("hide", "inputhide", htmlClass: "hide", dataAttributes: new Dictionary<string, string> { { "parsley-OnlyOneTeamLeader", ViewBag.TeamLeaderRoleId.Id.ToString() } })
        </div>
        <div class="col-md-12 text-center mt5">
            @Confluence.ButtonAddNewRows(Localization.GetText("CS.ProductData.NewTeamMember"), "operationTeamsTable", name: "addNewTeamMember")
        </div>
    </div>
</div>

@helper Template(OperationTeamRowViewModel row)
{
    row = new OperationTeamRowViewModel()
    {
        RowId = 0,
        Name = "",
        Role = null,
        RoleName = "",
        UserName = "",
        OrganizationalUnit = "",
        OrganizationalUnitId = null,
        OrganizationalUnitCode = "",
        Delegate = "",
        PictureUrl = "",
        CodeRoleType = "",
    };
    <tr data-id="new-" class="hide" data-name="templateTeam">
        <td class="">
            @ColumnName(row, isTemplate: true)
        </td>
        <td class="">
            @ColumnRole(row, isTemplate: true)
        </td>
        <td data-name="username" class="">
            @Confluence.Label(string.Empty)
        </td>

        <td data-name="organizationalUnit" class="">
            @Confluence.Label(string.Empty)
            @Confluence.InputHidden(string.Empty, "OrganizationalUnitCode")
        </td>

        <td data-name="delegate" class="">
            @Confluence.Label(string.Empty)
            
        </td>
        <td class="text-center">
            @ColumnActions(row)
        </td>
    </tr>
}

@helper ColumnName(OperationTeamRowViewModel row, bool isTemplate)
{
    if (isTemplate)
    {
        @Confluence.InputDropDownAsyncPicture(string.Empty, "userNameTeam",
                Url.Action("GetUsersList", "ProductProfile", new { area = "CountryStrategy" }),
                textSelected: string.Empty, pathImage: string.Empty, disabled: true, width: "80%")
        
    }
    else
    {
        @Confluence.ListHelpers(new List<HelperResult>
        {
            Confluence.PictureElement(row.PictureUrl, Confluence.Label(row.Name)),
            Confluence.InputHidden(row.UserName, "notMapField"),        
        })
    }
}

@helper ColumnRole(OperationTeamRowViewModel row, bool isTemplate)
{

    var list = ViewBag.OperationTeamsRoleList;

    @Confluence.InputDropDown(row.Role.ToString(), "operationTeamsRole", list, disabled: isTemplate, width:"100%")

}


@helper ColumnActions(OperationTeamRowViewModel row)
{

    @Confluence.ButtonTrash(null, "removeRowTeamMember")
}

<div class="hide">
    @Display.AddModalButton(new ModalViewModel(contentSelector: "#operationTeamsTable-warning-remove",
        title: Localization.GetText("COMMON.Warning"),
        type: CssClass.ModalWarningNoIcon,
        moveOriginalContent: true,
        name: "operationTeamsTable-open-warning-btn",
        closeOnOverlay: false,
        allowClose: true,
        actionOnClose: "")
          .AddButton(name: "cancel-delete",
          text: Localization.GetText("COMMON.Cancel"),
          type: CssClass.ButtonLink,
          callback: "")
              .AddButton(name: "confirm-delete",
              text: Localization.GetText("COMMON.Ok"),
              type: CssClass.Button05,
              callback: "ConfirmRemove",
              closeAtEnd: true))
    <div id="operationTeamsTable-warning-remove" class="modalBody">
        @Localization.GetText("CS.PorductData.Modal.TextDelete")
    </div>
</div>