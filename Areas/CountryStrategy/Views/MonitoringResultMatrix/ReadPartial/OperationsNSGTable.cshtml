@using System.linq

@using IDB.MW.Application.CountryStrategyModule.ViewModels.MonitoringResultMatrix
@using IDB.MVCControls.DataTable.Helpers
@using System.Globalization
@using IDB.MVCControls.DataTable.Models
@using IDB.MVCControls.General.Helpers
@using IDB.Presentation.MVC4.Areas.CountryStrategy.HtmlHelpers
@using IDB.Presentation.MVC4.Areas.CountryStrategy.Models

@model OperationsNsgTableViewModel

@{
    var config = Html.RenderDataTable(Model.OperationsNSGTableRowViewModel.ToList());
    config.TableClass = "tableNormal";
    config.Name("OperationsNSG")
        .PrimaryKey(x => x.OperationId.ToString(CultureInfo.InvariantCulture))
        .AddPrimaryKeyToName(false)
        .UseDataTableNet(false)
        .UsePageMode(false)

        .Columns(columns =>
        {
            columns.Bound(c => c.OperationNumber)
            .HeaderAttribute("style", "width: 180px;")
            .Persistent()
            .Header(Localization.GetText("CS.Monitoring.OperationTable.OperationNumber"));

            columns.Bound(c => c.OperationName)
            .HeaderAttribute("style", "width: 30%;")
            .Attribute("style", c => "width: 30%;")
            .Persistent()
            .Header(Localization.GetText("CS.Monitoring.OperationTable.OperationName"));

            columns.Bound(c => c.OperationYear)
            .HeaderAttribute("style", "width: 150px;")
            .Attribute("style", c => "width: 150px;")
            .Persistent()
            .Header(Localization.GetText("CS.Monitoring.OperationTable.OperationYear"));

            columns.Bound(c => c.StatusStage)
            .HeaderAttribute("style", "width: 20%;")
            .Attribute("style", c => "width: 20%;")
            .Persistent()
            .Header(Localization.GetText("CS.Monitoring.StageStatus"));

            columns.Bound(c => c.PipelinePortfolio)
            .HeaderAttribute("style", "width: 20%;")
            .Attribute("style", c => "width: 20%;")
            .Persistent()
            .Header(Localization.GetText("CS.Monitoring.PipelinePortfolio"));

            columns.Template(IndicatorsIcon)
            .Persistent()
            .HeaderAttribute("style", "width: 230px; line-height: normal;")
            .Attribute("style", c => "width: 230px;  line-height: normal;")
            .Center()
            .Header(Localization.GetText("CS.Monitoring.OperationTable.CrossCuttingThemes"));

            columns.Template(Actions)
            .Center()
            .HeaderAttribute("style", "width: 40px;")
            .Attribute("style", c => "width: 40px;")
            .Persistent();
        })
        .RowTemplates(x => x.Create(RowTemplateType.AllRows, DetailsOperation));
}

@Html.Partial("Controls/DataTable", config)


@helper IndicatorsIcon(OperationNSGViewModel row)
{
    foreach (var item in row.IndicatorsIcon)
    {
        if (item.ImageIconId == ViewBag.SocialInclusion)
        {
                <span class="strSInclusionImg tooltip tooltip-cs" data-id="@item.IndicatorId" data-alt="@item.IndicatorName"></span>
        }
        else if (item.ImageIconId == ViewBag.HighProductivity)
        {
                <span class="strAlignHProductivityImg tooltip tooltip-cs" data-id="@item.IndicatorId" data-alt="@item.IndicatorName"></span>
        }
        else if (item.ImageIconId == ViewBag.FullEconomic)
        {
                <span class="strAlignFullEconomicImg tooltip tooltip-cs" data-id="@item.IndicatorId" data-alt="@item.IndicatorName"></span>
        }
        else if (item.ImageIconId == ViewBag.ClimateChange)
        {
                <span class="strAlignClimateChangeImg tooltip tooltip-cs" data-id="@item.IndicatorId" data-alt="@item.IndicatorName"></span>
        }
        else if (item.ImageIconId == ViewBag.Equality)
        {
                <span class="strAlignEqualityImg tooltip tooltip-cs" data-id="@item.IndicatorId" data-alt="@item.IndicatorName"></span>
        }
        else if (item.ImageIconId == ViewBag.InstCapacity)
        {
                <span class="strAlignInstCapacityImg tooltip tooltip-cs" data-id="@item.IndicatorId" data-alt="@item.IndicatorName"></span>
        }
        else
        {
                <span data-id="@item.IndicatorId"></span>
        }
    }
}

@helper Actions(OperationNSGViewModel row)
{
    if (row.DetailsOperationNSG.Outcomes.Any())
    {

        @(Html.CollapseSingle("collapse-outcome")
                    .HtmlClass("arrow")
                    .AnimationDuration(0)
                    .TargetRegionSelector(x =>
                    {
                        x.Closest("tr");
                        x.Next();
                    })
                    .AsociatedCollapseAllSelector("[data-name=\"collapseAll\"]")
        )
    }
}

@helper OutcomeList(OutcomeNSGViewModel Outcome)
{
    <div class="second-level-order-number second-level-order-number-tab">@Outcome.OrderNumber</div>
    <div style="margin-bottom:8px;">
        @Outcome.OutcomeName.HtmlEncode()
    </div>
}

@helper DetailsOperation(OperationNSGViewModel operationRow)
{

var listDetails = new List<OutcomeNSGViewModel>();
listDetails = operationRow.DetailsOperationNSG.Outcomes.ToList();

if (listDetails.Any())
{
    <tr data-details="detail-outcome">
        <td colspan="6" class="tab-detail-row">

            @{
                var table = Html.RenderDataTable(listDetails);
                table.TableClass = "tableNormal";
                table.Name("Outcomes")
                .AddPrimaryKeyToName(false)
                .UseDataTableNet(false)
                .UsePageMode(false)
                .Columns(columns =>
                {
                    columns.Template(c => !String.IsNullOrEmpty(c.OutcomeName) ?
                            OutcomeList(c)
                            :
                            OutcomeList(new OutcomeNSGViewModel() { OrderNumber = 0, OutcomeName = "" })
                    )
                    .Persistent()
                    .HeaderAttribute("style", "width: 25%;")
                    .Header(Localization.GetText("CS.Monitoring.OutcomeTableNSG"));
                });
            }
            <div>
                @Html.Partial("Controls/DataTable", table)
            </div>
        </td>
    </tr>
    }
}