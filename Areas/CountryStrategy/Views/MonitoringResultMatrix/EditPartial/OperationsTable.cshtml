@using IDB.MW.Application.CountryStrategyModule.ViewModels.MonitoringResultMatrix
@using IDB.MVCControls.DataTable.Helpers
@using System.Globalization
@using IDB.MVCControls.DataTable.Models
@using IDB.MVCControls.General.Helpers
@using IDB.Presentation.MVC4.Areas.CountryStrategy.HtmlHelpers
@using IDB.Presentation.MVC4.Areas.CountryStrategy.Models

@model OperationsTableViewModel

@{
    var config = Html.RenderDataTable(Model.OperationsTableRowViewModel.ToList());
    config.TableClass = "tableNormal";
    config.Name(Model.TypeTable.ToString() + "-Operations")
        .PrimaryKey(x => x.OperationId.ToString(CultureInfo.InvariantCulture))
        .AddPrimaryKeyToName(false)
        .UseDataTableNet(false)
        .UsePageMode(false)

        .Columns(columns =>
        {
            columns.Template(c => Confluence.LabelLink(c.OperationNumber,
            "link-OperationNumber",
            dataAttributes: new Dictionary<string, string> { { "operationNumber", c.OperationNumber.ToString() } }))
            .HeaderAttribute("style", "width: 160px;max-width:160px;min-width:160px")
            .Attribute("style", c => "width: 160px;max-width:160px;min-width:160px")
            .Persistent()
            .Header(Localization.GetText("CS.Monitoring.OperationTable.OperationNumber"));

            columns.Bound(c => c.OperationName)
            .Persistent()
            .Header(Localization.GetText("CS.Monitoring.OperationTable.OperationName"));

            columns.Bound(c => c.OperationYear)
            .HeaderAttribute("style", "width: 100px;max-width:100px;min-width:100px;")
            .Attribute("style", c => "text-align: center;width: 100px;max-width:100px;min-width:100px;")
            .Persistent()
            .Header(Localization.GetText("CS.Monitoring.OperationTable.OperationYear"));

            columns.Bound(c => c.StatusStage)
            .Persistent()
            .Header(Localization.GetText("CS.Monitoring.StatusOverallStage"));

            columns.Template(c => Confluence.InputCheckbox(c.IsApprovedDuringCS, name: "isApprovedInCS", label: string.Empty, disabled: true))
            .HeaderAttribute("style", "width: 165px;max-width:165px;min-width:165px;")
            .Attribute("style", c => "text-align: center;width: 165px;max-width:165px;min-width:165px;")
            .Persistent()
            .Header(Localization.GetText("CS.Monitoring.OperationTable.ApprovedDuringCS"));

            columns.Template(IndicatorsIcon)
            .Persistent()
            .HeaderAttribute("style", "width: 160px;max-width:160px;min-width:160px;")
            .Attribute("style", c => "width: 160px;max-width:160px;min-width:160px; line-height: normal;")
            .Center()
            .Header(Localization.GetText("CS.Monitoring.OperationTable.CrossCuttingThemes"));

            columns.Template(DeleteOperation)
            .HeaderAttribute("style", "width: 60px;max-width:60px;min-width:60px;")
            .Attribute("style", c => "width: 60px;max-width:60px;min-width:60px;text-align: center;")
            .Center()
            .Persistent();
        });
}

@Html.Partial("Controls/DataTable", config)

@helper DeleteOperation(OperationViewModel row)
{
    if (row.IsManual == true || row.IsImportByObjectiveAsociated == true)
    {
        @Confluence.ButtonTrash("", "removeOperation")
    }

    @Confluence.InputHidden(row.OperationId.ToString(),
        name: Model.TypeTable.ToString() + "-operationId",
        required: false,
        dataAttributes:
        new Dictionary<string, string> { { "id", row.OperationId.ToString() } })

    @Confluence.InputHidden(row.IsManual.ToString(),
        name: Model.TypeTable.ToString() + "-isManual",
        required: false,
        dataAttributes:
        new Dictionary<string, string> { { "id", row.OperationId.ToString() } })

    @Confluence.InputHidden(row.IsImportByObjectiveAsociated.ToString(),
        name: Model.TypeTable.ToString() + "-isImport",
        required: false,
        dataAttributes:
        new Dictionary<string, string> { { "id", row.OperationId.ToString() } })
}

@helper IndicatorsIcon(OperationViewModel row)
{    
    foreach (var item in row.IndicatorsIcon)
    {
        if (item.ImageIconId == ViewBag.SocialInclusion)
        {
            <span class="strSInclusionImg tooltip tooltip-cs" data-alt="@item.IndicatorName"></span>
        }
        else if (item.ImageIconId == ViewBag.HighProductivity)
        {
            <span class="strAlignHProductivityImg tooltip tooltip-cs" data-alt="@item.IndicatorName"></span>
        }
        else if (item.ImageIconId == ViewBag.FullEconomic)
        {
            <span class="strAlignFullEconomicImg tooltip tooltip-cs" data-alt="@item.IndicatorName"></span>
        }
        else if (item.ImageIconId == ViewBag.ClimateChange)
        {
            <span class="strAlignClimateChangeImg tooltip tooltip-cs" data-alt="@item.IndicatorName"></span>
        }
        else if (item.ImageIconId == ViewBag.Equality)
        {
            <span class="strAlignEqualityImg tooltip tooltip-cs" data-alt="@item.IndicatorName"></span>
        }
        else if (item.ImageIconId == ViewBag.InstCapacity)
        {
            <span class="strAlignInstCapacityImg tooltip tooltip-cs" data-alt="@item.IndicatorName"></span>
        }
    }
}
