@using IDB.MW.Application.CountryStrategyModule.ViewModels.MonitoringResultMatrix
@using IDB.Presentation.MVC4.Areas.CountryStrategy.Models
@using IDB.MW.Application.CountryStrategyModule.Enums
@using System.Configuration

@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.Presentation.MVC4.Areas.CountryStrategy.HtmlHelpers

@model CSObjectiveDetailViewModel

@if (Model != null)
{
    <input type="hidden" data-idb-pagename="UI-CS-008-ObjectiveDetails" />

    <div data-section="modals" class="hide">
        @Html.Partial("EditPartial/modals/addOperation")
        @Html.Partial("EditPartial/modals/deleteOperation")
    </div>
    <div class="row mb30">
        <div class="col-md-12">
            @Html.Partial("EditPartial/Buttons")
            @Confluence.Navigation(Confluence.LabelMainTitle(Model.TitleMonitoring), Url.Action("Read", "ResultMatrix"))
        </div>
    </div>
    <div class="row mb10" style="margin-bottom: 30px;">
        <div class="col-md-12 lblvalue bold">
            @Model.ObjectiveName.HtmlEncode()
        </div>
    </div>
    <div name="formMonitoringOperations"
         data-parsley-validate="data-parsley-validate"
         data-parsley-excluded="[disabled]"
         data-ignore-nullable-values="true"
         data-url="@Url.Action("Save", "MonitoringResultMatrix", new { area = "CountryStrategy" })">

        <div data-fake-pagemode="edit">
            @Confluence.InputHidden(ViewBag.SerializedViewModel, name: "SerializedData")
            <div class="hide">
                @Confluence.InputHidden(Model.ObjectiveId.ToString(), name: "page-objectiveId", required: false)
                @Confluence.InputHidden(Model.IsAligned.ToString(), name: "page-isAligned", required: false)
            </div>
            <div class="row mb30" @(Model.InvestLoans.Any() ?  "" : "hidden")>
                <div class="col-md-12 mb10 lblcontent">
                    @Confluence.LabelBold(Localization.GetText("CS.Portfolio.IDBLoans"))
                </div>
                <div class="col-md-12">
                    @Html.Partial("EditPartial/OperationsTable", new OperationsTableViewModel()
                    .SetOperationsTableRowViewModel(Model.InvestLoans, CSMonitoringTypeTable.IBDLoans))
                </div>
            </div>
            <div class="row mb30" @(Model.Guarantees.Any() ?  "" : "hidden")>
                <div class="col-md-12 mb10 lblcontent">
                    @Confluence.LabelBold(Localization.GetText("CS.Portfolio.IDBGuarantees"))
                </div>
                <div class="col-md-12">
                    @Html.Partial("EditPartial/OperationsTable", new OperationsTableViewModel()
                     .SetOperationsTableRowViewModel(Model.Guarantees, CSMonitoringTypeTable.IDBGuarantees))
                </div>
            </div>
            <div class="row mb30" @(Model.InvestGrants.Any() ?  "" : "hidden")>
                <div class="col-md-12 mb10 lblcontent">
                    @Confluence.LabelBold(Localization.GetText("CS.Portfolio.IDBInvestmentGrants"))
                </div>
                <div class="col-md-12">
                    @Html.Partial("EditPartial/OperationsTable", new OperationsTableViewModel()
                    .SetOperationsTableRowViewModel(Model.InvestGrants, CSMonitoringTypeTable.IDBInvestGrants))
                </div>
            </div>
            <div class="row mb30" @(Model.TCOperations.Any() ?  "" : "hidden")>
                <div class="col-md-12 mb10 lblcontent">
                    @Confluence.LabelBold(Localization.GetText("CS.Portfolio.IDBTechnicalCooperations"))
                </div>
                <div class="col-md-12">
                    @Html.Partial("EditPartial/OperationsTable", new OperationsTableViewModel()
                     .SetOperationsTableRowViewModel(Model.TCOperations, CSMonitoringTypeTable.IDBTechnicalCoop))
                </div>
            </div>
            <div class="row mb30" @(Model.NSGOperations.Any() ?  "" : "hidden")>
                <div class="col-md-12 mb10 lblcontent">
                    @Confluence.LabelBold(Localization.GetText("CS.Monitoring.NSGOperation"))
                </div>
                <div class="col-md-12">
                    @Html.Partial("EditPartial/OperationsNSGTable", new OperationsNsgTableViewModel()
                    .SetOperationsNSGTableRowViewModel(Model.NSGOperations))
                </div>
            </div>
            <div class="row mb30" @(Model.MIFLoans.Any() ?  "" : "hidden")>
                <div class="col-md-12 mb10 lblcontent">
                    @Confluence.LabelBold(Localization.GetText("CS.Monitoring.MIFLoans"))
                </div>
                <div class="col-md-12">
                    @Html.Partial("EditPartial/OperationsTable", new OperationsTableViewModel()
                    .SetOperationsTableRowViewModel(Model.MIFLoans, CSMonitoringTypeTable.MIFLoans))
                </div>
            </div>
            <div class="row mb30" @(Model.MIFEquities.Any() ?  "" : "hidden")>
                <div class="col-md-12 mb10 lblcontent">
                    @Confluence.LabelBold(Localization.GetText("CS.Monitoring.MIFEquities"))
                </div>
                <div class="col-md-12">
                    @Html.Partial("EditPartial/OperationsTable", new OperationsTableViewModel()
                    .SetOperationsTableRowViewModel(Model.MIFEquities, CSMonitoringTypeTable.MIFEquities))
                </div>
            </div>
            <div class="row mb30" @(Model.MIFGuarantees.Any() ?  "" : "hidden")>
                <div class="col-md-12 mb10 lblcontent">
                    @Confluence.LabelBold(Localization.GetText("CS.Monitoring.MIFGuarantees"))
                </div>
                <div class="col-md-12">
                    @Html.Partial("EditPartial/OperationsTable", new OperationsTableViewModel()
                    .SetOperationsTableRowViewModel(Model.MIFGuarantees, CSMonitoringTypeTable.MIFGuarantees))
                </div>
            </div>
            <div class="row mb30" @(Model.MIFIvestGrants.Any() ?  "" : "hidden")>
                <div class="col-md-12 mb10 lblcontent">
                    @Confluence.LabelBold(Localization.GetText("CS.Monitoring.MIFInvestGrants"))
                </div>
                <div class="col-md-12">
                    @Html.Partial("EditPartial/OperationsTable", new OperationsTableViewModel()
                    .SetOperationsTableRowViewModel(Model.MIFIvestGrants, CSMonitoringTypeTable.MIFInvestGrants))
                </div>
            </div>
            <div class="row mb30" @(Model.MIFTCOperations.Any() ?  "" : "hidden")>
                <div class="col-md-12 mb10 lblcontent">
                    @Confluence.LabelBold(Localization.GetText("CS.Monitoring.MIFTechnicalCooperations"))
                </div>
                <div class="col-md-12">
                    @Html.Partial("EditPartial/OperationsTable", new OperationsTableViewModel()
                    .SetOperationsTableRowViewModel(Model.MIFTCOperations, CSMonitoringTypeTable.MIFTechnicalCoop))
                </div>
            </div>
            <div class="row mb80">
                <div class="col-md-12 text-center mt50">
                    @Confluence.ButtonAddNewRows(text: Localization.GetText("CS.Monitoring.OperationTable.AddOperation"), tableid: "Manual", name: "addOperationManual")
                </div>
            </div>
        </div>
    </div>
    <div class="row mb30">
        <div class="col-md-12">
            @Html.Partial("EditPartial/Buttons")
        </div>
    </div>

    @section scripts{

        @CountryStrategyCommon.ChangeFakePageModeToReal()

        <script type="text/javascript">
            registerCallback(function () {

                function collapseAll() {
                    $('[data-name="collapseAll"]').click();
                    $('[data-name="collapse-outcome"]').click();
                }

                collapseAll();

                $('span.tooltip').tooltipster({
                    theme: 'tooltipster-mrblue',
                    content: ' ',
                    contentAsHTML: true,
                    maxWidth: 310,
                    animation: 'grow',
                    animationDuration: 0,
                    delay: 0,
                    functionBefore: function (origin, continueTooltip) {
                        continueTooltip();
                        var contentAlt = origin.attr('data-alt');
                        var contentToolTip = '<div class="row"><div class="col-md-12">' + contentAlt + '</div></div>';
                        origin.tooltipster('content', contentToolTip);
                    }
                });

                $(document).on('click', 'button[name="link-OperationNumber"]', function (e) {
                    var source = $(this);
                    var operationNumber = source.attr('data-operationNumber');
                    var url = '/Operation/' + source.attr('data-operationnumber');
                    url = url.replace("_oper_", operationNumber);
                    window.open(url, '_blank');
                });

                $(document).on('click', 'button[name="link-OutcomeIndicatorsOutputs"]', function (e) {
                    var source = $(this);
                    var operationNumber = source.attr('data-operationNumber');
                    var url = '/Operation/' + source.attr('data-operationnumber');
                    url = url.replace("_oper_", operationNumber);
                    window.open(url, '_blank');
                });

                $(document).on('click', 'button[name="link-AverageScorePCR"]', function (e) {
                    var source = $(this);
                    var operationNumber = source.attr('data-operationNumber');
                    var url = '/Operation/' + source.attr('data-operationnumber');
                    url = url.replace("_oper_", operationNumber);
                    window.open(url, '_blank');
                });

                $(document).on('click', 'span.arrow', function (e) {
                    var collasedArrowButtons = $('span[class="arrow collapse-single-button collapse"]');
                    var noCollasedArrowButtons = $('span[class="arrow collapse-single-button"]');
                    var buttonCollapse = $('div.buttonExpand');
                    if ((collasedArrowButtons.length == 0 && !buttonCollapse.hasClass('collapse')) ||
                        (noCollasedArrowButtons.length == 0 && buttonCollapse.hasClass('collapse'))) {
                        buttonCollapse.click();
                    }
                });


                $(document).on('click', '[name="save"]', function (e) {
                    var form = $('[name="formMonitoringOperations"]');
                    var response = saveContainer(form, '[name="SerializedData"]', false, null, null, false, true, null);
                    if (response !== false) {
                        response.done(function (data) {
                            if ((data.ErrorMessage != null) && (data.ErrorMessage != "")) {
                                showMessage(data.ErrorMessage);
                            }
                        });
                    }
                });

                $(document).on('click', '[name="addOperationManual"]', function (e) {
                    var buttonModal = $('[name="btn-open-popup-addOperation"]');
                    buttonModal.click();
                });

                $(document).on('click', '[name="cancel"]', function (e) {

                    var csObjectiveId = '@ViewBag.CSObjectiveId';
                    var isAligned = '@ViewBag.isAligned' == 'True';

                    var url = '@Url.Action("Cancel", "MonitoringResultMatrix", new { area = "CountryStrategy" })' +
                              '?csObjectiveId=' + csObjectiveId +
                              '&isAligned=' + isAligned;;
                    window.location.assign(url);
                });

                $(document).on('click', '[name="removeOperation"]', function (e) {
                    var source = $(this);
                    deleteRowTable(e, source, "manualOperations", true);
                });

            });

            function addOperation() {

                var promise = $.Deferred();

                var operationTextInput = $('input[name="operationsSearch_text"]');
                var operationIdInput = $('input[name="operationsSearch"]');

                var csObjectiveId = '@ViewBag.CSObjectiveId';
                var isAligned = '@ViewBag.isAligned' == 'True';
                var operationId = $('input[name="operationsSearch"]').val();

                if (csObjectiveId == null || operationId == '') {
                    showMessage("@Localization.GetText("CS.Monitoring.Message.NotOperationSelected")");
                    promise.resolve();
                    return promise;
                }

                $.ajax({
                    url: '@Url.Action("GetOperationMonitored", "MonitoringResultMatrix", new { area = "CountryStrategy" })' +
                         '?operationId=' + operationId +
                         '&csObjectiveId=' + csObjectiveId +
                         '&isAligned=' + isAligned,
                    cache: false,
                    contentType: false,
                    processData: false,
                    type: 'POST',
                }).done(function (data) {

                    if ((data.ErrorMessage != null) && (data.ErrorMessage != "")) {
                        showMessage(data.ErrorMessage);
                    }
                    else if (data.IsValid) {

                        var table = $('#' + data.OperationViewModel.OperationTypeTable + '-Operations');
                        var inputOperationId = 'input[name="' + data.OperationViewModel.OperationTypeTable + '-operationId"]';

                        var tbody = table.find('tbody:eq(0)');
                        var renderHtml = data.RenderResponse;
                        var isOpIncluded = isOperationIncluded(data, table, inputOperationId);
                        if (!isOpIncluded) {
                            tbody.append(renderHtml);
                            table.parents('div:eq(1)').show();
                            var inputInitialite = tbody.find('tr[data-type="operation"]').last();
                            inputInitialite.find('span.tooltip').tooltipster({
                                theme: 'tooltipster-mrblue',
                                content: ' ',
                                contentAsHTML: true,
                                maxWidth: 310,
                                animation: 'grow',
                                animationDuration: 0,
                                delay: 0,
                                functionBefore: function (origin, continueTooltip) {
                                    continueTooltip();
                                    var contentAlt = origin.attr('data-alt');
                                    var contentToolTip = '<div class="row"><div class="col-md-12">' + contentAlt + '</div></div>';
                                    origin.tooltipster('content', contentToolTip);
                                }
                            });
                        } else {
                            showMessage("@Localization.GetText("CS.Monitoring.Message.OperationIncluded")");
                        }
                    }
                });

                operationIdInput.val('');
                operationTextInput.val('');

                promise.resolve();
                return promise;
            }

            function isOperationIncluded(data, table, inputOperationId) {
                var opertationId = data.OperationViewModel.OperationId;
                var operationInputsId = table.find(inputOperationId);
                var result = false;
                operationInputsId.each(function () {
                    var source = $(this);
                    if (result == false && source.val() == opertationId) {
                        result = true;
                    }
                });
                return result;
            }

            function deleteRowTable(e, source, idTable, showNotificationDelete) {
                if (showNotificationDelete) {
                    var modalButton = $('[name="' + idTable + '-open-warning-btn"]');
                    modalButton.data('pressed-by', source);
                    modalButton.click();
                } else {
                    ConfirmRemove(e, source);
                }
            }

            function ConfirmRemove(e, source) {
                var promise = $.Deferred();
                var tr = source.closest('tr');
                var table = tr.parents('table');
                tr.remove();
                if (table.find('tr').length == 1) {
                    table.parents('div:eq(1)').hide();
                }
                promise.resolve();
                return promise;
            }
        </script>
    }
}
