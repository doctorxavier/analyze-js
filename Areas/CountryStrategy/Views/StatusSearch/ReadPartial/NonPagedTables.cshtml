@using System.Configuration
@using System.Globalization

@using IDB.MW.Application.Core.ViewModels.Common
@using IDB.MW.Application.CountryStrategyModule.ViewModels.StatusSearch
@using IDB.MW.Infrastructure.Configuration
@using IDB.MVCControls.DataTable.Helpers
@using IDB.Presentation.MVC4.Helpers
@using IDB.MVCControls.General.Helpers

@model StatusSearchTablesViewModel

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatPercent = appSettings.FormatPercent;

    var underPreparationTable = Html.RenderDataTable(Model.UnderPreparation);
    underPreparationTable.TableClass = "tableNormal";
    underPreparationTable.Name("underPreparationTable")
    .PrimaryKey(m => m.ProductNumber.ToString(CultureInfo.InvariantCulture))
    .AddPrimaryKeyToName(false)
    .UsePageMode(false)
    .UseDataTableNet(false)
    .Columns(columns =>
    {
        columns.Template(LinkProductNumber)
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.ProductNumber"))
        .Attribute("style", x => "width:90px;");

        columns.Template(c => Confluence.Label(c.CountryStrategyName))
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.CountryStrategyName"));

        columns.Template(c => LinkDate(c.CDCKickOff)).CssClassDynamic(x => GetStatus(x.CDCKickOff))
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.FirstPartOfCDCFinalized"));

        columns.Template(c => LinkDate(c.CDCPeerReviewMeeting)).CssClassDynamic(x => GetStatus(x.CDCPeerReviewMeeting))
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.CDCPeerReviewMeeting"));

        columns.Template(c => LinkDate(c.OverciewPaperPCM)).CssClassDynamic(x => GetStatus(x.OverciewPaperPCM))
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.OverviewPaperPCM"));

        columns.Template(c => LinkDate(c.CPEDraftDeliveredVPC)).CssClassDynamic(x => GetStatus(x.CPEDraftDeliveredVPC))
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.CPEDraftDeliveredToVPC"));

        columns.Template(c => LinkDate(c.QRR)).CssClassDynamic(x => GetStatus(x.QRR))
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.QRR"));

        columns.Template(c => LinkDate(c.CSPCM)).CssClassDynamic(x => GetStatus(x.CSPCM))
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.CSPCM"));

        columns.Template(c => LinkDate(c.CSPCB)).CssClassDynamic(x => GetStatus(x.CSPCB))
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.CSPCB"));

        columns.Template(c => LinkDate(c.CSCommitteeWhole)).CssClassDynamic(x => GetStatus(x.CSCommitteeWhole))
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.CSCommiteeOfTheWhole"));

        columns.Template(c => LinkDate(c.CSMonitoringExercise)).CssClassDynamic(x => GetStatus(x.CSMonitoringExercise))
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.CSMonitoringExercise"));
    });

    underPreparationTable.UseCustomHeader = true;
    underPreparationTable.CustomHeader = (@<thead>
        <tr>
            <th colspan="2">
                @Localization.GetText("CS.StatusSearch.BasicInformation").HtmlEncode()
            </th>
            <th colspan="5">
                @Localization.GetText("CS.StatusSearch.PreparationProcess").HtmlEncode()
            </th>
            <th colspan="3">
                @Localization.GetText("CS.StatusSearch.ApprovalProcess").HtmlEncode()
            </th>
            <th colspan="1">
                @Localization.GetText("CS.StatusSearch.Monitoring").HtmlEncode()
            </th>
        </tr>
        <tr>
            <th>@Localization.GetText("CS.StatusSearch.ProductNumber")</th>
            <th>@Localization.GetText("CS.StatusSearch.CountryStrategyName")</th>
            <th>@Localization.GetText("CS.StatusSearch.FirstPartOfCDCFinalized")</th>
            <th>@Localization.GetText("CS.StatusSearch.CDCPeerReviewMeeting")</th>
            <th>@Localization.GetText("CS.StatusSearch.OverviewPaperPCM")</th>
            <th>@Localization.GetText("CS.StatusSearch.CPEDraftDeliveredToVPC")</th>
            <th>@Localization.GetText("CS.StatusSearch.QRR")</th>
            <th>@Localization.GetText("CS.StatusSearch.CSPCM")</th>
            <th>@Localization.GetText("CS.StatusSearch.CSPCB")</th>
            <th>@Localization.GetText("CS.StatusSearch.CSCommiteeOfTheWhole")</th>
            <th>@Localization.GetText("CS.StatusSearch.CSMonitoringExercise")</th>
        </tr>
    </thead>);

    var approvedTable = Html.RenderDataTable(Model.Approved);
    approvedTable.TableClass = "tableNormal";
    approvedTable.Name("approvedTable")
    .PrimaryKey(m => m.ProductNumber.ToString(CultureInfo.InvariantCulture))
    .AddPrimaryKeyToName(false)
    .UseDataTableNet(false)
    .UsePageMode(false)
    .Columns(columns =>
    {
        columns.Template(LinkProductNumber)
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.ProductNumber"))
        .Attribute("style", x => "width:90px;");

        columns.Template(c => Confluence.Label(c.CountryStrategyName))
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.CountryStrategyName"));

        columns.Template(c => LinkDate(c.CDCKickOff)).CssClass("bold")
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.FirstPartOfCDCFinalized"));

        columns.Template(c => LinkDate(c.CDCPeerReviewMeeting)).CssClass("bold")
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.CDCPeerReviewMeeting"));

        columns.Template(c => LinkDate(c.OverciewPaperPCM)).CssClass("bold")
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.OverviewPaperPCM"));

        columns.Template(c => LinkDate(c.CPEDraftDeliveredVPC)).CssClass("bold")
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.CPEDraftDeliveredToVPC"));

        columns.Template(c => LinkDate(c.QRR)).CssClass("bold")
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.QRR"));

        columns.Template(c => LinkDate(c.CSPCM)).CssClass("bold")
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.CSPCM"));

        columns.Template(c => LinkDate(c.CSPCB)).CssClass("bold")
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.CSPCB"));

        columns.Template(c => LinkDate(c.CSCommitteeWhole)).CssClass("bold")
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.CSCommiteeOfTheWhole"));

        columns.Template(c => LinkDate(c.CSMonitoringExercise)).CssClass("bold")
        .Persistent()
        .Header(Localization.GetText("CS.StatusSearch.CSMonitoringExercise"));
    });

    approvedTable.UseCustomHeader = true;
    approvedTable.CustomHeader = (@<thead>
        <tr>
            <th colspan="2">
                @Localization.GetText("CS.StatusSearch.BasicInformation").HtmlEncode()
            </th>
            <th colspan="5">
                @Localization.GetText("CS.StatusSearch.PreparationProcess").HtmlEncode()
            </th>
            <th colspan="3">
                @Localization.GetText("CS.StatusSearch.ApprovalProcess").HtmlEncode()
            </th>
            <th colspan="1">
                @Localization.GetText("CS.StatusSearch.Monitoring").HtmlEncode()
            </th>
        </tr>
        <tr>
            <th>@Localization.GetText("CS.StatusSearch.ProductNumber")</th>
            <th>@Localization.GetText("CS.StatusSearch.CountryStrategyName")</th>
            <th>@Localization.GetText("CS.StatusSearch.FirstPartOfCDCFinalized")</th>
            <th>@Localization.GetText("CS.StatusSearch.CDCPeerReviewMeeting")</th>
            <th>@Localization.GetText("CS.StatusSearch.OverviewPaperPCM")</th>
            <th>@Localization.GetText("CS.StatusSearch.CPEDraftDeliveredToVPC")</th>
            <th>@Localization.GetText("CS.StatusSearch.QRR")</th>
            <th>@Localization.GetText("CS.StatusSearch.CSPCM")</th>
            <th>@Localization.GetText("CS.StatusSearch.CSPCB")</th>
            <th>@Localization.GetText("CS.StatusSearch.CSCommiteeOfTheWhole")</th>
            <th>@Localization.GetText("CS.StatusSearch.CSMonitoringExercise")</th>
        </tr>
    </thead>);
}

@if (Model.UnderPreparation != null)
{
    <div class="row mb10">
        <div class="col-md-12">
            @Confluence.Label(Model.UnderPreparation.Count + " " + Localization.GetText("CS.StatusSearch.Results"))
            @Confluence.LabelTitleGroup(Localization.GetText("CS.StatusSearch.UnderPreparation"))
        </div>
    </div>

    <div class="row mb30">
        <div class="col-md-12">
            @Html.Partial("Controls/DataTable", underPreparationTable)
        </div>
    </div>
}

@if (Model.Approved != null)
{
    <div class="row mb10">
        <div class="col-md-12">
            @Confluence.Label(Model.Approved.Count + " " + Localization.GetText("CS.StatusSearch.Results"))
            @Confluence.LabelTitleGroup(Localization.GetText("CS.StatusSearch.Approved"))
        </div>
    </div>

    <div class="row mb30">
        <div class="col-md-12">
            @Html.Partial("Controls/DataTable", approvedTable)
        </div>
    </div>
}

@functions {
    private static string GetStatus(ActivityItemViewModel item)
    {
        var statusClass = "";
        
        if (item != null && item != null && item.Date != null && item.Date != string.Empty)
        {
            switch (int.Parse(item.Status))
            {
                case 6582:
                    statusClass = "bold";
                    break;
                default:
                    var itemDate = Convert.ToDateTime(item.Date);
                    if (itemDate < DateTime.Today)
                    {
                        statusClass = "yellow";
                    }
                    break;
            }
        }

        return statusClass;
    }
}

@helper LinkProductNumber(RowStatusViewModel row)
{
    var url = "/Operation/" + row.ProductNumber;

    @Confluence.LabelLink((row.ProductNumber ?? ""), dataNavigation: url)

}

@helper LinkDate(ActivityItemViewModel activityItem)
{
    var url = Url.Action("DownloadDocument", "DocumentModal", new { area = "", documentNumber = "{0}" });
    var docs = new List<DocumentViewModel>();

    if (activityItem != null)
    {
        docs = activityItem.Documents;

        if (docs.Any())
        {
            if (docs.Count > 1)
            {
                <a href="#" data-activityitem-id="@activityItem.Id">@activityItem.Date</a>
                <div class="hide modalBody" data-activityitem-popup="@activityItem.Id">
                    <ul>
                        @foreach (var doc in docs)
                        {
                            <li>
                            @{
                                var secureUrl = IDB.MW.Domain.EntityHelpers.DownloadDocumentHelper.GetDocumentLink(doc.DocNumber);
                            }
                                Document: @doc.Description <a href=@secureUrl target="_blank">(reference: @doc.DocNumber)</a>
                            </li>
                        }
                    </ul>
                </div>
            }
            else
            {
                <a name="documentLink" href="@string.Format(url, docs[0].DocNumber)">@activityItem.Date</a>
            }
        }
        else
        {
            @activityItem.Date
        }
    }
}