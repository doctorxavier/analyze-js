@using IDB.Presentation.MVC4.Helpers
@using IDB.MVCControls.DataTable.Helpers
@using System.Globalization
@using IDB.Presentation.MVC4.Helpers

@model List<IDB.MW.Application.OPUSModule.ViewModels.OperationDataService.AssociatedCountriesRowViewModel>

@if (Model != null)
{
    <div class="row row-header">
        <div class="col-md-8 subtitleGroup">
            @Localization.GetText("OP.OD.TabResponsibilityData.AssociatedCountries.Title")
        </div>
    </div>
    <div class="row row-body-20">
        <div class="col-md-8">
            @if (ViewBag.ResponsabilityDataPermission == true)
            {
                var configAssociatedCountriesTable = Html.RenderDataTable(Model);
                configAssociatedCountriesTable.Name("associatedCountriesTable")
                    .PrimaryKey(m => m.RowId.ToString(CultureInfo.InvariantCulture))
                    .AddPrimaryKeyToName(false)
                    .Columns(columns =>
                    {
                        columns.Bound(c => c.RowId).EditableTemplate(
                            @<input type="hidden" name="CountryRelatedId" value="@item.RowId.ToString()"/>).Hidden(true);
                        columns.Template(c => Confluence.LabelGetDropDown(
                            c.Role.ToString(), ViewBag.AssociatedCountriesRoleList))
                            .EditableTemplate(row => SecurityHelper.IsVisibleByDefault(ViewBag.FieldAccessList, "ddlAssociatedCountriesRole") ?
                            Confluence.InputDropDown(row.Role.ToString(), 
                                    "associatedCountriesRole", 
                                    ViewBag.AssociatedCountriesRoleList, 
                                    dataAttributes: new Dictionary<string, string>() { 
                                        { "idb-fieldname", "ddlAssociatedCountriesRole" } 
                                    }) : null)
                            .Header(Localization.GetText("OP.OD.TabResponsibilityData.AssociatedCountries.Role"));
                        columns.Template(c =>
                            Confluence.LabelGetMultiDropDown(c.Countries, ViewBag.Countries))
                            .EditableTemplate(row => 
                                Confluence.InputDropDownMulti("listCountry", 
                                ListCountryByRole(ViewBag.Countries, row.Role), 
                                width: "100%", 
                                required: false, 
                                values: string.Join(",", row.Countries), 
                                placeholder: "N/A"))
                            .Header(Localization.GetText("OP.OD.TabResponsibilityData.AssociatedCountries.Country"));

                        columns.Bound(c => String.Empty).EditableTemplate(row => SecurityHelper.IsVisibleByDefault(ViewBag.FieldAccessList, "btnRemoveAssociatedCntryRow") ?
                            Confluence.ButtonTrash(null, 
                                null, 
                                "removeRow", 
                                dataAttributes: new Dictionary<string, string>() { 
                                    { "idb-fieldname", "btnRemoveAssociatedCntryRow" } 
                                }) : null).Center();
                    });
                configAssociatedCountriesTable.TableClass = "tableNormal endSpacing";


                @Html.Partial("Controls/DataTable", configAssociatedCountriesTable)

                if (SecurityHelper.IsVisibleByDefault(ViewBag.FieldAccessList, "btnNewAssociatedCntryRow"))
                {
                    <div class="col-md-12" data-idb-fieldname="btnNewAssociatedCntryRow">
                        <div data-pagemode="edit" class="text-center">
                            @Confluence.ButtonAddNewRows(
                             Localization.GetText("OP.OD.TabResponsibilityData.AssociatedCountries.AddCountry"),
                             "associatedCountriesTable",
                             null,
                             "newCountry",
                             dataAttributes:
                             new Dictionary<string, string>() { { "idb-fieldname", "btnNewAssociatedCntryRow" } })
                        </div>
                    </div>
                }
            }
            else
            {
                var configAssociatedCountriesTable = Html.RenderDataTable(Model);
                configAssociatedCountriesTable.Name("associatedCountriesTable")
                    .PrimaryKey(m => m.RowId.ToString(CultureInfo.InvariantCulture))
                    .AddPrimaryKeyToName(false)
                    .Columns(columns =>
                    {
                        columns.Bound(c => c.RowId).Hidden(true);
                        columns.Template(c => Confluence.LabelGetDropDown(
                            c.Role.ToString(), ViewBag.AssociatedCountriesRoleList)).Persistent()
                            .Header(Localization.
                                GetText("OP.OD.TabResponsibilityData.AssociatedCountries.Role"));
                        columns.Template(c => Confluence.LabelGetMultiDropDown(c.Countries, ViewBag.Countries))
                            .Persistent()
                            .Header(Localization.
                                GetText("OP.OD.TabResponsibilityData.AssociatedCountries.Country"));
                        columns.Bound(c => String.Empty);
                    });
                configAssociatedCountriesTable.TableClass = "tableNormal endSpacing";


                @Html.Partial("Controls/DataTable", configAssociatedCountriesTable)
            }
        </div>
    </div>
}

@functions
{

    private List<MultiSelectListItem> ListCountryByRole(List<MultiSelectListItem> list, int role)
    {
        if (role != ViewBag.RoleCoutryAdmin)
        {
            list = list.Where(o => o.Value != ViewBag.CoutryAdminId.ToString()).ToList();
        }

        return list;
    }

}
