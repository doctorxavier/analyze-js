@using IDB.Architecture.Language
@using IDB.MW.Application.OPUSModule.ViewModels.OperationDataService
@using IDB.MW.Infrastructure.Configuration
@using IDB.Presentation.MVC4.Areas.OPUS.Models
@using IDB.Presentation.MVC4.Helpers
@using System.Linq

@model SACountryStrategyViewModel

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var validationPercentRegExp = appSettings.ValidationPercentRegExp;
}

@if (Model.IsCountryStrategyApproved)
{
    <div class="row">
        <div class="grouping-section">
            <div class="groupColumn col-md-4" style="border-right: none;">
                <div class="col-md-12 lblcontent">
                    @Confluence.Label(Localization.GetText("OP.OD.CountryStrategy.Title"))
                </div>
                <div class="col-md-12">
                    @Confluence.LabelLink(Model.NameLink, name: "linktoprofile", dataAttributes: new Dictionary<string, string> { { "url", Model.UrlLink } })
                </div>
            </div>
            <div class="groupColumn col-md-4">
                <div class="col-md-12 lblcontent">
                    @Confluence.Label(Localization.GetText("OP.OD.CountryStrategy.GNDocumentNumber"))
                </div>
                <div class="col-md-12 lblvalue">
                    @Confluence.LabelBold(Model.GNDocumentNumber)
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-12 mb30">
            @Confluence.Label(Localization.GetText("OP.OD.CountryStrategy.CountrySrategyNotApproved"), htmlClass: "titleLabel")
        </div>
    </div>
}

<div data-pagemode="read" class="row mb20">
    @if (Model.IsObjecticeAligned == true || Model.IsObjecticeAligned == null)
    {
        <div data-content="aligned-read">
            @if (Model.CurrentObjectivesList.Any())
            {
                <div class="col-md-12 mb5">
                    @Confluence.Label(text: Localization.GetText("OP.OD.CountryStrategy.Objective"), htmlClass: "titleLabel")
                </div>
            }
        </div>
    }
    else
    {
        <div data-content="notAligned-read">
            @if (Model.CurrentObjectivesList.Any())
            {
                <div class="col-md-12 mb5">
                    @Confluence.Label(text: Localization.GetText("OP.OD.CountryStrategy.ObjectiveNotAligned"), htmlClass: "titleLabel")
                </div>
            }
        </div>
    }
    @if (Model.CurrentObjectivesList.Any())
    {
        <div class="pl15 mb20">
            @foreach (var objective in Model.CurrentObjectivesList)
            {
                <div class="col-md-12 padding0 mb5 @(objective.OperationCsObjectiveId == null ? "hide" : "")" data-type="operationObjective" data-id="@(!objective.IsObjectiveAligned ? "SOCA-" + objective.ObjectiveId.ToString() : objective.ObjectiveId.ToString())">
                    <div class="col-md-5 padding0 selected-objective">
                        @Confluence.LabelBold(objective.NameObjective)
                    </div>
                    @if (objective.IsExpired)
                    {
                        <div class="col-md-7">
                            <span class="objectiveExpired">@Localization.GetText("OP.OD.CountryStrategy.ObjectiveExpiredMessage")</span>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

<div data-pagemode="edit">
    @Confluence.InputHidden(value: Convert.ToString(Model.IsCountryStrategyApproved), name: "hiddenIsCountryStrategyApprovedOpus")
</div>

<div data-pagemode="edit" class="row mb20">
    @if (Model.CurrentObjectivesList.Any() && Model.CurrentObjectivesList.First().IsExpired)
    {
        if (Model.IsObjecticeAligned == true || Model.IsObjecticeAligned == null)
        {
            <div data-content="aligned-read">
                @if (Model.CurrentObjectivesList.Any())
                {
                    <div class="col-md-12 mb5">
                        @Confluence.Label(text: Localization.GetText("OP.OD.CountryStrategy.Objective"), htmlClass: "titleLabel")
                    </div>
                }
            </div>
        }
        else
        {
            <div data-content="notAligned-read">
                @if (Model.CurrentObjectivesList.Any())
                {
                    <div class="col-md-12 mb5">
                        @Confluence.Label(text: Localization.GetText("OP.OD.CountryStrategy.ObjectiveNotAligned"), htmlClass: "titleLabel")
                    </div>
                }
            </div>
        }

        <div class="pl15 mb5">
            @foreach (var objective in Model.CurrentObjectivesList)
            {
                <div class="col-md-12 padding0 mb5 @(objective.OperationCsObjectiveId == null ? "hide" : "")" data-type="operationObjective" data-id="@(!objective.IsObjectiveAligned ? "SOCA-" + objective.ObjectiveId.ToString() : objective.ObjectiveId.ToString())">
                    <div class="col-md-5 padding0 lblvalue selected-objective">
                        @if (objective.IsExpired && Model.ShowRemoveObjectivesCheckbox)
                        {
                            @Confluence.InputCheckbox(true, "expired-objective", label: objective.NameObjective, dataAttributes: new Dictionary<string, string>() { { "id", objective.OperationCsObjectiveId.ToString() } }, labelBold: true);
                        }
                        else
                        {
                            @Confluence.LabelBold(objective.NameObjective)
                        }
                    </div>
                    @if (objective.IsExpired && !Model.ShowRemoveObjectivesCheckbox)
                    {
                        <div class="col-md-7 padding0">
                            <span class="objectiveExpired">@Localization.GetText("OP.OD.CountryStrategy.ObjectiveExpiredMessage")</span>
                        </div>
                    }
                    @if (objective.IsExpired && Model.ShowRemoveObjectivesCheckbox)
                    {
                        <div class="col-md-7 padding0">
                            <span class="objectiveExpired">@Localization.GetText("OP.OD.CountryStrategy.ExpiredObjectivesToRemove")</span>
                        </div>
                    }
                </div>
            }
            @if (Model.ShowRemoveObjectivesMessage)
            {
                <div class="col-md-12 pl0 pt10">
                    <span class="asteriskColor">* </span>
                    @Confluence.Label(@Localization.GetText("OP.OD.CountryStrategy.ExpiredObjectivesWillBeRemoved"), htmlClass: "titleLabel ml10")
                </div>
            }
        </div>
    }
</div>

@if (Model.IsCountryStrategyApproved)
{
    <div data-pagemode="edit">
        <div class="row mb40">
            <div class="col-md-12 pb20 op-radio-container">
                @Confluence.InputRadioButton(value: "aligned",
     name: "objectivesAligned",
     isChecked: Model.IsObjecticeAligned ?? true,
     label: Localization.GetText("OP.OD.CountryStrategy.Objective"))
                <span class="asteriskColor" data-name="asteriskAligned"> *</span>
            </div>
            <div data-content="aligned" class="@(Model.IsObjecticeAligned == false ? "hide" : "")">
                <div class="col-md-12 pb20">
                    @(Html.MultiDropDown("objectives")
    .AddAttributes("required", "required")
    .Items(ViewBag.CountryStrategyObjectivesList)
    .CanSelectGroup()
    .SelectedItems(Model.ObjectivesAlignedIdList)
    .HtmlClass("objetivesCombo mb20"))
                </div>
            </div>
            <div class="col-md-12 pb20  op-radio-container">
                @Confluence.InputRadioButton(value: "not-aligned",
                     name: "objectivesAligned",
                     isChecked: !(Model.IsObjecticeAligned ?? true),
                     label: Localization.GetText("OP.OD.CountryStrategy.ObjectiveNotAligned"))
                <span class="asteriskColor" data-name="asteriskNotAligned"> *</span>
            </div>
            <div data-content="notAligned" class="@(Model.IsObjecticeAligned == true || Model.IsObjecticeAligned == null ? "hide" : "")">
                <div class="col-md-12 mb20 pb10">
                   @*@(Html.MultiDropDown("objectivesNotAligned")
                        .AddAttributes("required", "required")
                        .Items(ViewBag.CountryStrategyNotAligned)
                        .CanSelectGroup()
                        .SelectedItems(Model.ObjectivesNotAlignedIdList)
                        .HtmlClass("objetivesCombo mb20"))*@
                    @{ 
                        var attrId = new Dictionary<string, string>() { { "required", "required" } };

                        @Confluence.InputDropDown(
                                     value: Model.ObjectivesNotAligned,
                                     name: "objectivesNotAligned",
                                     elements: ViewBag.CountryStrategyNotAligned,
                                     htmlClass: "objetivesCombo mb20",
                                     dataAttributes: attrId)
                        }
                </div>
            </div>
        </div>
    </div>
}