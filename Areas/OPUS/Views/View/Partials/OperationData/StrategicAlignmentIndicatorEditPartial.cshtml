@using System.Collections.Generic
@using System.Linq

@using IDB.Architecture.Language
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Application.OPUSModule.ViewModels.OperationDataService
@using IDB.MW.Domain.Values;
@using IDB.Presentation.MVC4.Areas.OPUS.Models

@model List<SAIndicatorDataViewModel>

    @foreach (var indicator in Model)
    {
        var classSubindicator = indicator.SubindicatorId.HasValue ? "paddingLeft5Percent" : string.Empty;
        var attrSubindicator = indicator.SubindicatorId.HasValue ? indicator.IndicatorId.ToString() : string.Empty;
        var attrContentIndicator = indicator.SubindicatorId.HasValue ? indicator.IndicatorId.ToString() + "-" + indicator.SubindicatorId.ToString() : indicator.IndicatorId.ToString();
        var atributeNameSubIndicator = "x";
        var atributeIdSubIndicator = string.Empty;
        var isDisabled = indicator.IndicatorNumber == OPUSGlobalValues.CLIMATE_CHANGE_INDICATOR_NUMBER;

        var attributes = new Dictionary<string, string>();
        attributes.Add("id", indicator.IndicatorId.ToString());
        attributes.Add("target-section", attrContentIndicator);
        attributes.Add("isValid", indicator.IsValid.ToString().ToLower());
        if (indicator.SubindicatorId.HasValue)
        {
            atributeNameSubIndicator = "data-persist-subindicatorId";
            atributeIdSubIndicator = indicator.SubindicatorId.ToString();
            attributes.Add("persist-subindicatorId", indicator.SubindicatorId.ToString());
        }

        <div class="row @classSubindicator" data-parent-indicator="@attrSubindicator">
            <div class="col-md-12 mb10">
                <div data-pagemode="edit">
                    @Confluence.InputText(
                    indicator.IsValid.ToString(),
                    name: "isValid",
                    htmlClass: "hide",
                    dataAttributes: attributes)

                    @Confluence.InputCheckbox(
                    isChecked: indicator.IsChecked,
                    name: "indicator-Check",
                    label: indicator.IndicatorName,
                    forceValidation: false,
                    disabled:
                        ViewBag.IsOperationEswType && isDisabled ?
                            true : isDisabled ?
                                true : indicator.IsValid ? 
                                    false : indicator.SubindicatorId == null ?
                                        false : true,
                    htmlClass: "titleLabel",
                    dataAttributes: attributes)
                </div>
                <div data-pagemode="read">
                    @Confluence.InputCheckbox(
                    isChecked: indicator.IsChecked,
                    name: "indicator-Check-dis",
                    label: indicator.IndicatorName,
                    forceValidation: false,
                    htmlClass: "titleLabel",
                    disabled: true)
                </div>
            </div>
            <div data-section="@attrContentIndicator">
                @if (indicator.IsComboVisible && indicator.IsComboVisibleSG && indicator.SubindicatorId == null)
                {
                    <div class="col-md-11 paddingLeft70 mb20">
                        <div class="col-md-4">
                            @Confluence.Label(Localization.GetText("OP.OD.ImpactIndicators.Title"), htmlClass: "titleLabel")
                            <div data-pagemode="edit">
                                @(Html.MultiDropDown("impactIndicators-Combo")
                                .Items(ViewBag.ImpactIndicators)
                                .AddAttributes("data-id", indicator.IndicatorId.ToString())
                                .AddAttributes("data-isValid", indicator.IsValid.ToString().ToLower())
                                .AddAttributes(atributeNameSubIndicator, atributeIdSubIndicator)
                                .CanSelectGroup()
                                .Disable(indicator.SubindicatorId == null ? !indicator.IsValid : indicator.IsDeleted.Value ? true : !indicator.IsValid)
                                .SelectedItems(indicator.ImpactIndicator)
                                .HtmlClass("indicatorsCombo"))
                            </div>
                            <div data-pagemode="read">
                                @{
                                    IEnumerable<MultiDropDownItem> impactIndicatorsItem = ((IEnumerable<MultiDropDownItem>) ViewBag.ImpactIndicators);
                                    List<string> impactIndicatorsTex = impactIndicatorsItem.GetSelectedText(indicator.ImpactIndicator);
                                }
                                @foreach (var item in impactIndicatorsTex)
                                {
                                      <div data-pagemode="read">
                                        <label class="labelNormal bold">@item.HtmlEncode()</label>
                                      </div>  
                                }
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Confluence.Label(Localization.GetText("OP.OD.OutcomeIndicators.Title"), htmlClass: "titleLabel")
                            <div data-pagemode="edit">
                                @(Html.MultiDropDown("outcomeIndicators-Combo")
                                .Items(ViewBag.OutcomeIndicators)
                                .AddAttributes("data-id", indicator.IndicatorId.ToString())
                                .AddAttributes("data-isValid", indicator.IsValid.ToString().ToLower())
                                .AddAttributes(atributeNameSubIndicator, atributeIdSubIndicator)
                                .CanSelectGroup()
                                .Disable(indicator.SubindicatorId == null ? !indicator.IsValid : indicator.IsDeleted.Value ? true : !indicator.IsValid)
                                .SelectedItems(indicator.OutcomeIndicator)
                                .HtmlClass("indicatorsCombo"))
                            </div>
                            <div data-pagemode="read">
                                @{
                                    IEnumerable<MultiDropDownItem> outcomeIndicatorsItem = ((IEnumerable<MultiDropDownItem>) ViewBag.OutcomeIndicators);
                                    List<string> outcomeIndicatorsText = outcomeIndicatorsItem.GetSelectedText(indicator.OutcomeIndicator);
                                }
                                @foreach (var item in outcomeIndicatorsText)
                                {
                                    <div data-pagemode="read">
                                        <label class="labelNormal bold">@item.HtmlEncode()</label>
                                    </div>
                                }
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Confluence.Label(Localization.GetText("OP.OD.Outputs.Title"), htmlClass: "titleLabel")
                            <div data-pagemode="edit">
                                @(Html.MultiDropDown("outputs-Combo")
                                .Items(ViewBag.Outputs)
                                .AddAttributes("data-id", indicator.IndicatorId.ToString())
                                .AddAttributes("data-isValid", indicator.IsValid.ToString().ToLower())
                                .AddAttributes(atributeNameSubIndicator, atributeIdSubIndicator)
                                .CanSelectGroup()
                                .Disable(indicator.SubindicatorId == null ? !indicator.IsValid : indicator.IsDeleted.Value ? true : !indicator.IsValid)
                                .SelectedItems(indicator.Output)
                                .HtmlClass("indicatorsCombo"))
                            </div>
                            <div data-pagemode="read">
                                @{
                                    IEnumerable<MultiDropDownItem> outputsItems = ((IEnumerable<MultiDropDownItem>) ViewBag.Outputs);
                                    List<string> outputstext = outputsItems.GetSelectedText(indicator.Output);
                                }
                                @foreach (var item in outputstext)
                                {
                                    <div data-pagemode="read">
                                        <label class="labelNormal bold">@item.HtmlEncode()</label>
                                    </div>
                                }
                            </div>
                        </div>
                        @if (indicator.IsERMCompleted)
                        {
                        <div class="col-md-12">
                            @Confluence.InputText("x", name: "validationERMCombos", required: false, 
                            htmlClass: "hide", 
                            width: "100%",
                            disabled: (!indicator.IsValid),
                            dataAttributes: new Dictionary<string, string> { { "parsley-valitationermcombos","data-section=" + attrContentIndicator }})
                        </div>
                        }
                    </div>
                    if (indicator.IsERMCompleted)
                    {
                        <div name="instructionMessage" data-pagemode="edit" class="col-md-11 paddingLeft85 mb30" data-target-section=attrContentIndicator>
                            @Confluence.Label(Localization.GetText("OP.OD.RMCOMBO.MESSAGE"))
                        </div>
                    }
                }
                @if(indicator.SubindicatorId == null){
                <div class="col-md-11 paddingLeft70 mb30" style="margin-left:15px;">
                    <div>
                        @Confluence.Label(Localization.GetText("OP.OD.Justification.Title"), htmlClass: "titleLabel")
                        @if (indicator.IsComboVisible)
                        {
                            <span class="asteriskColor">*</span>
                        }
                    </div>
                    <div data-pagemode="edit">

                        @if (isDisabled)
                        {
                            <div>
                                <label class="labelNormal bold">@indicator.Justification.HtmlEncode()</label>
                                @Confluence.InputText(
                                    indicator.Justification,
                                    name: "justification",
                                    htmlClass: "hide",
                                    required: false,
                                    dataAttributes: attributes)
                            </div>
                        }
                        else
                        {
                            @Confluence.InputTextArea(
                                 value: indicator.Justification,
                                 name: "justification",
                                 maxLength: 1500,
                                 dataAttributes: attributes,
                                 width: "97.5%",
                                 required: indicator.IsComboVisible,
                                 disabled: indicator.SubindicatorId == null ? !indicator.IsValid : indicator.IsDeleted.Value ? true : !indicator.IsValid,
                                 height: "100px")
                        }
                    </div>
                    <div data-pagemode="read">
                        <label class="labelNormal bold">@indicator.Justification.HtmlEncode()</label>
                    </div>
                </div>
                }
                <div class="clearfix"></div>
            </div>
        </div>
        if (indicator.SubindicatorList.Any())
        {
            @Html.Partial("~/Areas/OPUS/Views/View/Partials/OperationData/StrategicAlignmentIndicatorEditPartial.cshtml", indicator.SubindicatorList)
        }
    }

















