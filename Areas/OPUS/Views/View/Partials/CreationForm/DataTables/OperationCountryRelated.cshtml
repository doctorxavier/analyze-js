@using IDB.MVCControls.DataTable.Helpers
@using System.Globalization
@using IDB.Presentation.MVC4.Helpers

@model List<IDB.MW.Application.OPUSModule.ViewModels.OperationDataService.AssociatedCountriesRowViewModel>
@{
    var isUserCreator = (bool)ViewBag.Creation;
}

<div class="row row-header">
    <div class="col-md-8 subtitleGroup">
        @Localization.GetText("OP.CR.CreationForm.BD.RD.AssociatedCountries")
    </div>
</div>
<div class="row row-body-40">
    <div class="col-md-8">
        @if (ViewBag.CreationWritePermission == true || isUserCreator)
        {
            var configAssociatedCountriesTable = Html.RenderDataTable(Model);
            configAssociatedCountriesTable.Name("associatedCountriesTable")
                .PrimaryKey(m => m.RowId.ToString(CultureInfo.InvariantCulture))
                .AddPrimaryKeyToName(false)
                .Columns(columns =>
                {
                    columns.Bound(c => c.RowId).EditableTemplate(@<input type="hidden" name="CountryRelatedId" value="@item.RowId.ToString()"/>).Hidden(true);
                    columns.Template(c => Confluence.LabelGetDropDown(c.Role.ToString(), ViewBag.AssociatedCountriesRoleList))
                        .EditableTemplate(row => Confluence.InputDropDown(row.Role.ToString(), "associatedCountriesRole", ViewBag.AssociatedCountriesRoleList, dataAttributes: new Dictionary<string, string>() {{"idb-fieldname", "ddlAssCountRole"}}))
                        .Header(Localization.GetText("OP.CR.CreationForm.BD.RD.AC.Role"));
                    columns.Template(c => Confluence.LabelGetMultiDropDown(
                        c.Countries, ViewBag.Countries))
                        .EditableTemplate(row => Confluence.InputDropDownMulti("listCountry", 
                            ListCountryByRole(ViewBag.Countries, row.Role), 
                            width: "100%", 
                            required: false, 
                            values: string.Join(",", row.Countries), 
                            placeholder: "N/A"))
                        .Header(Localization.GetText("OP.CR.CreationForm.BD.RD.AC.Country"));
                    columns.Bound(c => String.Empty).EditableTemplate(row => Confluence.ButtonTrash(null, null, "removeRow", dataAttributes: new Dictionary<string, string>() {{"idb-fieldname", "btnDeleteCountry"}})).Persistent().CssHeaderClass("w130");
                });

            configAssociatedCountriesTable.TableClass = "tableNormal endSpacing";


            @Html.Partial("Controls/DataTable", configAssociatedCountriesTable)

            <div class="col-md-12">
                <div data-pagemode="edit" class="text-center">
                    @Confluence.ButtonAddNewRows(Localization.GetText("OP.CR.CreationForm.BD.RD.AC.NewCountry"), "associatedCountriesTable", null, "newCountryRelated", dataAttributes: new Dictionary<string, string>() {{"idb-fieldname", "btnNewCountry"}})
                </div>
            </div>
        }
        else
        {
            var configAssociatedCountriesTable = Html.RenderDataTable(Model);
            configAssociatedCountriesTable.Name("associatedCountriesTable")
                .PrimaryKey(m => m.RowId.ToString(CultureInfo.InvariantCulture))
                .AddPrimaryKeyToName(false)
                .Columns(columns =>
                {
                    columns.Bound(c => c.RowId).EditableTemplate(@<input type="hidden" name="CountryRelatedId" value="@item.RowId.ToString()"/>).Hidden(true);
                    columns.Template(c => Confluence.LabelGetDropDown(c.Role.ToString(), ViewBag.AssociatedCountriesRoleList))
                        .EditableTemplate(row => Confluence.InputDropDown(
                            row.Role.ToString(),
                            "associatedCountriesRole",
                            ViewBag.AssociatedCountriesRoleList,
                            dataAttributes: new Dictionary<string, string>()
                            {
                                { "idb-fieldname", "ddlAssCountRole" }
                            }, 
                            htmlClass: "hide"))
                        .Header(Localization.GetText("OP.CR.CreationForm.BD.RD.AC.Role"))
                        .Persistent();
                    columns.Template(c => Confluence.LabelGetMultiDropDown(c.Countries, ViewBag.Countries))
                        .EditableTemplate(row => Confluence.InputDropDownMulti("listCountry",
                            ListCountryByRole(ViewBag.Countries, row.Role),
                            width: "100%",
                            required: false,
                            values: string.Join(",", row.Countries),
                            placeholder: "N/A",
                            htmlClassDiv: "hide"))
                        .Header(Localization.GetText("OP.CR.CreationForm.BD.RD.AC.Country"))
                        .Persistent();
                    columns.Bound(c => String.Empty).Persistent().CssHeaderClass("w130");
                });

            configAssociatedCountriesTable.TableClass = "tableNormal endSpacing";


            @Html.Partial("Controls/DataTable", configAssociatedCountriesTable)
        }
    </div>
</div>

               
@functions
{

    private List<MultiSelectListItem> ListCountryByRole(List<MultiSelectListItem> list, int role)
    {
        if (role != ViewBag.RoleCoutryAdmin)
        {
            list = list.Where(o => o.Value != ViewBag.CoutryAdminId.ToString()).ToList();
        }

        return list;
    }

}
               