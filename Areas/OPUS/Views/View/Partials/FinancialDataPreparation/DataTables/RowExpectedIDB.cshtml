@using IDB.MW.Application.Core.ViewModels
@using IDB.Presentation.MVC4.Helpers

@model IDB.MW.Application.OPUSModule.ViewModels.FinancialDataPreparationService.ExpectedIDBViewModel

<tr data-id="@Model.FinancingTypeId">
    @if (Model.TipoTabla != "noTree")
    {
        <td class="tree"><span></span><span class="selected"></span></td>
    }

    <td data-pagemode="edit">
        @if (Model.IdFundOperation == 0)
        { 
            var FinancingTypes = Html.BuildSelectItemList(
                Model.FinancingTypeList,
                finType => finType.Text,
                finType => finType.Value);

            @Confluence.InputDropDown(null,
                "FinancingTypeId",
                FinancingTypes,
                width: Model.IsFromPreparationFinancialData ? "150px" : "200px",
                dataAttributes: new Dictionary<string, string>()
                {
                    { "idb-fieldname", "ddlFinancingType" }
                }
            )
        }
        else
        {
            @Confluence.Label(Model.FinTypeDesc)
            <input type="hidden" name="FinancingTypeId"
                   value="@Model.FinancingTypeId.ToString()" />
        }
        </td>
        @if (Model.IsPsgOperation)
        {        
            var availableDonorsItems = Model.AvailablePsgDonors != null ?
                Html.BuildMultiSelectItemList(
                    Model.AvailablePsgDonors.AsEnumerable(),
                    ad => ad.DonorName,
                    ad => ad.DonorId.ToString()) :
                new List<MultiSelectListItem>();

            <td class="donor">
                <div data-pagemode="edit">
                    @Confluence.InputDropDownMulti(
                     "selectedPsgDonors",
                     availableDonorsItems,
                     width: "200px",
                     required: false)
                </div>
            </td>
        }
    }

    <td data-pagemode="edit">
        @if (Model.IdFundOperation == 0) 
        {
            var Funds = Html.BuildSelectItemList(
                Model.FundList,
                fund => fund.Text,
                fund => fund.Value);
        

            @Confluence.InputDropDown(Model.IdFundOperation != 0 ?
                Model.FundId.ToString() :
                string.Empty,
                "FundId",
                Funds,
                width: Model.IsFromPreparationFinancialData ? "190px" : "200px",
                dataAttributes: new Dictionary<string, string>()
                {
                    {"idb-fieldname", "ddlFund"}
                }
            )
        } 
        else
        {
            @Confluence.Label(Model.FundDesc)
            <input type="hidden" name="FundId" value="@Model.FundId.ToString()" />
        }
    </td>
    <td id="fundTbdColumn">
        <div data-pagemode="edit"> 
            @{
                var FundsTbd = new List<MultiSelectListItem>();

                foreach (var fund in Model.FundTDB)
                {
                    FundsTbd.Add(new MultiSelectListItem()
                    {
                        Selected = fund.Selected,
                        Text = fund.Text,
                        Value = fund.Value
                    });
                }
            }

            @if (Model.IdFundOperation == 0) 
            {
                @Confluence.InputDropDownMulti("FundTBD",
                    FundsTbd,
                    width: Model.IsFromPreparationFinancialData ? "190px" : "200px",
                    required: false,
                    values: Model.FundsTbd != null ?
                        string.Join(",", Model.FundsTbd ?? new List<int>()) :
                        string.Empty,
                placeholder: "N/A")
            }
            else
            {
                @Confluence.LabelGetMultiDropDown(Model.FundsTbd ?? new List<int>(), FundsTbd)
                @Confluence.InputHidden(string.Empty, "FundTBD")
            }
            <input type="hidden" id="isTbd" value="@Model.IsTbdFund" />
        </div>
    </td>
    <td name="IDBUsAmountColumn" class="text-right" data-pagemode="edit">
        @if (Model.IdFundOperation == 0)
        {
            @Confluence.InputDecimal(Model.UsAmount,
                "UsAmount",
                minValue: "0.00",
                maxValue: "999999999999.99",
                width: Model.IsFromPreparationFinancialData ? "120px" : "185px",
                dataAttributes: new Dictionary<string, string>()
                {
                    { "idb-fieldname", "txtAmount" }
                }
            )
        }
        else
        {
            @Confluence.LabelDecimal(Model.UsAmount + Model.IncreaseUsAmount)
            @Confluence.InputDecimal(
                            Model.UsAmount,
                            "UsAmount",
                            minValue: "0.00",
                            maxValue: "999999999999.99",
                            width: Model.IsFromPreparationFinancialData ? "120px" : "185px",
                            dataAttributes: new Dictionary<string, string>()
                            {
                                { "idb-fieldname", "txtAmount" }
                            },
                            htmlClass: "hide"
                        )
        }
    </td>
    @if (Model.IsFromPreparationFinancialData)
    {
    <td>
        <div data-pagemode="edit">
        @{
            var ExecutingAgencies = Html.BuildSelectItemList(
                Model.ExecutingAgencies,
                agency => agency.Text,
                agency => agency.Value);
            if (Model.IdFundOperation == 0)
            {
                @Confluence.InputDropDown(value: ExecutingAgencies.Count == 1 ?
                                      ExecutingAgencies[0].Value :
                                      string.Empty,
                                      name: "ExecutingAgencyId",
                                      elements: ExecutingAgencies,
                                      disabled: false,
                                      required: true,
                                      width: "120px")
            }
            else
            {
                @Confluence.Label(Model.ExecutingAgency)
                <input type="hidden" name="ExecutingAgencyId" value="@Model.ExecutingAgencyId" />
                }
            }
        </div>
    </td>
            }
    <td>
        <div data-pagemode="edit">
            @if (Model.IdFundOperation == 0)
            { 
                @Confluence.ButtonTrash(null, 
                    null, "removeRowExpectedIDB", 
                    dataAttributes: new Dictionary<string, string>() 
                    { 
                        { "idb-fieldname", "btnOpBasicExpectedTrash" } 
                    }                
                )
                <input type="hidden" name="isBld" value="false" />
                <input type="hidden" name="FundOperationId" value="0">
                <input type="hidden" name="SapCode" value="0" />
                <input type="hidden" name="OCSpecialProgram" value="0" />
            }
            else
            {
                <input type="hidden" name="isBld" value="@Model.isBld.ToString()" />
                <input type="hidden" name="FundOperationId" value="@Model.IdFundOperation.ToString()" />
                <input type="hidden" name="SapCode" value="@Model.SapCode.ToString()" />
                <input type="hidden" name="OCSpecialProgram" value="@Model.OcSpecialProgram.ToString()" />
            }
        </div>
    </td>
</tr>