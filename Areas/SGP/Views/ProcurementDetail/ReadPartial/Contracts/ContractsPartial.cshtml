@using System.Web.Mvc

@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.MW.Infrastructure.SecurityService.Enums
@using IDB.Presentation.MVC4.Helpers
@using IDB.Architecture.Language
@using IDB.MW.Application.SGPModule.Constants
@using IDB.MW.Application.SGPModule.ViewModels.ProcurementDetail
@using IDB.Presentation.MVC4.Models.Documents
@using IDB.Presentation.MVC4.Models.Modal
@using IDB.Presentation.MVC4.General
@using IDB.MW.Business.DocumentManagement.Enums

@model ProcurementDetailViewModel

@{
    var declareInegibility = Model.Header.DeclareIneligibility;
    var cancelProcess = Model.Header.CancelProcess;
    bool hasDeclareWfLaunched = false;
    bool hasCancelWfLaunched = false;

    if (declareInegibility != null)
    {
        hasDeclareWfLaunched = Model.Header.DeclareIneligibility.HasWfLaunched.HasValue && Model.Header.DeclareIneligibility.HasWfLaunched.Value;
    }

    if (cancelProcess != null)
    {
        hasCancelWfLaunched = Model.Header.CancelProcess.HasWfLaunched.HasValue && Model.Header.CancelProcess.HasWfLaunched.Value;
    }

    var hasWfLaunched = (hasDeclareWfLaunched || hasCancelWfLaunched) ? "hide" : "";
}

@if (Model.ContractsTab != null)
{
    <div class="hide">
        @Display.AddModalButton(new ModalViewModel(contentSelector: "[data-id=\"add-response-contract-document\"]",
            title: Localization.GetText("COMMON.AddDocumment"),
            type: CssClass.ModalSearchAddDocument,
            moveOriginalContent: true,
            name: "btn-open-add-response-contract-doc",
            closeOnOverlay: false,
            allowClose: true
            ))

        @Html.Partial("Controls/IDBDocsProc/AddIDBDoc",
        new PopupDocumentoViewModel
        {
            PopupId = "add-response-contract-document",
            CanMultiSelect = false,
            TargetFunction = "AddResponseContractDoc",
            BusinessAreaCode = BusinessAreaCodeEnum.BA_SG_PROCUREMENT.GetStringValue(),
            OperationNumber = IDBContext.Current.Operation,
        })

        @Display.AddModalButton(new ModalViewModel(contentSelector: "[data-name=\"add-response-contract-warning\"]",
                title: Localization.GetText("Common.Warning"),
                type: CssClass.ModalWarningNoIcon,
                moveOriginalContent: true,
                name: "btn-open-popup-add-response-contract-warning",
                closeOnOverlay: false,
                allowClose: true,
                actionOnClose: "")
                .AddButton(name: "btn-cancel-cancel",
                            text: Localization.GetText("Common.Cancel"),
                            type: CssClass.ButtonLink,
                            callback: "")
                .AddButton(name: "btn-cancel-ok",
                            text: Localization.GetText("COMMON.SVQ.Send"),
                            type: CssClass.Button01,
                             callback: "SendAddResponseContractDoc",
                            closeAtEnd: true))
        <div data-name="add-response-contract-warning" class="hide modalBody">
            <div class="row mb10">
                <div class="col-xs-12 font14">
                    @string.Format(Localization.GetText("SGP.Message.AddResponseDoc.ExecutingAgency"), Model.ExecutingAgencyName)
                </div>
            </div>

            <div class="row mb10">
                <div class="col-xs-12 font14">
                    @Localization.GetText("SGP.Message.AddResponseDoc.BeAbleToCome")
                </div>
            </div>

            <div class="row">
                <div class="col-xs-12 font14 bold">
                    @Localization.GetText("SGP.Message.ThisActionCannotBeUndone")
                </div>
            </div>
        </div>
    </div>
    <div>
        <div class="@(hasWfLaunched)">
            @Html.Partial("ReadPartial/Contracts/Buttons", Model)
        </div>       
        @Confluence.LabelMainSubTitle(Localization.GetText("SGP.Label.Contracts"), htmlClass: "subTitleSG mb10 pt20")
    </div>
    <div class="mb10">
        @Confluence.Label(Localization.GetText("SGP.Label.ContractDetailSubtitle"))
    </div>
    <div class="mb30">
        @Html.Partial("ReadPartial/Contracts/ContractsDataTablePartial", Model.ContractsTab)
    </div>
    <div class="mb30 tabs"></div>
    <div data-section="contract-section-details">
        @if (Model.ContractsTab.ContractDetails != null)
        {
            @Html.Partial("ReadPartial/Contracts/ContractDetailsPartial", Model.ContractsTab.ContractDetails)
        }
    </div>
    <div>
        <div class="@(hasWfLaunched)">
            @Html.Partial("ReadPartial/Contracts/Buttons", Model)
        </div> 
    </div>

    @Html.ScriptBlock(
    @<script type="text/javascript">

        var razorEditParticipants = {
            ProcurementId: '@Model.ProcurementId',
            UrlAddResponse: '@Url.Action("AddResponseBankContractDoc", "ProcurementDetail", new { area = "SGP", tabName = ProcurementDetailNavigation.TAB_NAME_CONTRACTS })',
            
            @if (Model.Header.DeclareIneligibility != null
                && (Model.Header.DeclareIneligibility.HasWfLaunched.HasValue
                && Model.Header.DeclareIneligibility.HasWfLaunched.Value))
            {
                @:HasDeclareWfLaunched: 'True',
            }
            else
            {
                @:HasDeclareWfLaunched: 'False',
            }

            @if (Model.Header.CancelProcess != null
                && (Model.Header.CancelProcess.HasWfLaunched.HasValue
                && Model.Header.CancelProcess.HasWfLaunched.Value))
            {
                @:HasCancelWfLaunched: 'True',
            }
            else
            {
                @:HasCancelWfLaunched: 'False',
            }
        };

        registerCallback(function () {

            /* ------- Call Ajax Details ------- */
            $(document).on('click', '[name="link-Contracts"]', function () {
                var source = $(this);
                var contractId = source.attr('data-contractId');
                var statusId = source.attr('data-statusId');
                var inputContradId = $('input[name="contractId-addResponse"]');
                inputContradId.val(contractId);
                getContractDetails(contractId);
            });

            /* ------- Call Ajax Add Respnse Bank ------- */
            $(document).on('click', '[name="addResponseBankContract"]', function () {
                var source = $(this);
                var modalButton = $('[name="btn-open-add-response-contract-doc"]');
                modalButton.data('pressed-by', source);
                modalButton.click();

                var modalSelector = modalButton.attr('data-new-modal');
                var modal = $(modalSelector);
                var tab = modal.find('[data-tab-id="add"]');
                tab.click();
            });

            /* ------ Call Ajax Terminated Contract ------ */

            $(document).on('click', '[name="terminated-contract"]', function () {
                var modalBtn;

                var hasDeclareLaunchedWF = razorEditParticipants.HasDeclareWfLaunched != '' && razorEditParticipants.HasDeclareWfLaunched == 'True';
                var hasCancelLaunchedWF = razorEditParticipants.HasCancelWfLaunched != '' && razorEditParticipants.HasCancelWfLaunched == 'True';

                if (hasDeclareLaunchedWF || hasCancelLaunchedWF) {
                    modalBtn = $('[name="btn-open-popup-has-inegible-wf-launched"]');
                    modalBtn.click();
                } else {
                    var entityType = $(this).attr("data-entitytype");
                    var entityId = $(this).attr("data-entityid");
                    var url = '@Url.Action("InitTerminatedConctractWorkflow", "ProcurementDetail", new { area = "SGP" })';
                    url = url
                        + '?procurementId=' + razorBiddingDocuments.ProcurementId
                        + '&entityType=' + entityType
                        + '&entityId=' + entityId;

                    LocationAssign(url);
                }
            });

            /* ------ Call Ajax Request Non Objection Contract Amendment  ------ */

            $(document).on('click', '[name="request-nonObjection-amendment"]', function () {
                var modalBtn;

                var hasDeclareLaunchedWF = razorEditParticipants.HasDeclareWfLaunched != '' && razorEditParticipants.HasDeclareWfLaunched == 'True';
                var hasCancelLaunchedWF = razorEditParticipants.HasCancelWfLaunched != '' && razorEditParticipants.HasCancelWfLaunched == 'True';
                
                if (hasDeclareLaunchedWF || hasCancelLaunchedWF) {
                    modalBtn = $('[name="btn-open-popup-has-inegible-wf-launched"]');
                    modalBtn.click();
                } else {
                    var entityType = $(this).attr("data-entitytype");
                    var entityId = $(this).attr("data-entityid");
                    var url = '@Url.Action("InitContractAmendmentWorkflow", "ProcurementDetail", new { area = "SGP" })';
                    url = url
                        + '?procurementId=' + razorBiddingDocuments.ProcurementId
                        + '&entityType=' + entityType
                        + '&entityId=' + entityId;

                    LocationAssign(url);
                }
            });
        });

        /* ---------------------- Functions Contract Table ---------------------- */
        function getContractDetails(contractId) {
            var containerContractDetail = $('div[data-section="contract-section-details"]');
            $.ajax({
                url: '@Url.Action("GetContractDetailsRead", "ProcurementDetail", new { area = "SGP" })',
                data: {
                    "procurementId": razorEditParticipants.ProcurementId,
                    "contractId": contractId,
                },
                cache: false,
                type: 'POST',
            }).done(function (data) {
                containerContractDetail.html(data.ContentHTML);
                bindHandlers(containerContractDetail);
            });
        }

        /* ---------------------- Functions Add Bank Response Contract Document ---------------------- */
        function AddResponseContractDoc(items, type, filenames, source) {
            if (items.length > 0) {
                var docs = [];
                if (type == 'added') {
                    items.forEach(function (item, index, list) {
                        docs.push({ DocumentNumber: item, Description: '' });
                    });
                } else {
                    docs = items;
                }

                var documentNumber = docs[0].DocumentNumber;
                var documentDescription = docs[0].Description;

                var inputDocumentNumber = $('input[name="DocumentIDBDoc-Contract-addResponse"]');
                var inputDocumentDescription = $('input[name="DesciptionIDBDoc-Contract-addResponse"]');

                inputDocumentNumber.val(documentNumber);
                inputDocumentDescription.val(documentDescription);

                var modalBtn = $('[name="btn-open-popup-add-response-contract-warning"]');
                modalBtn.click();
            }
        }

        /* ---------------------- Functions Add Bank Response Contract Document ---------------------- */
        function SendAddResponseContractDoc() {
            var promise = $.Deferred();

            var containerContractDetail = $('div[data-section="contract-section-details"]');
            var inputDocumentNumber = $('input[name="DocumentIDBDoc-Contract-addResponse"]');
            var inputDocumentDescription = $('input[name="DesciptionIDBDoc-Contract-addResponse"]');
            var inputContradId = $('input[name="contractId-addResponse"]');
            

            var documentNumber = inputDocumentNumber.val();
            var documentDescription = inputDocumentDescription.val();
            var contractId = inputContradId.val();

            showLoader();

            $.ajax({
                url: razorEditParticipants.UrlAddResponse,
                data: {
                    procurementId: razorEditParticipants.ProcurementId,
                    contractId : contractId,
                    documenNumber: documentNumber,
                    descriptionDoc: documentDescription
                },
                cache: false,
                type: 'POST',
            }).done(function (data) {
                containerContractDetail.html(data.ContentHTML);
                bindHandlers(containerContractDetail);
            });

            promise.resolve();
            return promise;
        }

    </script>
     )
}

