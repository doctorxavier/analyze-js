@using System.Globalization

@using IDB.Architecture.Language
@using IDB.MW.Application.SGPModule.ViewModels.ProcurementDetail
@using IDB.MW.Infrastructure.Configuration
@using IDB.Architecture.DataTables.Common
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.BaseClasses
@using IDB.MW.Application.Core.ViewModels
@using IDB.Presentation.MVC4.Areas.SGP.Mappers
@using IDB.MVCControls.DataTable.Models

@model ContractDetailsViewModel

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDecimal = appSettings.FormatDecimal;
    var formatDate = appSettings.FormatDate;
    var canPublishAndRquestNon = Model.ViewContainer.GetValue<bool>("canPublishAndRquestNon");

    var config = Html.RenderDataTable(Model.ContractAmendments)
        .Name("ContractAmendments")
        .PrimaryKey(x => x.Id.ToString(CultureInfo.InvariantCulture))
        .AddPrimaryKeyToName(false)
        .UseDataTableNet(false)
        .UsePageMode(false)
        .Columns(columns =>
        {
            columns.Bound(c => c.User)
            .HeaderAttribute("style", "width: 100px;min-width: 100px;max-width: 100px;")
            .Header(Localization.GetText("COMMON.User"));

            columns.Bound(c => FormatHelper.Format(c.Date, formatDate))
            .CssClass("textalign-center date-template")
            .HeaderAttribute("style", "width: 100px;min-width: 100px;max-width: 100px;")
            .Header(Localization.GetText("COMMON.Date"));

            columns.Template(c => Confluence.ButtonLink(c.DocumentNumber, "documentNumberLink", htmlClass: "bold"))
            .CssClass("document-number textalign-center")
            .HeaderAttribute("style", "width: 70px;min-width: 70px;max-width: 70px;")
            .Header(Localization.GetText("COMMON.SVQ.DocNumber#"));

            columns.Template(ColumnModification)
            .HeaderAttribute("style", "width: 175px;min-width: 175px;max-width: 175px;")
            .Header(Localization.GetText("SGP.Label.Modification"));

            columns.Bound(c => FormatHelper.Format(c.DetailsAmendment.SignatureDate.Item1, formatDate))
            .CssClass("textalign-center")
            .HeaderAttribute("style", "width: 104;min-width: 104;max-width: 104;")
            .Header(Localization.GetText("SGP.Label.AmedmentSignature"));

            columns.Bound(c => c.Description)
            .HeaderAttribute("style", "width: 215px;min-width: 215px;max-width: 215px;")
            .Header(Localization.GetText("COMMON.Description"));

            columns.Template(c => Confluence.InputText(c.DocumentNumber, "ContractAmendments-DocumentIDBDoc", disabled: false, width: "100%", required: false))
            .Hidden(true);
            
            columns.Bound(c => c.NonObjectionStatusText)
            .HeaderAttribute("style", "width: 107px;min-width: 107px;max-width: 107px;")
            .Header(Localization.GetText("SGP.Label.NonObjectionStatus"));

            columns.Template(ColumnActions)
            .CssClass("textalign-center pr0 pl0")
            .HeaderAttribute("style", "width: 90px;min-width: 90px;max-width: 90px;")
            .Header(Localization.GetText("COMMON.Action"));
            
        })
        .RowTemplates(x =>
        {
            x.Create(RowTemplateType.AllRows, t => Detail(t));
        });

    config.TableClass = "tableNormal";
}

<div class="row mb5">
    <div class="col-xs-4">
        @(Html.CollapseSingle("collapseComponent")
          .HtmlClass("component-collapse alignSubtitle")
          .TargetRegionSelector("[data-name=\"contract-amedments-section\"]")
        )
        <div style="display:inline-block; margin-left:10px;">
            @Confluence.LabelSubTitleGroup(Localization.GetText("SGP.Label.ContractAmendments"))
        </div>
    </div>
    <div class="col-xs-4 pl0" style="padding-top:8px;">
        @Confluence.LabelLinkBlank(text: Localization.GetText("SGP.COMMON.ViewTemplates"), url: "", name: "viewTemplatesLink", htmlClass: "bold align-subtitle hide")
    </div>

    @if (Model.ShowContractAmendmentNonObjBtn && canPublishAndRquestNon)
    { 
    <div class="col-xs-4" style="text-align:right;">
            @Confluence.ButtonBlue(Localization.GetText("SGP.Button.RequestNonObject"), "request-nonObjection-amendment", disabled: !Model.IsEnabledContractAmendmentNonObjBtn, dataAttributes: new Dictionary<string, string>() { { "entitytype", Model.WorkflowContractAmendmentEntityType }, { "entityid", Model.WorkflowEntityId.ToString() } })
    </div>
    }
    
</div>
<div class="row mb20" data-name="contract-amedments-section">
    <div class="col-xs-12">
        @Html.Partial("Controls/DataTable", config)
    </div>
</div>

@helper ColumnModification(ContractDataDocumentViewModel row)
{
    var text = string.Empty;
    foreach (var item in row.ModificationTexts)
    {
        text = text + item + ", ";
    }
    
    @(text.IsEmpty() ? text : text.Substring(0, text.Length - 2))
}

@helper ColumnActions(ContractDataDocumentViewModel row)
{
    <div class="textalign-center">
        @Confluence.ButtonDownload("", "DownLoadDoc")
        @(Html.CollapseSingle("collapseAmedmentsDetails")
            .HtmlClass("arrow")
            .TargetRegionSelector(x => x.Closest("tr").Next())
            .AsociatedCollapseAllSelector("[data-name=\"collapseAllAmedments\"]"))
    </div>
}

@helper Detail(ContractDataDocumentViewModel row)
{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDecimal = appSettings.FormatDecimal;
    var formatDate = appSettings.FormatDate;
    var formatDolar = appSettings.FormatIntegerDolar;

    var modificationStartDateId = Model.ViewContainer.GetValue<int>("ModificationStartDateId");
    var modificationEndDateId = Model.ViewContainer.GetValue<int>("ModificationEndDateId");
    var modificationAmountId = Model.ViewContainer.GetValue<int>("ModificationAmountId");
    var modificationLotsId = Model.ViewContainer.GetValue<int>("ModificationLotsId");

    var modificationIds = row.ModificationIds;
    var showDetail = modificationIds.Any();

    var startDateModifys = modificationIds.Any(x => x == modificationStartDateId) ? string.Empty : "hide";
    var endDateModifys = modificationIds.Any(x => x == modificationEndDateId) ? string.Empty : "hide";
    var amountModifys = modificationIds.Any(x => x == modificationAmountId) ? string.Empty : "hide";
    var lotsModifys = modificationIds.Any(x => x == modificationLotsId) ? string.Empty : "hide";
    
    var showQuantity = Model.ViewContainer.GetValue<bool>("showQuantity");
    var showLots = Model.ViewContainer.GetValue<bool>("showLots");
    
    <tr class="extend-custom" data-id="@row.Id">
        <td colspan="9">
            @if(showDetail)
            {
                   <div class="row @(startDateModifys == "hide" && endDateModifys == "hide" ? "": "mb5")">
                        <div class="col-xs-3 @(startDateModifys)">
                            @Confluence.Label(Localization.GetText("SGP.Label.NewContractStartDate"))
                        </div>
                       <div class="col-xs-3 @(endDateModifys)">
                           @Confluence.Label(Localization.GetText("SGP.Label.NewContractEndDate"))
                       </div>
                    </div>
                    <div class="row @(startDateModifys == "hide" && endDateModifys == "hide" ? "" : "mb25")">
                        <div class="col-xs-3 @(startDateModifys)">
                            @Confluence.LabelBold(FormatHelper.Format(row.DetailsAmendment.StartDate.Item1, formatDate))
                        </div>
                        <div class="col-xs-3 @(endDateModifys)">
                            @Confluence.LabelBold(FormatHelper.Format(row.DetailsAmendment.EndDate.Item1, formatDate))
                        </div>
                    </div>
                    <div class="row @(amountModifys) @(amountModifys == "hide" ? "" : "mb5")">
                        <div class="col-xs-1">
                            @Confluence.Label(Localization.GetText("COMMON.Currency"))
                        </div>
                        <div class="col-xs-3">
                            @Confluence.Label(Localization.GetText("SGP.Button.AddSubAmount"))
                        </div>
                        <div class="col-xs-4">
                            @Confluence.Label(Localization.GetText("SGP.Label.ConvertedToUSDNoSystem"))
                            @Confluence.Label(Localization.GetText("SGP.Label.SystemUSDConversion"), htmlClass: "fontSize11px")
                        </div>
                    </div>
                    foreach (var item in row.DetailsAmendment.CurrencyAmounts)
                    {
                        <div data-name="amount-item" class="row @(amountModifys)">
                            <div class="col-xs-1">
                                @Confluence.LabelBold(item.CurrencyAmountTypeCode.Item1)
                            </div>
                            <div class="col-xs-3">
                                @Confluence.LabelBold(FormatHelper.Format(item.TotalContractAmount.Item1, formatDecimal))
                            </div>
                            <div class="col-xs-4">
                                @Confluence.LabelBold(FormatHelper.Format(item.ConvertedUSDAmount.Item1, formatDolar))
                            </div>
                        </div>
                    }
                    if (showLots)
                    {
                        <div class="row @(lotsModifys) @(lotsModifys == "hide" ? "" : "mb5")">
                            <div class="col-xs-3">
                                @Confluence.Label(Localization.GetText("SGP.Label.LotName"))
                            </div>
                            @if (showQuantity)
                            {
                                <div class="col-xs-1">
                                    @Confluence.Label(Localization.GetText("SGP.Label.Quantity"))
                                </div>
                            }
                            <div class="col-xs-3">
                                @Confluence.Label(Localization.GetText("COMMON.Amount"))
                            </div>
                        </div>
                        foreach (var item in row.DetailsAmendment.Lots)
                        {
                                <div data-name="lot-item" class="row @(lotsModifys)">
                                    <div class="col-xs-3">
                                        @Confluence.LabelBold(item.Name.Item1)
                                    </div>
                                    @if (showQuantity)
                                    {
                                        <div class="col-xs-1">
                                            @Confluence.LabelBold(item.Quantity.Item1.ToString())
                                        </div>
                                    }
                                    <div class="col-xs-3">
                                        @Confluence.LabelBold(FormatHelper.Format(item.Amount.Item1, formatDecimal))
                                    </div>
                                </div>
                            }
                       }
            }
        </td>
    </tr>
}


