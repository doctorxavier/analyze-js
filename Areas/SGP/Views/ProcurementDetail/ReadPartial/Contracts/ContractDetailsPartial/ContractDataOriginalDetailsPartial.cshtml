@using System.Globalization

@using IDB.Architecture.Language
@using IDB.Presentation.MVC4.General
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.BaseClasses
@using IDB.Presentation.MVC4.Models.Modal
@using IDB.MW.Application.Core.ViewModels
@using IDB.MW.Infrastructure.Configuration
@using IDB.Presentation.MVC4.Areas.SGP.Mappers

@using IDB.MW.Application.SGPModule.ViewModels.ProcurementDetail

@model ContractDetailsViewModel

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDolar = appSettings.FormatIntegerDolar;
    var formatDate = appSettings.FormatDate;
    var formatDecimal = appSettings.FormatDecimal;
    var formatPercent = appSettings.FormatPercent;
    var showQuantity = Model.ViewContainer.GetValue<bool>("showQuantity");
    var showLots = Model.ViewContainer.GetValue<bool>("showLots");
}

<div class="row mb10">
    @if (Model.DetailsOriginal.SignatureDateVisible)
    {
        <div class="col-xs-4 pr0">
            @Confluence.Label(Localization.GetText("SGP.Label.ContractSignatureDate"))
        </div>        
    }
    <div class="col-xs-4">
        @Confluence.Label(Localization.GetText("SGP.Label.ContractStartDate"))
    </div>
    <div class="col-xs-4">
        @Confluence.Label(Localization.GetText("SGP.Label.ContractEndDate"))
    </div>
</div>
<div class="row mb25">
    @if (Model.DetailsOriginal.SignatureDateVisible)
    {
        <div class="col-xs-4">
            @Confluence.LabelBold(FormatHelper.Format(Model.DetailsOriginal.SignatureDate.Item1, formatDate), htmlClass: Model.DetailsOriginal.SignatureDate.Item2)
            @Confluence.InputDatePicker(Model.DetailsOriginal.SignatureDate.Item1, name: "dateSignature-contracts", required: false, disabled: true,  htmlClass: "hide")
        </div>
    }
    <div class="col-xs-4">
        @Confluence.LabelBold(FormatHelper.Format(Model.DetailsOriginal.StartDate.Item1, formatDate), htmlClass: Model.DetailsOriginal.StartDate.Item2)
        @Confluence.InputDatePicker(Model.DetailsOriginal.StartDate.Item1, name: "dateStart-contracts", required: false, disabled: true, htmlClass: "hide")
    </div>
    <div class="col-xs-4">
        @Confluence.LabelBold(FormatHelper.Format(Model.DetailsOriginal.EndDate.Item1, formatDate), htmlClass: Model.DetailsOriginal.EndDate.Item2)
        @Confluence.InputDatePicker(Model.DetailsOriginal.EndDate.Item1, name: "dateEnd-contracts", required: false, disabled: true, htmlClass: "hide")
    </div>
</div>
<div class="row mb10">
    <div class="col-xs-5">
        @Confluence.Label(Localization.GetText("SGP.Label.TotalContractAmount"))
    </div>
    <div class="col-xs-7">
        @Confluence.Label(Localization.GetText("SGP.Label.ConvertedToUSDNoSystem"))
        @Confluence.Label(Localization.GetText("SGP.Label.SystemUSDConversion"), htmlClass: "fontSize11px")
    </div>
</div>
<div class="mb25">
    @foreach (var item in Model.DetailsOriginal.CurrencyAmounts)
    {
        <div data-name="amount-item" class="row mb10">
            <div class="col-xs-5 pl0">
                <div class="col-xs-2">
                    @Confluence.LabelBold(item.CurrencyAmountTypeCode.Item1, htmlClass: item.CurrencyAmountTypeCode.Item2)
                </div>
                <div class="col-xs-10">
                    @Confluence.LabelBold(FormatHelper.Format(item.TotalContractAmount.Item1, formatDecimal), htmlClass: item.TotalContractAmount.Item2)
                </div>
            </div>
            <div class="col-xs-7">
                @Confluence.LabelBold(FormatHelper.Format(item.ConvertedUSDAmount.Item1, formatDolar), htmlClass: item.ConvertedUSDAmount.Item2)
            </div>
        </div>
    }
</div>
@if (showLots)
{ 
    <div class="row mb10">
            <div class="col-xs-4">
                @Confluence.Label(Localization.GetText("SGP.Label.LotName"))
            </div>
            @if (showQuantity)
            { 
                <div class="col-xs-2">
                    @Confluence.Label(Localization.GetText("SGP.Label.Quantity"))
                </div>
            }
            <div class="col-xs-3">
                @Confluence.Label(Localization.GetText("COMMON.Amount"))
            </div>
        </div>
        <div>
            @foreach (var item in Model.DetailsOriginal.Lots)
            {
                <div data-name="lot-item" class="row mb10">
                    <div class="col-xs-4">
                        @Confluence.LabelBold(item.Name.Item1, htmlClass: item.Name.Item2)
                    </div>
                    @if (showQuantity)
                    {
                        <div class="col-xs-2">
                            @Confluence.LabelBold(item.Quantity.Item1.ToString(), htmlClass: item.Quantity.Item2)
                        </div>
                    }
                    <div class="col-xs-3">
                        @Confluence.LabelBold(FormatHelper.Format(item.Amount.Item1, formatDecimal), htmlClass: item.Amount.Item2)
                    </div>
                </div>
            }
        </div>
}