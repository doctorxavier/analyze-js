@using System.Web.Mvc
@using System.Globalization

@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MW.Application.SGPModule.ViewModels
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.MW.Infrastructure.SecurityService.Enums
@using IDB.Presentation.MVC4.Helpers
@using IDB.MW.Application.SGPModule.Constants
@using IDB.MW.Application.SGPModule.ViewModels.ProcurementDetail
@using IDB.Architecture.Language
@using IDB.MW.Application.Core.ViewModels
@using IDB.Presentation.MVC4.Areas.SGP.Mappers
@using IDB.MW.Infrastructure.BaseClasses

@model LotsTabViewModel

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDate = appSettings.FormatDate;
    var goodsId = Model.ViewContainer.GetValue<int>("GoodsId");
    var operationProcType = Model.ViewContainer.GetValue<int>("OperationProcType");

    var config = Html.RenderDataTable(Model.Lots)
        .Name("lots-Table")
        .AddPrimaryKeyToName(false)
        .PrimaryKey(x => x.Id.ToString(CultureInfo.InvariantCulture))
        .UseDataTableNet(false)
        .UsePageMode(false)
        .Columns(columns =>
        {
            columns.Template(c => OrderNumberTemplate(c))
            .Orderable(false)
            .HeaderAttribute("order-type", "numeric")
            .CssClass("text-center colLotId")
            .CssHeaderClass("colLotId sort")
            .Header(Localization.GetText("SGP.Label.Lot#"))
            .Hidden(false);
            
            columns.Bound(c => c.LotName)
            .Orderable(false)
            .CssClass("")
            .CssHeaderClass("sort")
            .HeaderAttribute("order-type", "text")
            .Header(Localization.GetText("SGP.Label.LotName"))
            .Hidden(false);

            if (operationProcType == goodsId)
            {
            columns.Bound(c => c.Quantity)
            .Orderable(false)
            .CssClass("text-center")
            .CssHeaderClass("sort")
            .HeaderAttribute("order-type", "numeric")
            .Header(Localization.GetText("SGP.Label.Quantity"))
            .Hidden(false);
            }
            
            columns.Template(c => EstimatedAmount(c))
            .Orderable(false)
            .CssClass("text-right notSpacingAmount")
            .CssHeaderClass("sort")
            .HeaderAttribute("order-type", "text")
            .Header(Localization.GetText("SGP.Label.EstimatedAmount"))
            .Hidden(false);

            columns.Bound(c => c.StatusText)
            .Orderable(false)
            .CssClass("")
            .HeaderAttribute("order-type", "text")
            .CssHeaderClass("sort")
            .Header(Localization.GetText("COMMON.Status"))
            .Hidden(false);

            columns.Bound(c => c.Winner)
            .Orderable(false)
            .CssClass("")
            .CssHeaderClass("sort")
            .HeaderAttribute("order-type", "text")
            .Header(Localization.GetText("SGP.Label.Winner"))
            .Hidden(false);

            columns.Bound(c => c.Contract)
            .CssClass("text-center colLotsContracts sort")
            .CssHeaderClass("sort colLotsContracts")
            .HeaderAttribute("order-type", "text")
            .Header(Localization.GetText("SGP.Label.Contract"));
            
        });
        
        config.TableClass = "tableNormal";
}

@Html.Partial("Controls/DataTable", config)

@helper OrderNumberTemplate(LotsRowViewModel row)
{
    var orderNumberString = row.OrderNumber.ToString();

    <span data-selector="orderNumber-Text"> @orderNumberString</span>
}

@helper EstimatedAmount(LotsRowViewModel row)
{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDecimal = appSettings.FormatDecimal;
    @Confluence.Label(FormatHelper.Format(row.EstimatedAmount, formatDecimal))
    @Confluence.InputText(row.EstimatedAmount.ToString(), "inputDec", required: false, htmlClass:"hide")
}
