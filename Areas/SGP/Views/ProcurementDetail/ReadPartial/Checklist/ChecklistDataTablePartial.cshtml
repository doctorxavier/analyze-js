@using System.Web.Mvc
@using System.Globalization

@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MW.Application.SGPModule.ViewModels
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.MW.Infrastructure.SecurityService.Enums
@using IDB.Presentation.MVC4.Helpers
@using IDB.MW.Application.SGPModule.Constants
@using IDB.MW.Application.SGPModule.ViewModels.ProcurementDetail
@using IDB.Architecture.Language
@using IDB.MW.Application.Core.ViewModels
@using IDB.Presentation.MVC4.Areas.SGP.Mappers
@using IDB.MW.Infrastructure.BaseClasses

@model ChecklistTabViewModel

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDate = appSettings.FormatDate;

    var config = Html.RenderDataTable(Model.Items)
        .Name("ChecklistTable")
        .AddPrimaryKeyToName(false)
        .PrimaryKey(x => x.Id.ToString(CultureInfo.InvariantCulture))
        .UseDataTableNet(false)
        .UsePageMode(false)
        .Columns(columns =>
        {
            columns.Template(c => Confluence.Label(c.MilestoneName, dataAttributes: new Dictionary<string, string> { { "toggle", "tooltip" }, { "title", Localization.GetText(c.MilestoneTootlip) } }))
            .Orderable(false)
            .CssClass("colMilestone")
            .CssHeaderClass("colMilestone")
            .Header(Localization.GetText("SGP.Label.CheckListMilestone"))
            .Hidden(false);

            columns.Bound(c => FormatHelper.Format(c.BaselineDate,formatDate))
            .Orderable(false)
            .CssClass("colBaseline")
            .CssHeaderClass("colBaseline")
            .Header(Localization.GetText("SGP.Label.InitialEstimationDate"))
            .Hidden(false);

            columns.Bound(c => FormatHelper.Format(c.UpdatedPlanningDate, formatDate))
            .Orderable(false)
            .CssClass("colPlanning")
            .CssHeaderClass("colPlanning")
            .Header(Localization.GetText("SGP.Label.ReEstimationDate"))
            .Hidden(false);

            columns.Template(c => CompletionMethod(c))
            .Orderable(false)
            .CssClass("colCompletionMethod textalign-center")
            .CssHeaderClass("colCompletionMethod")
            .Header(Localization.GetText("SGP.Label.CompletionMethod"))
            .Hidden(false);

            columns.Bound(c => FormatHelper.Format(c.CompletionDate,formatDate))
            .Orderable(false)
            .CssClass("colCompletionDate")
            .CssHeaderClass("colCompletionDate")
            .Header(Localization.GetText("SGP.Label.CompletionDate"))
            .Hidden(false);
            
        });
        
    config.TableClass = "tableNormal";
}

@Html.Partial("Controls/DataTable", config)

@helper CompletionMethod(ChecklistRowViewModel item)
{
    var completeManualId = Model.ViewContainer.GetValue<int>("CompleteManual");
    var check = "";

    if (item.MilestoneIsComplete)
    {
        check = "checked=\"checked\"";
    }
    
    if (completeManualId == item.CompletionMethodId)
    {
        <div class="" name="completionMethod">
            @Confluence.Label(item.CompletionMethodText.ToString()) &nbsp; 
            <input type="checkbox" disabled="disabled" name="checkMethod" @check/> 
        </div>
    }
   
    else
    {
        <div class="" name="completionMethod">
            @Confluence.Label(item.CompletionMethodText.ToString())
        </div>
    }
}