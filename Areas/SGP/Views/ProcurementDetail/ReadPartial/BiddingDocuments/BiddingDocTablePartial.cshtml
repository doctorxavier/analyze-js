@using System.Web.Mvc
@using System.Linq
@using System.Globalization

@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.MW.Infrastructure.SecurityService.Enums
@using IDB.Presentation.MVC4.Helpers
@using IDB.Architecture.Language
@using IDB.MW.Application.SGPModule.Constants
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.MW.Application.SGPModule.ViewModels.ProcurementDetail
@using IDB.MW.Application.SGPModule.ViewModels

@model PackageDetailViewModel

@if (Model != null)
{
    <div class="row">
        <div class="col-xs-12">
            @{
            var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
            var formatDate = appSettings.FormatDate;

            var config = Html.RenderDataTable(Model.BiddingDocRow)
                .Name("BiddingDocumentPackage")
                .PrimaryKey(x => x.DocumentId.ToString(CultureInfo.InvariantCulture))
                .AddPrimaryKeyToName(false)
                .UseDataTableNet(false)
                .UsePageMode(false)
                .Columns(columns =>
                {
                    columns.Bound(c => c.DocumentTypeText)
                    .HeaderAttribute("style", "width: 200px;min-width: 200px;max-width: 200px;")
                    .Header(Localization.GetText("SGP.Label.DocumentType"));

                    if (Model.HaveResut)
                    {
                        columns.Bound(c => c.ResultTypeText)
                        .HeaderAttribute("style", "width: 120px;min-width: 120px;max-width: 120px;")
                        .Header(Localization.GetText("SGP.Label.Result"));
                    }

                    columns.Bound(c => c.User)
                    .HeaderAttribute("style", "width: 100px;min-width: 100px;max-width: 100px;")
                    .CssClass("textalign-center")
                    .Header(Localization.GetText("COMMON.User"));
                    
                    columns.Bound(c => FormatHelper.Format(c.Date, formatDate))
                    .HeaderAttribute("style", "width: 100px;min-width: 100px;max-width: 100px;")
                    .CssClass("textalign-center")
                    .Header(Localization.GetText("COMMON.Date"));

                    columns.Template(c => Confluence.ButtonLink(c.DocumentNumber, "documentNumberLink", htmlClass: "bold"))
                    .HeaderAttribute("style", "width: 70px;min-width: 70px;max-width: 70px;")
                    .CssClass("document-number textalign-center")
                    .Header(Localization.GetText("COMMON.SVQ.DocNumber#"));

                    columns.Bound(c => c.Description)
                    .HeaderAttribute("style", "width: 191px;min-width: 191px;max-width: 191px;")
                    .Header(Localization.GetText("COMMON.Description"));

                    columns.Bound(c => c.NonObjectionStatusTypeText)
                    .HeaderAttribute("style", "width: 107px;min-width: 107px;max-width: 107px;")
                    .Header(Localization.GetText("SGP.Label.NonObjectionStatus"));

                    columns.Template(c => ActionsTermsReference(c))
                    .HeaderAttribute("style", "width: 80px;min-width: 80px;max-width: 80px;")
                    .Header(Localization.GetText("COMMON.Action"));

                });

            config.TableClass = "tableNormal";
            }

            @Html.Partial("Controls/DataTable", config)
        </div>
    </div>
}

@helper ActionsTermsReference(BiddingDocRowViewModel row)
{
    if (!string.IsNullOrWhiteSpace(row.DocumentNumber))
    {
        <div class="textalign-center">
            @Confluence.ButtonDownload("", "DownLoadDoc")
        </div>
        @Confluence.InputText(row.DocumentNumber, "DocumentIDBDoc-bidding", disabled: false, width: "100%", required: false, htmlClass: "hide")
    }
}