@using IDB.MW.Application.SGPModule.ViewModels.ProcurementDetail;
@using IDB.Presentation.MVC4.General
@using IDB.Presentation.MVC4.Models.Modal

@model PackageDetailViewModel

@if (Model != null)
{
    if (!string.IsNullOrWhiteSpace(Model.PublishPopupMessage))
    {
        @Display.AddModalButton(new ModalViewModel(contentSelector: "[data-name=\"bidding-publish\"]",
                title: Localization.GetText("Common.Warning"),
                type: CssClass.ModalWarningNoIcon,
                moveOriginalContent: true,
                name: "btn-open-popup-publish",
                closeOnOverlay: false,
                allowClose: true,
                actionOnClose: "")
                .AddButton(name: "btn-cancel-cancel",
                            text: Localization.GetText("Common.Cancel"),
                            type: CssClass.ButtonLink,
                            callback: "")
                .AddButton(name: "btn-cancel-ok",
                            text: Localization.GetText("Common.Ok"),
                            type: CssClass.Button05,
                             callback: "ChangeStatusDoc",
                            closeAtEnd: true))
        <div data-name="bidding-publish" class="hide modalBody">
            @Model.PublishPopupMessage
        </div>
    }

    var canPublishAndRquestNon = Model.ViewContainer.GetValue<bool>("canPublishAndRquestNon");
    var canAddResponse = Model.ViewContainer.GetValue<bool>("canAddResponse");

    @Confluence.InputHidden(Model.PackageId.ToString(), "BiddingIdHidden")
    @Confluence.InputHidden(Model.CanEditPackage.ToString(), "canEditPackageHidden")
    @Confluence.InputHidden(Model.CanModifyPackage.ToString(), "canModifyPackageHidden")
    <div class="row mb20">
        <div class="col-xs-12">
            @Confluence.LabelTitleGroup(Model.NamePackage)

        </div>
    </div>
    if (Model.Workflows != null && Model.Workflows.Count > 0)
    {
        <div class="row mb20">
            <div class="col-xs-12">
                @Confluence.LabelMainSubTitle(Localization.GetText("SGP.Label.WorkFlowDetails"), htmlClass: "subTitleSG mb0 mt0")
            </div>
        </div>
        <div class="row mb10">
            <div class="col-xs-4">
                @Confluence.Label(Localization.GetText("COMMON.ID"))
            </div>
            <div class="col-xs-8">
                @Confluence.Label(Localization.GetText("COMMON.Status"))
            </div>
        </div>
        foreach (var workflow in Model.Workflows)
        {

            <div class="row mb10">
                <div class="col-xs-4">
                    @Confluence.LabelBold(text: workflow.WorkFlowCode)
                </div>
                <div class="col-xs-8">
                    @Confluence.LabelBold(workflow.Status)
                </div>
            </div>
        }

        <div class="row mb20">
            <div class="col-xs-12"></div>
        </div>
    }
    <div class="row mb10">
        <div class="col-xs-3">
            @Confluence.LabelMainSubTitle(Localization.GetText("SGP.Label.BiddingDocuments"), htmlClass: "fontSize20px subTitleSG mb0 mt15")
        </div>
        <div class="col-xs-2" style="padding-top:19px;">
            @Confluence.LabelLink(Localization.GetText("SGP.COMMON.ViewTemplates"), htmlClass: "hide")
        </div>

        <div class="col-xs-7">
            @if (canPublishAndRquestNon)
            {
                if (Model.ShowRequestForPublishing)
                {
                    <div data-id="headerButtons" class="float-right">
                        <div data-type="contentButtons">
                            @Confluence.ButtonBlue(Localization.GetText("SGP.Button.RequestForPublishing"), name: "requestFoPublishing-button", disabled: Model.IsDisabledRequestForPublishing, dataAttributes: new Dictionary<string, string>() { { "entitytype", Model.WorkflowReqForPublishingSPNEntityType }, { "entityid", Model.WorkflowReqForPublishinSPNEntityId.ToString() }, { "publishtypeId", Model.RequestForPublisingTypeId.ToString() } })
                        </div>
                    </div>
                }


                if (Model.ShowRequestNonObjection)
                {
                    <div data-id="headerButtons" class="float-right">
                        <div data-type="contentButtons" class="mr5">
                            @Confluence.ButtonBlue(Localization.GetText("SGP.Button.RequestNonObject"), name: "EditBidding", disabled: Model.IsDisabledRequestNonObjection, dataAttributes: new Dictionary<string, string>() { { "entitytype", Model.WorkflowEntityType }, { "entityid", Model.WorkflowEntityId.ToString() } })
                        </div>
                    </div>
                }

                if (!string.IsNullOrWhiteSpace(Model.PublishButtonText))
                {
                    <div data-id="headerButtons" class="float-right">
                        <div class="mr5">
                            @Confluence.ButtonBlue(Model.PublishButtonText, name: "publishButton", disabled: string.IsNullOrWhiteSpace(Model.PublishPopupMessage))
                        </div>
                    </div>
                }

            }

            @if (Model.ShowAddBankResponse && canAddResponse)
            {
                <div class="@(string.IsNullOrWhiteSpace(Model.PublishButtonText) && !Model.ShowRequestForPublishing && !Model.ShowRequestNonObjection ? "mr0" : "mr5") float-right">
                    @Confluence.ButtonBlue(Localization.GetText("SGP.Button.AddBankResponse"), name: "addResponseBank", htmlClass: "mr0")
                    @Confluence.InputText("", "DocumentIDBDoc-addResponse", disabled: false, width: "100%", required: false, htmlClass: "hide")
                    @Confluence.InputText("", "DesciptionIDBDoc-addResponse", disabled: false, width: "100%", required: false, htmlClass: "hide")
                    @Confluence.InputText(Model.PackageId.ToString(), "packageId-addResponse", disabled: false, width: "100%", required: false, htmlClass: "hide")
                </div>
            }
        </div>
    </div>

    @Html.Partial("ReadPartial/BiddingDocuments/BiddingDocTablePartial", Model)
}