@using System.Globalization;
@using IDB.MVCControls.DataTable.Helpers
@using IDB.MVCControls.DataTable.Models
@using IDB.Architecture.ApplicationParameter
@using IDB.MW.Application.SGPModule.ViewModels
@using IDB.MVCControls.General.Helpers
@using IDB.MW.Infrastructure.Configuration
@using IDB.Architecture.DataTables.Common
@using IDB.MW.Application.Core.ViewModels
@using IDB.Presentation.MVC4.Areas.SGP.Mappers
@using IDB.MW.Infrastructure.BaseClasses
@using IDB.MW.Application.Core.Container
@using IDB.MW.Application.SGPModule.Enums
@using IDB.Presentation.MVC4.Helpers

@using IDB.MW.Domain.StoredProcedures.Outputs.SGP
@using IDB.MW.Domain.StoredProcedures.Outputs.SGP.Enums

@model ProcurementLevelViewModel

@{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDecimal = appSettings.FormatDecimal;
    var formatDate = appSettings.FormatDate;
    var tableName = "ProcurementPlanForAgency";

    var supervisionMethodList = Model.ViewContainer.GetValue<CustomEnumDictionary<MasterDataViewModel>>("SupervisionMethod").ConvertToSelectListItems();
    var procurementTypeList = Model.ViewContainer.GetValue<CustomEnumDictionary<MasterDataViewModel>>("ProcurementType").ConvertToSelectListItems();
    var componentList = Model.ViewContainer.GetValue<List<ListItemViewModel>>("Components").ConvertToSelectListItems();
    var procurementMethodList = Model.ViewContainer.GetValue<List<MasterDataViewModel>>("ProcurementMethod").ConvertToSelectListItems();

    var config = Html.RenderDataTable(Model.Procurements)
        .Name(tableName)
        .AddPrimaryKeyToName(false)
        .PrimaryKey(x => x.PepProcurementId.ToString(CultureInfo.InvariantCulture))
        .UseDataTableNet(false)
        .UsePageMode(false)
        .RowCssClass(x => CalculateBackground(x, Model.ViewContainer))
        .Columns(columns =>
        {
            columns.Template(c => ProcessId(c))
                .Orderable(false)
                .CssClass("text-align-left")
                .CssHeaderClass("")
                .Header(Localization.GetText("SGP.Label.ProcessID"))
                .HeaderAttribute("style", "")
                .Hidden(false);
            columns.Template(c => Confluence.LabelGetDropDown(c.ProcurementTypeId, procurementTypeList, false))
                .Orderable(false)
                .CssClass("")
                .CssHeaderClass("")
                .Header(Localization.GetText("SGP.Label.ProcurementType"))
                .HeaderAttribute("style", "")
                .Hidden(false);
            columns.Template(c => Confluence.LabelGetDropDown(c.ComponentId, componentList, false))
                .Orderable(false)
                .CssClass("")
                .CssHeaderClass("")
                .Header(Localization.GetText("SGP.Label.Component"))
                .HeaderAttribute("style", "")
                .Hidden(false);
            columns.Template(c => ProcurementName(c, Model.ViewContainer))
                .Orderable(true)
                .CssClass("")
                .CssHeaderClass("")
                .Header(Localization.GetText("SGP.Label.ProcurementName"))
                .HeaderAttribute("style", "")
                .Hidden(false);
            columns.Template(c => TotalCost(c))
                .Orderable(false)
                .CssClass("no-wrap-space textalign-right")
                .CssHeaderClass("")
                .Header(Localization.GetText("COMMON.SVQ.TotalCost"))
                .HeaderAttribute("style", "")
                .Hidden(false);
            columns.Template(c => Confluence.LabelGetDropDown(c.ProcurementMethodId, procurementMethodList, false))
                .Orderable(false)
                .CssClass("")
                .CssHeaderClass("")
                .Header(Localization.GetText("SGP.Label.ProcurementMethod"))
                .HeaderAttribute("style", "")
                .Hidden(false);
            columns.Template(c => Confluence.LabelGetDropDown(c.SupervisionMethodId, supervisionMethodList, false))
                .Orderable(false)
                .CssClass("")
                .CssHeaderClass("")
                .Header(Localization.GetText("SGP.Label.SupervisionMethod"))
                .HeaderAttribute("style", "")
                .Hidden(false);
            columns.Template(c => Status(c))
                 .Orderable(false)
                 .CssClass("")
                 .CssHeaderClass("")
                 .Header(Localization.GetText("COMMON.Status"))
                 .HeaderAttribute("style", "")
                 .Hidden(false);
            columns.Template(c => Actions(c))
                .Orderable(false)
                .CssClass("columnActionOnlyCollapse")
                .CssHeaderClass("")
                .Header("")
                .HeaderAttribute("style", "")
                .Hidden(false);
        })
        .RowTemplates(x =>
        {
            x.Create(RowTemplateType.AllRows, t => Detail(t, Model.ViewContainer));
        })
    ;
    config.TableClass = "tableNormal";
}

@Confluence.InputHidden(PageSerializationHelper.SerializeObject(Model.Procurements), name: "serializedProcurements")
<table class="table-transparent mb10">
    <tbody>
        <tr>
            <td class="table-transparent-text">
                <div class="mb5 aligment">
                    @Confluence.LabelMainSubTitle(String.Format(Localization.GetText("SGP.Label.ProcurementPlanFor"), Model.ExecutingAgencyName))
                </div>
            </td>
            <td class="table-transparent-buttons pr0 pl20 align-subtitle">
                <div class="col-xs-12">
                    <div class="col-xs-12 pr0">
                        @Confluence.Label(Localization.GetText("SGP.Label.ActiveProcurementProcesses"))
                    </div>
                    <div class="col-xs-12" style="text-align:left;">
                        @Confluence.Label(Model.ActiveProcess.ToString() + "/" + Model.Procurements.Count, htmlClass: "bold")
                    </div>
                </div>
            </td>
            <td class="table-transparent-buttons align-subtitle">
                @(Html.CollapseAll("collapseAllProcurementsEdit")
                                        .CollapseSingleSelector("tr:not(.template) [data-name=\"collapseDetailEdit\"]"))
            </td>
        </tr>
    </tbody>
</table>

<div class="row mb20">
    <div class="col-md-12">
        @Confluence.InputHidden(Model.BucketId.ToString(), "bucketId")
        @Html.Partial("Controls/DataTable", config)
    </div>
</div>


@helper Actions(ProcurementRowViewModel row)
{
    <div class="textalign-center">
        @(Html.CollapseSingle("collapseDetailEdit")
                .HtmlClass("arrow")
                .UseClassToHide("custom-hide")
                .TargetRegionSelector(x => x.Closest("tr").Next())
                .AsociatedCollapseAllSelector("[data-name=\"collapseAllProcurementsEdit\"]"))
    </div>
}

@helper ProcessId(ProcurementRowViewModel row)
{
    @Confluence.Label(row.ProcessId)
}

@helper ProcurementType(ProcurementRowViewModel row)
{
    <div class="textalign-center">
        @Confluence.Label(row.ProcurementTypeId.ToString())
        @Confluence.InputText(row.ProcurementTypeId.ToString(), "", htmlClass: "hide")
    </div>
}

@helper ProcurementName(ProcurementRowViewModel row, GenericContainer viewContainer)
{
    var statusInfoList = viewContainer.GetValue<List<GetProcurementStatusInfoOutput>>("StatusInfoList");
    var statusInfo = statusInfoList.SingleOrDefault(x => x.STATUS_ID == row.StatusId);

    if ((statusInfo != null) && (statusInfo.LEYEND_CODE == LeyendEnum.CLOSED))
    {
        @Confluence.Label(row.ProcurementName)
        @Confluence.InputText(row.ProcurementName, "procurementNameForPlan", required: false, width: "100%", htmlClass: "hide")
    }
    else
    {
        @Confluence.InputText(row.ProcurementName, "procurementNameForPlan", maxLength: 300, required: false, width: "100%", htmlClass: "")
    }
}

@helper SupervisionMethod(ProcurementRowViewModel row)
{
    @Confluence.Label(row.SupervisionMethodId.ToString())
}

@helper TotalCost(ProcurementRowViewModel row)
{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var FormatIntegerDolar = appSettings.FormatIntegerDolar;

    @Confluence.Label(FormatHelper.Format(row.TotalCost, FormatIntegerDolar))
}

@helper Status(ProcurementRowViewModel row)
{
    var statusList = Model.ViewContainer.GetValue<CustomEnumDictionary<MasterDataViewModel>>("Status").ConvertToSelectListItems();

    @Confluence.LabelGetDropDown(row.StatusId, statusList, false)
}

@helper Detail(ProcurementRowViewModel row, GenericContainer viewContainer)
{
    var appSettings = ConfigurationServiceFactory.Current.GetApplicationSettings();
    var formatDate = appSettings.FormatDate;
    var statusInfoList = viewContainer.GetValue<List<GetProcurementStatusInfoOutput>>("StatusInfoList");
    var statusInfo = statusInfoList.SingleOrDefault(x => x.STATUS_ID == row.StatusId); 

    <tr data-id="@row.PepProcurementId" class="extexd-custom">
        <td colspan="9">
            <div>
                <div class="proc-row--detail-col">
                    @Confluence.LabelsGroup(
                        Localization.GetText("SGP.Label.PepId"),
                        contentAlways: row.PepId.ToString())
                </div>
                <div class="proc-row--detail-col">
                    @Confluence.LabelsGroup(
                        Localization.GetText("SGP.Label.PEPTaskName"),
                        contentAlways: row.PepTaskName)
                </div>
                <div class="clearfix"></div>
            </div>

            <div>
                <div class="proc-row--detail-col-ProcActivities" ">
                    @Confluence.LabelsGroup(
                        Localization.GetText("SGP.Label.ProccessStartDate"),
                        contentAlways: FormatHelper.Format(row.ProcessStartDate, formatDate))
                </div>
                <div class="proc-row--detail-col-ProcActivities" ">
                    @Confluence.LabelsGroup(
                        Localization.GetText("SGP.Label.ProcessEndDate"),
                        contentAlways: FormatHelper.Format(row.ProcessEndDate, formatDate))
                </div>
                <div class="proc-row--detail-col-ProcActivities">
                    @Confluence.LabelsGroup(
                        Localization.GetText("SGP.Label.PercentIDBCost"),
                        contentAlways: row.IDBCostPercent)
                </div>
                <div class="proc-row--detail-col-ProcActivities">
                    @Confluence.LabelsGroup(
                        Localization.GetText("SGP.Label.PercentCounterpart"),
                        contentAlways: row.CounterpartPercent)
                </div>
                <div class="proc-row--detail-col-ProcActivities">
                    @Confluence.LabelsGroup(
                        Localization.GetText("SGP.Label.PercentCoFinancer"),
                        contentAlways: row.CoFinancerPercent)
                </div>
                <div class="clearfix"></div>
            </div>

            <div>
                @Confluence.LabelSubTitleGroup(Localization.GetText("Description"))

                @if ((statusInfo != null) && (statusInfo.LEYEND_CODE == LeyendEnum.CLOSED))
                {
                    @Confluence.LabelsGroup("", contentAlways: Confluence.Label(row.Description))
                    @Confluence.InputTextArea(row.Description, "descriptionForAgency", required: false, width: "100%", htmlClass: "hide")
                }
                else
                {
                    @Confluence.LabelsGroup("", contentAlways: Confluence.InputTextArea(row.Description, "descriptionForAgency", required: false, width: "100%", height: "100px", maxLength:1000))
                }
            </div>

            @Html.Partial("EditPartial/PlanForAgencyComment", row.Comments)
        </td>
    </tr>
}


@functions {
    static string CalculateBackground(ProcurementRowViewModel row, GenericContainer viewContainer)
    {
        var statusInfoList = viewContainer.GetValue<List<GetProcurementStatusInfoOutput>>("StatusInfoList");

        var result = string.Empty;

        var statusInfo = statusInfoList.SingleOrDefault(x => x.STATUS_ID == row.StatusId);
        if ((statusInfo != null) && (statusInfo.LEYEND_CODE == LeyendEnum.PENDING))
        {
            result = "row-yellow";
        }
        else if ((statusInfo != null) && (statusInfo.LEYEND_CODE == LeyendEnum.CLOSED))
        {
            result = "row-grey";
        }

        return result;
    }
}