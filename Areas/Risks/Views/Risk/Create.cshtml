@using IDB.MW.Domain.Models.Architecture.Risks;
@using System.Web.Helpers;
@model   IDB.MW.Domain.Models.Risks.RiskViewModel

@{
    ViewBag.Title = "Edit";
    var listRiskStatus = this.ViewBag.listRiskStatus;
    var operationNumber = this.ViewBag.operationNumber;
    var listRiskType = this.ViewBag.listRiskType;
    var listRiskProbability = this.ViewBag.listRiskProbability;
    var listRiskImpact = this.ViewBag.listRiskImpact;
    var operationId = this.ViewBag.operationId;
    var listRiskTargetAudience = this.ViewBag.listRiskTargetAudience;
    List<IDB.MW.Domain.Models.Risks.RiskMitigationDataModel> Lista = (List<IDB.MW.Domain.Models.Risks.RiskMitigationDataModel>)this.ViewData["lista"];
    List<Tuple<string, decimal, decimal>> listRangeRiskLevel = this.ViewBag.listRangeRiskLevel;
    var idRisk = this.ViewBag.idRisk;
    int CountListTargetAudience = this.ViewBag.listRiskTargetAudience.Count;
            
}



@section CSS
{
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/Risks/ui_ri_003_edit.css")"/>
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/Risks/esmartGeneral.css")"/>
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/general.css")"/>
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/Risks/general.css")"/>
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/kendo/kendo.common.min.css")" />
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/Risks/kendo.everis.css")" />
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/Risks/AditionalCssRisk.css")"/>
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/themes/custom/jquery.ui.tooltip.error.css")" />
}

@section JavaScript {

    <!-- JS Files -->
    <script type="text/javascript" src="@Url.Content("~/Scripts/plugins/jquery.tablesorter.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/plugins/jquery.tablednd.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Risks/main.js")"></script>
    <!-- End Files Scripts -->

    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/Mainframe/fixIframe.js")"></script>


    <style type="text/css">
        .TabCombo {
            margin-top: 4px;
            margin-left: 5px;
            margin-right: 20px;
            margin-bottom: 10px;
        }

        .noborders {
            float: left;
            margin: 0px;
            padding: 0px;
        }

        .statusrisk {
            float: left;
            width: 10px;
            height: 10px;
            background-color: #ff6a00;
            padding: 0 0 0 0px;
            margin: 0 0 0 0px;
            border: 0 0 0 0px;
        }
    </style>

}

<script>

    $(document).ready(function () {

        $(".statusDropDown").find("span").first().attr("style", "width:8em");
        $(".probabilityDropDown").find("span").first().attr("style", "width:8em");
        $(".impactDropDown").find("span").first().attr("style", "width:8em");
    });

</script>

<div id="ui_ri_002_edit" class="padding20 everisWidth">
    <input type="hidden" id="UserName" value="@IDBContext.Current.UserName"/>
    @using (Html.BeginForm("CreateRisk", "Risk", FormMethod.Post, new { id = "CreateFormRisk", opNumber = @operationNumber, operationNumber = operationNumber }))
    {  
        @Html.HiddenFor(x => x.OperationRiskId); 
        @Html.HiddenFor(x => x.RiskId); 
        <input data-val="true" data-val-required="The OperationId field is required." id="OperationNumber" name="OperationNumber" type="hidden" value="@ViewBag.operationNumber">
        
        <div class="relative h50px verticalMargin20">
            <h3 class="font2em backArrowTitle absolute"><a href="@(Url.Action("Details", "OperationRisk", new { area = "Risks", operationNumber = operationNumber }))">@Localization.GetText("Risks")</a></h3>
            <div class="editingButtons">
                <a class="cancel" href="@(Url.Action("Edit", "OperationRisk", new { area = "Risks", operationNumber = operationNumber }))" style="margin-top:10px;">@Localization.GetText("Cancel")</a>
                <input type="submit" class="btn-primary_2 save" value="Save" id="SaveRisk" onclick="javascript: idbg.lockUi(null, true);">
            </div>
        </div>

        <input type="hidden" value="@listRangeRiskLevel[0].Item2" name="minValueLow" id="minValueLow" />
        <input type="hidden" value="@listRangeRiskLevel[0].Item3" name="maxValueLow" id="maxValueLow" />
        <input type="hidden" value="@listRangeRiskLevel[0].Item1" name="nameValueLow" id="nameValueLow" />

        <input type="hidden" value="@listRangeRiskLevel[1].Item2" name="minValueMiddle" id="minValueMiddle" />
        <input type="hidden" value="@listRangeRiskLevel[1].Item3" name="maxValueMiddle" id="maxValueMiddle" />
        <input type="hidden" value="@listRangeRiskLevel[1].Item1" name="nameValueMiddle" id="nameValueMiddle" />

        <input type="hidden" value="@listRangeRiskLevel[2].Item2" name="minValueHigh" id="minValueHigh" />
        <input type="hidden" value="@listRangeRiskLevel[2].Item3" name="maxValueHigh" id="maxValueHigh" />
        <input type="hidden" value="@listRangeRiskLevel[2].Item1" name="nameValueHigh" id="nameValueHigh" />

        @Html.Hidden("listBoxYearsPlan", Json.Encode(@ViewData["lista"]));
        @Html.Hidden("listProbability", Json.Encode(@ViewData["ProbabilityList"]));
        @Html.Hidden("listImpact", Json.Encode(@ViewData["ImpactList"]));
                                                          
        <div class="operationData dataDetails" style="font-size: 14px; color: #cbcbcb">
            <h3 class="data4 dataTitle">@idRisk</h3>
            <h6 class="grayColor verticalMargin20 font075em">@Localization.GetText("Description")</h6>
            @Html.TextAreaFor(x => x.RiskDescription, new Dictionary<string, Object> { { "class", "w96 h100px font08em" }, { "cols", "100" }, { "rows", "4" }})
            @{Html.ValidateFor(x => x.RiskDescription);}
        </div>
        
        <div class="verticalMargin20 marginLeft3 noborders">
            <div class="verticalMargin40" style="margin: 0px 0px 0px 0px; font-size: 16px;">

                <table>
                    <tr>
                        <td>
                            <div class="inline-block w19-4 TabCombo" style="width: 8em;">
                                <div class="disabledColor font075em">@Localization.GetText("Status")</div>
                                <div class="boldFont font08em">
                                    <div class="statusDropDown">
                                        <select name="RiskStatusId" class="kendoDropDown k-widget k-dropdown k-header">
                                            @foreach (Tuple<int, string> riskStatus in listRiskStatus)
                                            {
                                                <option value="@riskStatus.Item1" @(riskStatus.Item1 == Model.RiskStatusId ? "selected" : "")>@riskStatus.Item2</option>
                                            }
                                        </select>
                                        @{Html.ValidateFor(x => x.RiskStatusId);}
                                    </div>
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="inline-block w19-4 TabCombo" style="width: 12em;">
                                <div class="disabledColor font075em">@Localization.GetText("Type")</div>
                                <div class="">
                                    <select name="RiskType" class="kendoDropDown k-widget k-dropdown k-header">
                                        @foreach (Tuple<int, string> riskTypes in listRiskType)
                                        {
                                            <option value="@riskTypes.Item1" @(riskTypes.Item1 == Model.RiskType ? "selected" : "")>@riskTypes.Item2</option>
                                        }
                                    </select>
                                    @{Html.ValidateFor(x => x.RiskType);}
                                </div>
                            </div>

                        </td>
                        <td>
                            <div class="inline-block w19-4 TabCombo">
                                <div class="disabledColor font075em">@Localization.GetText("Probability")</div>
                                <div class="probabilityDropDown">
                                    <select id="probabilityIdOption" name="RiskProbability" onchange="eventChangeRiskLevel(this)" class="kendoDropDown k-widget k-dropdown k-header">
                                        @foreach (Tuple<int, int, string> riskProbability in listRiskProbability)
                                        {
                                            <option data-probability="@riskProbability.Item2" value="@riskProbability.Item1" @(riskProbability.Item1 == Model.RiskProbability ? "selected" : "")>@riskProbability.Item3</option>
                                        }
                                    </select>
                                    @{Html.ValidateFor(x => x.RiskProbability);}
                                </div>
                            </div>

                        </td>
                        <td>
                            <div class="inline-block w19-4 TabCombo">
                                <div class="disabledColor font075em">@Localization.GetText("Impact")</div>
                                <div class="impactDropDown">
                                    <select id="impactIdOption" name="RiskImpact" onchange="eventChangeRiskLevel(this)" class="kendoDropDown k-widget k-dropdown k-header">
                                        @foreach (Tuple<int, int, string> riskImpact in listRiskImpact)
                                        {
                                            <option data-impact="@riskImpact.Item2" value="@riskImpact.Item1" @(riskImpact.Item1 == Model.RiskImpact ? "selected" : "")>@riskImpact.Item3</option>
                                        }
                                    </select>
                                    @{Html.ValidateFor(x => x.RiskImpact);}
                                </div>
                            </div>

                        </td>
                        <td>
                            <div class="inline-block w19-4 TabCombo" style="width: 10em;">
                                <div class="disabledColor font075em">@Localization.GetText("Risk level")</div>
                                <p class="boldFont riskHighIcon padding20 font08em" id="IconRiskLeven" style="padding-top: 0px; padding-bottom: 0px;">
                                    <input style="font-size:small" type="text" id="RiskStatusId" name="RiskStatusId" value="@Localization.GetText("High")"/>
                                </p>
                            </div>

                        </td>
                    </tr>

                </table>

            </div>
        </div>
       
        <div class="operationData dataDetails" style="float: left; position: relative">
            <h6 class="dataTitle leftPadding20" style="padding-left: 0">@Localization.GetText("Status Description")</h6>
            <br />
            @Html.TextAreaFor(x => x.RiskStatusDescription, new Dictionary<string, Object> { { "class", "w96 h100px font08em" }, { "cols", "100" }, { "rows", "4" }})
        </div>
        
        <div class="tabsContainer verticalMargin20">
            <div id="tab1" class="inline-block tabItem w17 p10 active">@Localization.GetText("Mitigation Measure")</div>
            <div id="tab2" class="inline-block tabItem w17 p10">@Localization.GetText("Status information")</div>
        </div>            
        <div class="relative h50px verticalMargin20">

            <div class=" h50px verticalMargin20">
                <div class="rightAlign absolute absRight verticalAlignMiddle" style="margin-right: 3%;">
                    <input id="newMitigationMeasureRisks" type="button" class="btn-primary edit" value="@Localization.GetText("New")" style="display: normal">
                </div>
            </div>
        </div>
        <div class="verticalMargin20" id="table2">
            <table id="tableSortUIRI002_edit" class="grid w100">
                <thead>
                    <tr>
                        <th>@Localization.GetText("Description")</th>
                        <th>@Localization.GetText("Target audience")</th>
                    </tr>
                </thead>
                <tbody class="leftAlign grayColor" id="mitigationlist">
                    @for (int i = 0; i < Model.RiskMitigations.Count(); i++)
                    {
                        <tr>
                            <td>
                                @Html.HiddenFor(x => x.RiskMitigations[i].RiskId)
                                @Html.HiddenFor(x => x.RiskMitigations[i].RiskMitigationId)
                                @Html.TextAreaFor(x => x.RiskMitigations[i].Description); 
                            @{Html.ValidateFor(x => x.RiskMitigations[i].Description);}
                            </td>
                            <td>
                                @foreach (Tuple<int, string> riskTarget in listRiskTargetAudience)
                                {
                                    if (@riskTarget.Item1 == @Model.RiskMitigations[i].TargetAudienceId)
                                    { 
                                    @riskTarget.Item2;
                                                     break;
                                    }
                                }
                                @{Html.ValidateFor(x => x.RiskMitigations[i].TargetAudienceId);}
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="verticalMargin20" id="table3" style="display: none">
            <table id="tableSortUIRI003_edit" class="grid w100">
                <thead>
                    <tr>
                        <th>@Localization.GetText("Date")</th>
                        <th>@Localization.GetText("Status")</th>
                        <th>@Localization.GetText("Description")</th>
                    </tr>
                </thead>
                <tbody class="leftAlign grayColor">
                    @for (int i = 0; i < Model.MyRiskStatus.Count(); i++)
                    {
                        <tr>
                            <td>
                                @Html.HiddenFor(x => x.MyRiskStatus[i].RiskId)
                                @Html.HiddenFor(x => x.MyRiskStatus[i].StatusId)
                                @Html.HiddenFor(x => x.MyRiskStatus[i].RiskStatusId)
                                @Html.HiddenFor(x => x.MyRiskStatus[i].Description)
                                @Html.HiddenFor(x => x.MyRiskStatus[i].ChangeStatusDate)
                                @Model.MyRiskStatus[i].ChangeStatusDate.Value.ToString("dd MMM yy")
                            </td>
                            <td><span class="status active inline-block leftPadding20">
                                @foreach (Tuple<int, string> riskStatusInfo in listRiskStatus)
                                {
                                    if (@riskStatusInfo.Item1 == @Model.MyRiskStatus[i].StatusId)
                                    {
                                    @riskStatusInfo.Item2;
                                                         break;
                                    }
                                }
                            </span></td>
                            <td>
                                <textarea>@Model.MyRiskStatus[i].Description</textarea></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="verticalMargin20 rightAlign">
            <ul class="pager">
                <li class="pagerItem inline-block active">1</li>
                @*<li class="pagerItem inline-block"><a href="#" class="">2</a></li>
                <li class="pagerItem inline-block"><a href="#" class="">3</a></li>
                <li class="pagerItem inline-block"><a href="#" class="">4</a></li>*@
            </ul>
        </div>

        <div class="separator w100 verticalMargin40"></div>

        @Html.HiddenFor(m => m.RiskId)
        @Html.HiddenFor(m => m.OperationRiskId)
        @Html.HiddenFor(m => m.RiskDescription)

        <div class="relative h50px verticalMargin80-0-20">
            <p class="headingh3">@Localization.GetText("Comments")</p>
            <div class="rightAlign absolute absRight" style="margin-right: 3%">
                <input id="newCommentRisks002"
                       type="button"
                       class="btn-primary edit"
                       value="@Localization.GetText("OP.OD.TabBasicData.RelatedOperations.NewComments")">
            </div>
        </div>
        <br />
        <br />
        
        <table id="commentTableUIRI002_edit" class="grid">
            <tbody id="comentContainer">
                @for (int i = 0; i < Model.UserComment.Count(); i++)
                {
                    if (Model.UserComment[i].ModifiedBy == IDBContext.Current.UserName)
                    {
                    <tr>
                        <td>
                            <div class="padding10 leftAlign">
                                <div class="verticalMargin10 w100 relative h50px">
                                    <input class="font1-5em grayBorder" type="text" value="@Localization.GetText("Comment title")" />
                                    <input type="button" value="@Localization.GetText("Delete")" class="deleteTextButton verticalAlignTop absolute absRight">
                                </div>
                                <div class="verticalMargin10 w100">
                                    <div class="verticalMargin10 inline-block">@Model.UserComment[i].Modified.Value.ToString("dd MMM yy")</div>
                                    <div class="verticalMargin10 inline-block bold marginLeft3">@Model.UserComment[i].ModifiedBy</div>
                                </div>
                                <div class="verticalMargin10 w100">
                                    @Html.HiddenFor(x => x.UserComment[i].UserCommentId)
                                    @Html.HiddenFor(x => x.UserComment[i].ModifiedBy)
                                    @Html.HiddenFor(x => x.UserComment[i].Modified)

                                    @Html.TextAreaFor(x => x.UserComment[i].Text, new { @class = "padding10"})
                                    @{Html.ValidateFor(x => x.UserComment[i].Text);}
                                </div>
                            </div>
                        </td>
                    </tr>                        
                    }
                    else
                    {
                        
                    <tr>
                        <td>
                            <div class="padding10 leftAlign">                                
                                <div class="verticalMargin10 w100">
                                    <div class="verticalMargin10 inline-block">@Model.UserComment[i].Modified.Value.ToString("dd MMM yy")</div>
                                    <div class="verticalMargin10 inline-block bold marginLeft3">@Model.UserComment[i].ModifiedBy</div>
                                </div>
                                <div class="verticalMargin10 w100">
                                    @Html.HiddenFor(x => x.UserComment[i].UserCommentId)
                                    @Html.HiddenFor(x => x.UserComment[i].ModifiedBy)
                                    @Html.HiddenFor(x => x.UserComment[i].Modified)
                                    @Html.HiddenFor(x => x.UserComment[i].Text)                                    
                                    <p class="padding10">@Model.UserComment[i].Text</p>                                                                        
                                </div>
                            </div>
                        </td>
                    </tr> 

                    }



                }
            </tbody>
        </table>
        
        <!-- End comments grid -->
        <div class="editingButtons" style="margin-top: 80px;">
            <a class="cancel" href="@(Url.Action("Edit", "OperationRisk", new { area = "Risks", operationNumber = operationNumber }))" style="margin-top:10px;">@Localization.GetText("Cancel")</a>
            <input type="submit" class="btn-primary_2 save" value="@Localization.GetText("Save")" id="SaveRisk1" onclick="javascript: idbg.lockUi(null, true);">
        </div>     
    }
</div>


<script type="text/javascript">

    Date.prototype.getMonthName = function () {
        var monthNames = ["@Localization.GetText("Jan")", "@Localization.GetText("Feb")", "@Localization.GetText("Mar")", "@Localization.GetText("Apr")", "@Localization.GetText("May")", "@Localization.GetText("Jun")",
                      "@Localization.GetText("Jul")", "@Localization.GetText("Aug")", "@Localization.GetText("Sept")", "@Localization.GetText("Oct")", "@Localization.GetText("Nov")", "@Localization.GetText("Dec")"];
        return monthNames[this.getMonth()];
    }

    $('#newCommentRisks002').click(function () {

        var month_Name = new Date().getMonthName();
        var date = new Date()
        var month_Name = date.getMonthName();
        var day = date.getDate();
        var year = date.getUTCFullYear().toString().substring(0, 4);
        var CurrentUser = $("#UserName").attr("value");
        var htmlContent = '';

        var ope = $('table#commentTableUIRI002_edit tr:last').index() + 1;
        htmlContent += '<tr class="new">';
        htmlContent += '<td>';
        htmlContent += '<div class="padding10 leftAlign">';
        htmlContent += '<div class="verticalMargin10 w100 relative h50px" style="height:0%;">';
        htmlContent += '<input type="button" value="Delete" class="deleteTextButton verticalAlignTop absolute absRight">';
        htmlContent += '</div>';
        htmlContent += '<div class="verticalMargin10 w100">';
        htmlContent += '<div class="verticalMargin10 inline-block">' + day + " " + month_Name + " " + year + '</div>';
        htmlContent += '<div class="verticalMargin10 inline-block bold marginLeft3">' + CurrentUser + '</div>';
        htmlContent += '</div>';
        htmlContent += '<div class="verticalMargin10 w100 textAreaContainer">';
        htmlContent += '<input data-val="true" data-val-user-required="The UserCommentId field is required." id="UserComment_' + ope + '__UserCommentId" name="UserComment[' + ope + '].UserCommentId" type="hidden" value="-1">';
        htmlContent += '<input id="UserComment_' + ope + '__Text" name="UserComment[' + ope + '].Text" type="hidden" data-val="true" data-val-user-required="The Text field is required." value="">';
        htmlContent += '<textarea class="txtDescriptionComent input-validation-error" id="UserComment_' + ope + '__Text" name="UserComment[' + ope + '].Text" data-val="true" data-val-required="The Text field is required."></textarea>';

        htmlContent += '</div>';
        htmlContent += '</div>';
        htmlContent += '</td>';
        htmlContent += '</tr>';
        $('#commentTableUIRI002_edit').append(htmlContent);
        var ddd = htmlContent;

        $('#commentTableUIRI002_edit').find("textarea").last().focusout(function () {
            var divParent = $(this).parent();
            var inputImpactIndicator = $(divParent).find('[id$="__Text"]');
            $(inputImpactIndicator).attr("value", $(this).val());
        });

        resizeIframeCloud();
    });

    $('#newMitigationMeasureRisks').click(function () {

        var htmlContent = '';
        var ope = $('table#tableSortUIRI002_edit tbody tr:last').index() + 1;

        htmlContent += '<tr class="new">';
        htmlContent += '<td>';

        htmlContent += '<input data-val="true" data-val-required="The RiskId field is required." id="RiskMitigations_' + ope + '__RiskId" name="RiskMitigations[' + ope + '].RiskId" type="hidden" value="' + $('#RiskId').val() + '">';
        htmlContent += '<input data-val="true" data-val-required="The RiskMitigationId field is required." id="RiskMitigations_' + ope + '__RiskMitigationId" name="RiskMitigations[' + ope + '].RiskMitigationId" type="hidden" value="-1">';
        htmlContent += '<textarea class="txtDescription input-validation-error" id="RiskMitigations_' + ope + '__Description"  Name=RiskMitigations[' + ope + '].Description title=' + ope + ' data-val="true" data-val-required="The Description field is required." rows="1"></textarea>';

        htmlContent += '</td>';
        htmlContent += '<td>';

        htmlContent += DropDownBaseLineYear(ope);

        htmlContent += '</td>';
        htmlContent += '</tr>';

        $('#tableSortUIRI002_edit').append(htmlContent);

        $('#tableSortUIRI002_edit tbody tr:last').find(".optionSelectYearsPlanNew").kendoDropDownList({ enable: true });

        var ddd = htmlContent;

        $('#tableSortUIRI002_edit').find("td").last().focusout(function () {
            var divParent = $(this).parent();
            var inputImpactIndicator = $(divParent).find('[id$="__Description"]');
            $(inputImpactIndicator).attr("value", $(this).val());
        });

        resizeIframeCloud();
    });

    function setSelectedValue(dropDown) {
        var yearsPlanList = $("#listBoxYearsPlan").val();

        var array = $.parseJSON(yearsPlanList);

        $.each($.parseJSON(yearsPlanList), function (index, yearPlan) {

            console.log(yearPlan.Item1 + ", " + yearPlan.Item2);

        });
    }

    function DropDownBaseLineYear(index) {
        var yearsPlanList = $("#listBoxYearsPlan").val();

        var htmlContent = "";

        htmlContent += '<fieldset>';
        htmlContent += '<legend class="hide">Dropdown con opciones</legend>';
        htmlContent += '<ul class="optionList">';
        htmlContent += '<li class="small">';

        htmlContent += '<span class="k-widget k-dropdown k-header optionSelect optionSelectYearsPlan" unselectable="on" role="listbox" aria-haspopup="true" aria-expanded="false" tabindex="0" aria-owns="" aria-disabled="false" aria-readonly="false" aria-busy="false" aria-activedescendant="" style="">';
        htmlContent += '<span unselectable="on" class="k-dropdown-wrap k-state-default">';
        htmlContent += '<span unselectable="on" class="k-input">' + new Date().getFullYear() + '</span>';
        htmlContent += '<span unselectable="on" class="k-select">';
        htmlContent += '<span unselectable="on" class="k-icon k-i-arrow-s">select</span>';
        htmlContent += '</span>';
        htmlContent += '</span>';
        htmlContent += '<select class="optionSelect optionSelectYearsPlanNew" data-val="true" data-val-required="" id="RiskMitigations_' + index + '__TargetAudienceId" Name="RiskMitigations[' + index + '].TargetAudienceId" data-role="dropdownlist" style="display: none;">';

        var count = 0;
        $.each($.parseJSON(yearsPlanList), function (index, yearPlan) {
            if (count == 0) {
                htmlContent += "<option value='" + yearPlan.TargetAudienceId + "' selected = 'selected'>" + yearPlan.Description + "</option>";
            } else {
                htmlContent += "<option value='" + yearPlan.TargetAudienceId + "'>" + yearPlan.Description + "</option>";
            }
            count++;
        });

        htmlContent += '</select>';
        htmlContent += '</span>';
        htmlContent += '</li>';
        htmlContent += '</ul>';
        htmlContent += '</fieldset>';

        return htmlContent;
    }

    function eventChangeRiskLevel(select) {
        var impactList = $("#listImpact").val();
        var arrayImpact = $.parseJSON(impactList);

        var probabilityList = $("#listProbability").val();
        var arrayProbability = $.parseJSON(probabilityList);

        var probabilityOption = $('#probabilityIdOption').find('option:selected');
        var ProbabilityIdOption = $(probabilityOption).val();

        var impactOption = $('#impactIdOption').find('option:selected');
        var impactIdOption = $(impactOption).val();

        var ValueImpactOption = 0;
        var ValueProbabilityOption = 0;

        for (var i = 0; i < arrayImpact.length; i++) {
            if (arrayImpact[i].Item1 == impactIdOption) {
                ValueImpactOption = arrayImpact[i].Item2;
                break;
            }
        }

        for (var i = 0; i < arrayProbability.length; i++) {
            if (arrayProbability[i].Item1 == ProbabilityIdOption) {
                ValueProbabilityOption = arrayProbability[i].Item2;
                break;
            }
        }

        var risklevelValue = ValueProbabilityOption * ValueImpactOption
        if (parseFloat(risklevelValue) >= $("#minValueLow").val() && parseFloat(risklevelValue) <= $("#maxValueLow").val()) {
            $("#riskLevel").val($("#nameValueLow").val());
            removeIcon();
            $("#IconRiskLeven").addClass("riskLowIcon");
            $("#RiskStatusId").attr("value", "Low");
        }
        else if (parseFloat(risklevelValue) >= $("#minValueMiddle").val() && parseFloat(risklevelValue) <= $("#maxValueMiddle").val()) {
            $("#riskLevel").val($("#nameValueMiddle").val());
            removeIcon();
            $("#IconRiskLeven").addClass("riskMediumIcon");
            $("#RiskStatusId").attr("value", "Medium");
        }
        else if (parseFloat(risklevelValue) >= $("#minValueHigh").val() && parseFloat(risklevelValue) <= $("#maxValueHigh").val()) {
            $("#riskLevel").val($("#nameValueHigh").val());
            removeIcon();
            $("#IconRiskLeven").addClass("riskHighIcon");
            $("#RiskStatusId").attr("value", "High");
        }
    }

    $("#tab1").click(function () {
        changeTab(false)
    });

    $("#tab2").click(function () {
        changeTab(true)
    });

    function changeTab(state) {
        if (state) {
            $("#table2").css('display', 'none');
            $("#table3").css('display', 'block');
            $("#tab1").removeClass('active');
            $("#tab2").addClass('active');
            $("#newMitigationMeasureRisks").css('display', 'none');
        }
        else {
            $("#table2").css('display', 'block');
            $("#table3").css('display', 'none');
            $("#tab1").addClass('active');
            $("#tab2").removeClass('active');
            $("#newMitigationMeasureRisks").css('display', 'block');
        }
    }

    function removeIcon() {
        $("#IconRiskLeven").removeClass("riskLowIcon");
        $("#IconRiskLeven").removeClass("riskMediumIcon");
        $("#IconRiskLeven").removeClass("riskHighIcon");
    }

    $("#CreateFormRisk").submit(function () {
        var form = $("#CreateFormRisk")
       .removeData("validator") /* added by the raw jquery.validate plugin */
       .removeData("unobtrusiveValidation");  /* added by the jquery unobtrusive plugin */
        $.validator.unobtrusive.parse(form);

        if (!form.valid()) {
            $('.loading-container').remove();
        }

        return true;
    });
</script>
