@using IDB.MW.Domain.Models.Architecture.Risks;
@using System.Web.Helpers;
@model   IDB.MW.Domain.Models.Risks.RiskViewModel


@{
   ViewBag.Title = "Edit";
   var listRiskStatus = this.ViewBag.listRiskStatus;
   var operationNumber = this.ViewBag.operationNumber;
   var listRiskType = this.ViewBag.listRiskType;
   var listRiskProbability = this.ViewBag.listRiskProbability;
   var listRiskImpact = this.ViewBag.listRiskImpact;
   var listRiskTargetAudience = this.ViewBag.listRiskTargetAudience;
   List<IDB.MW.Domain.Models.Risks.RiskMitigationDataModel> Lista = (List<IDB.MW.Domain.Models.Risks.RiskMitigationDataModel>)this.ViewData["listaEdit"];
   List<Tuple<string, decimal, decimal>> listRangeRiskLevel = this.ViewBag.listRangeRiskLevel;
   var idRisk = this.ViewBag.idRisk;
}



@section CSS
{
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/Risks/ui_ri_003_edit.css")"/>
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/Risks/esmartGeneral.css")"/>
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/general.css")"/>
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/kendo/kendo.common.min.css")" />
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/Risks/kendo.everis.css")" />
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/Modules/Risks/AditionalCssRisk.css")"/>

    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/themes/custom/jquery.ui.tooltip.error.css")" />
}

@section JavaScript 
    {
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery-ui-1.11.3.js")"></script>
    @*<script type="text/javascript" src="@Url.Content("~/Scripts/jquery-ui-1.10.3.min.js")"></script>*@
    <script type="text/javascript" src="@Url.Content("~/Scripts/plugins/jquery.tablesorter.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/plugins/jquery.tablednd.js")"></script>

    <script type="text/javascript" src="@Url.Content("~/Scripts/Modules/Risks/main.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>

    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/concurrence.js" + @System.Configuration.ConfigurationManager.AppSettings["cache"].ToString())"></script>
}

<script type="text/ecmascript">

   $(document).ready(function () {
      $(".txtDescription").focusout(function () {
         var divParent = $(this).parent();
         var inputImpactIndicator = $(divParent).find('[id$="__Description"]');
         $(inputImpactIndicator).attr("value", $(this).val());
      });

      $(".txtDescriptionComent").focusout(function () {
         var divParent = $(this).parent();
         var inputImpactIndicator = $(divParent).find('[id$="__Text"]');
         $(inputImpactIndicator).attr("value", $(this).val());
      });

      $('#RiskStatusDescription').attr('data-val', 'false');

      var form = $("#target").removeData("validator").removeData("unobtrusiveValidation");
      $.validator.unobtrusive.parse(form);
   });

</script>


<div id="ui_ri_002_edit" class="padding20 everisWidth">
    <input type="hidden" id="UserName" value="@IDBContext.Current.UserName"/>

    @Html.Hidden("listBoxYearsPlan", Json.Encode(@ViewData["listaEdit"]))
    @Html.Hidden("listProbability", Json.Encode(@ViewData["ProbabilityList"]))
    @Html.Hidden("listImpact", Json.Encode(@ViewData["ImpactList"]))
    @Html.Hidden("StatusInicial", @Model.RiskStatusId)

    @using (Html.BeginForm("UpdateRisk", "Risk", FormMethod.Post, new { id = "EditFormRisk", operationNumber = operationNumber }))
    {   
        <script type="text/javascript">
            $("#EditFormRisk").submit(function () {
                var list = $(document.getElementsByClassName('txtDescriptionComent'));
                $.each(list, function (index, data) {
                    var divParent = $(this).parent();
                    var inputImpactIndicator = $(divParent).find('[id$="__Text"]');
                    if ((!$(inputImpactIndicator).val().trim()) || ($(inputImpactIndicator).val() == null) || ($(inputImpactIndicator).val() == '')) {
                        $(this).attr('data-val-required', "The Text field is required.");
                        $(this).addClass("input-validation-error");
                        $(this).focus();
                        return false;
                    }
                });
                return true;
            });
        </script>
        @Html.HiddenFor(x => x.OperationNumber)
        <div class="relative h50px verticalMargin20">

            <input type="hidden" value="@listRangeRiskLevel[0].Item2" name="minValueLow" id="minValueLow" />
            <input type="hidden" value="@listRangeRiskLevel[0].Item3" name="maxValueLow" id="maxValueLow" />
            <input type="hidden" value="@listRangeRiskLevel[0].Item1" name="nameValueLow" id="nameValueLow" />

            <input type="hidden" value="@listRangeRiskLevel[1].Item2" name="minValueMiddle" id="minValueMiddle" />
            <input type="hidden" value="@listRangeRiskLevel[1].Item3" name="maxValueMiddle" id="maxValueMiddle" />
            <input type="hidden" value="@listRangeRiskLevel[1].Item1" name="nameValueMiddle" id="nameValueMiddle" />

            <input type="hidden" value="@listRangeRiskLevel[2].Item2" name="minValueHigh" id="minValueHigh" />
            <input type="hidden" value="@listRangeRiskLevel[2].Item3" name="maxValueHigh" id="maxValueHigh" />
            <input type="hidden" value="@listRangeRiskLevel[2].Item1" name="nameValueHigh" id="nameValueHigh" />


            <h3 class="font2em backArrowTitle absolute"><a href="@(Url.Action("Details", "Risk", new { area = "Risks", operationNumber = @operationNumber, riskId = @Model.RiskId }))">@Localization.GetText("Risks")</a></h3>
            <div class="rightAlign absolute absRight">
                <a href="@(Url.Action("Details", "Risk", new { area = "Risks", operationNumber = operationNumber, riskId = @Model.RiskId }))" class="horizontalPadding10">@Localization.GetText("Cancel")</a>
                <input type="submit" class="button yellowButton" value="Save" id="SaveRisk" onclick="javascript: idbg.lockUi(null, true);">
            </div>
        </div>

        <div class="verticalMargin20">
            <div class="operationData dataDetails">
                <div class="data4">
                    <h3 class="dataTitle">@Model.RiskCode</h3>
                    <br />
                    <div class="dataTitle">@Localization.GetText("Description")</div>
                    <div style="height: 99%; width: 800%;">
                        <p class="boldFont font08e">
                            <span class="status active inline-block ">
                                @Html.TextAreaFor(x => x.RiskDescription, new Dictionary<string, Object> { { "class", "w96 h100px font08em" }, { "cols", "120" }, { "rows", "4" } })
                                @{Html.ValidateFor(x => x.RiskDescription);}
                            </span>
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <div class="verticalMargin20">
            <div class="operationData dataDetails">
                <div class="data4" style="margin-right: 40px;">
                    <div class="dataTitle">@Localization.GetText("Status")</div>

                    <span class="status active inline-block">
                        <select name="RiskStatusId" class="kendoDropDown k-widget k-dropdown k-header" onchange="eventChangeStatusRisk(this)">
                            @foreach (Tuple<int, string> riskStatus in listRiskStatus)
                            {
                                <option class="width100px" value="@riskStatus.Item1" @(riskStatus.Item1 == Model.RiskStatusId ? "selected" : "")>@Localization.GetText(riskStatus.Item2)</option>                       
                            }
                        </select>
                        @{Html.ValidateFor(x => x.RiskStatusId);}
                    </span>

                </div>

                <div class="data4" style="margin-right: 40px;">
                    <div class="dataTitle" style="width: 100%;">@Localization.GetText("Type")</div>
                    <span class="status active inline-block">
                        <select name="RiskType" class="kendoDropDown k-widget k-dropdown k-header">
                            @foreach (Tuple<int, string> riskTypes in listRiskType)
                            {
                                <option class="width100px" value="@riskTypes.Item1" @(riskTypes.Item1 == Model.RiskType ? "selected" : "")>@riskTypes.Item2</option>
                            }
                        </select>
                        @{Html.ValidateFor(x => x.RiskType);}
                    </span>
                </div>


                <div class="data4" style="margin-right: 40px;">
                    <div class="dataTitle" style="width: 100%;">@Localization.GetText("Probability")</div>
                    <span class="status active inline-block">
                        <select id="probabilityIdOption" name="RiskProbability" onchange="eventChangeRiskLevel(this)" class="kendoDropDown k-widget k-dropdown k-header">
                            @foreach (Tuple<int, int, string> riskProbability in listRiskProbability)
                            {
                                <option data-probability="@riskProbability.Item2" class="width100px" value="@riskProbability.Item1" @(riskProbability.Item1 == Model.RiskProbability ? "selected" : "")>@Localization.GetText(riskProbability.Item3)</option>
                            }
                        </select>
                        @{Html.ValidateFor(x => x.RiskProbability);}
                    </span>
                </div>

                <div class="data4" style="margin-right: 40px;">
                    <div class="dataTitle" style="width: 100%;">@Localization.GetText("Impact")</div>
                    <span class="status active inline-block">
                        <select id="impactIdOption" name="RiskImpact" onchange="eventChangeRiskLevel(this)" class="kendoDropDown k-widget k-dropdown k-header SelectItemRiskStyle">
                            @foreach (Tuple<int, int, string> riskImpact in listRiskImpact)
                            {
                                <option data-impact="@riskImpact.Item2" class="width100px" value="@riskImpact.Item1" @(riskImpact.Item1 == Model.RiskImpact ? "selected" : "")>@Localization.GetText(riskImpact.Item3)</option>
                            }
                        </select>
                        @{Html.ValidateFor(x => x.RiskImpact);}
                    </span>
                </div>

                <div class="data4" style="margin-right: 0px; margin-left: 38px;">
                    <div class="dataTitle">@Localization.GetText("Risk level")</div>
                    @{string riskLevel = string.Empty;
                      switch (@Model.RiskLevel)
                      {
                         case "High": riskLevel = "riskHighIcon"; break;
                         case "Medium": riskLevel = "riskMediumIcon"; break;
                         case "Low": riskLevel = "riskLowIcon"; break;
                      }
                    }
                    <p id="IconRiskLeven" class="boldFont @riskLevel padding20 font08em">
                        @Localization.GetText(Model.RiskLevel)
                    </p>
                </div>

            </div>
        </div>

        <div class="verticalMargin20" id="StatusDescription">
            <div class="operationData dataDetails">
                <div class="data4" style="width: 800%;">
                    <div class="dataTitle" style="width: 100%;">@Localization.GetText("Status Description")</div>
                    <p class="boldFont font08e">
                        <span class="status active inline-block">
                            @Html.TextAreaFor(x => x.RiskStatusDescription, new Dictionary<string, Object> { { "class", "w96 h100px font08em" }, { "cols", "120" }, { "rows", "4" } })
                        </span>
                    </p>
                </div>
            </div>
        </div>
        
        <div class="tabsContainer verticalMargin20">
            <div id="tab1" class="inline-block tabItem w17 p10 active">@Localization.GetText("Mitigation Measure")</div>
            <div id="tab2" class="inline-block tabItem w17 p10">@Localization.GetText("Status information")</div>
        </div>
        
        <div class="relative h50px verticalMargin20">

            <div class=" h50px verticalMargin20">
                <div class="rightAlign absolute absRight verticalAlignMiddle">
                    <input id="newMitigationMeasureRisks" type="button" class="btn-primary edit" value="@Localization.GetText("New")" style="display: normal">
                </div>
            </div>
        </div>
        
        <div class="verticalMargin20" id="table2">
            <table id="tableSortUIRI002_edit" class="grid w100">
                <thead>
                    <tr>
                        <th>@Localization.GetText("Description")</th>
                        <th>@Localization.GetText("Target audience")</th>
                    </tr>
                </thead>
                <tbody class="leftAlign grayColor" id="mitigationlist">
                    @for (int i = 0; i < Model.RiskMitigations.Count(); i++)
                    {

                       var CountId = i;
                       var IdRiskMitigation = "RiskMitigations_" + CountId + "__TargetAudienceId";
                       var NameRiskMitigation = "RiskMitigations[" + CountId + "].TargetAudienceId";
                        
                        <tr>
                            <td>
                                @Html.HiddenFor(x => x.RiskMitigations[i].RiskId, new { @id = "RiskId" })
                                @Html.HiddenFor(x => x.RiskMitigations[i].RiskMitigationId, new { @id = "RiskMitigationId" })
                                @Html.TextAreaFor(x => x.RiskMitigations[i].Description, new { @class = "txtDescription", @rows = "1" })
                                @{Html.ValidateFor(x => x.RiskMitigations[i].Description);}
                            </td>
                            <td>
                                <fieldset>
                                    <legend class="hide">Dropdown con opciones</legend>
                                    <ul class="optionList">
                                        <li class="small">
                                            @{   
                                  var TargetAudienceList = new List<SelectListItem>();

                                  foreach (var item in Lista)
                                  {
                                     if (@Model.RiskMitigations[i].TargetAudienceId == item.TargetAudienceId)
                                     {
                                        TargetAudienceList.Add(new SelectListItem() { Value = item.TargetAudienceId.ToString(), Text = item.Description, Selected = true });
                                     }
                                     else
                                     {
                                        TargetAudienceList.Add(new SelectListItem() { Value = item.TargetAudienceId.ToString(), Text = item.Description });
                                     }
                                  }
                                            }

                                            @Html.DropDownListFor(x => x.RiskMitigations[i].TargetAudienceId, TargetAudienceList, new { @class = "optionSelect" })
                                            @{Html.ValidateFor(x => x.RiskMitigations[i].TargetAudienceId);}
                                        </li>
                                    </ul>
                                </fieldset>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="verticalMargin20" id="table3" style="display: none">
            <table id="tableSortUIRI003_edit" class="grid w100">
                <thead>
                    <tr>
                        <th>@Localization.GetText("Date")</th>
                        <th>@Localization.GetText("Status")</th>
                        <th>@Localization.GetText("Status Description")</th>
                    </tr>
                </thead>
                <tbody class="leftAlign grayColor">
                    @for (int i = 0; i < Model.MyRiskStatus.Count(); i++)
                    {
                        <tr>
                            <td>
                                @Html.HiddenFor(x => Model.MyRiskStatus[i].RiskId)
                                @Html.HiddenFor(x => Model.MyRiskStatus[i].StatusId)
                                @Html.HiddenFor(x => Model.MyRiskStatus[i].RiskStatusId)
                                @Html.HiddenFor(x => Model.MyRiskStatus[i].ChangeStatusDate)
                                @Model.MyRiskStatus[i].ChangeStatusDate.Value.ToString("dd MMM yy")
                            </td>
                            <td>
                                <span class="status active inline-block leftPadding20">
                                    @foreach (Tuple<int, string> riskStatusInfo in listRiskStatus)
                                    {
                                       if (@riskStatusInfo.Item1 == @Model.MyRiskStatus[i].StatusId)
                                       {
                                        @Localization.GetText(riskStatusInfo.Item2)
                                          break;
                                       }
                                    }
                                </span>

                            </td>
                            <td>
                                @Html.TextAreaFor(x => x.MyRiskStatus[i].Description)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="verticalMargin20 rightAlign">
            <ul class="pager">
                <li class="pagerItem inline-block active">1</li>
            </ul>
        </div>

        <div class="separator w100 verticalMargin40"></div>

        <div class="relative h50px verticalMargin20">
            <div class="absolute">
                <h3 class="font1-5em inline-block">@Localization.GetText("Comments")</h3>
            </div>
            <div class="rightAlign absolute absRight">
                <input id="newCommentRisks002"
                       type="button"
                       class="btn-primary edit"
                       value="@Localization.GetText("OP.OD.TabBasicData.RelatedOperations.NewComments")">
            </div>
        </div>
        
        <div id="commentslistdinamic">
            <table id="commentTableUIRI002_edit" class=" grid">
                <tbody id="comentContainer">
                    @for (int i = 0; i < Model.UserComment.Count(); i++)
                    {
                        <tr>
                            <td>
                                <div class="padding10 leftAlign">
                                    <div class="verticalMargin10 w100 relative h50px" style="height: 0%;">
                                        <input type="button" value="@Localization.GetText("Delete")" class="deleteTextButton verticalAlignTop absolute absRight">
                                    </div>
                                    <div class="verticalMargin10 w100">
                                        <div class="verticalMargin10 inline-block">@string.Format("{0:dd MMM yyy}", Model.UserComment[i].Modified)</div>
                                        <div class="verticalMargin10 inline-block bold marginLeft3">@Model.UserComment[i].ModifiedBy</div>
                                    </div>
                                    <div class="verticalMargin10 w100">
                                        <div class="padding10">
                                            @Html.HiddenFor(x => Model.UserComment[i].UserCommentId)
                                            @Html.HiddenFor(x => Model.UserComment[i].ModifiedBy)
                                            @Html.HiddenFor(x => Model.UserComment[i].Modified)

                                            @Html.TextAreaFor(x => Model.UserComment[i].Text, new { @class = "txtDescriptionComent" })
                                            @{Html.ValidateFor(x => Model.UserComment[i].Text);}
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <!-- End comments grid -->
        <div class="verticalMargin40 rightAlign">
            <a href="@(Url.Action("Details", "Risk", new { area = "Risks", operationNumber = @operationNumber, riskId = @Model.RiskId }))" class="horizontalPadding10">@Localization.GetText("Cancel")</a>
            <input type="submit" class="button yellowButton" value="@Localization.GetText("Save")" id="Save2" onclick="javascript: idbg.lockUi(null, true);">
        </div>
     
        
        @Html.HiddenFor(x => x.RiskId);
                                      Html.HiddenFor(x => x.OperationRiskId);
                                      Html.HiddenFor(x => x.RiskDescription);
                                      Html.HiddenFor(x => x.RiskStatusId);
    }
</div>

<script type="text/javascript">

   Date.prototype.getMonthName = function () {
      var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                    "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
      return monthNames[this.getMonth()];
   }

   $('#newCommentRisks002').click(function () {

      var month_Name = new Date().getMonthName();
      var date = new Date()
      var month_Name = date.getMonthName();
      var day = date.getDate();
      var year = date.getUTCFullYear().toString().substring(0, 4);
      var CurrentUser = $("#UserName").attr("Value");

      var htmlContent = '';

      var ope = $('table#commentTableUIRI002_edit tbody tr:last').index() + 1;
      htmlContent += '<tr class="new">';
      htmlContent += '<td>';
      htmlContent += '<div class="padding10 leftAlign">';
      htmlContent += '<div class="verticalMargin10 w100 relative h50px" style="height:0%;">';
      htmlContent += '<input type="button" value="Delete" class="deleteTextButton verticalAlignTop absolute absRight">';
      htmlContent += '</div>';
      htmlContent += '<div class="verticalMargin10 w100">';
      htmlContent += '<div class="verticalMargin10 inline-block">' + day + " " + month_Name + " " + year + '</div>';
      htmlContent += '<div class="verticalMargin10 inline-block bold marginLeft3">' + CurrentUser + '</div>';
      htmlContent += '</div>';
      htmlContent += '<div class="verticalMargin10 w100 textAreaContainer">';
      htmlContent += '<input data-val="true" data-val-user-required="The UserCommentId field is required." id="UserComment_' + ope + '__UserCommentId" name="UserComment[' + ope + '].UserCommentId" type="hidden" value="-1">';
      htmlContent += '<input id="UserComment_' + ope + '__Text" name="UserComment[' + ope + '].Text" type="hidden" data-val="true" data-val-user-required="The Text field is required." value="">';
      htmlContent += '<textarea class="txtDescriptionComent input-validation-error" id="UserComment_' + ope + '__Text" name="UserComment[' + ope + '].Text" data-val="true" data-val-required="The Text field is required."></textarea>';

      htmlContent += '</div>';
      htmlContent += '</div>';
      htmlContent += '</td>';
      htmlContent += '</tr>';

      $('#commentTableUIRI002_edit').append(htmlContent);
      var ddd = htmlContent;

      $('#commentTableUIRI002_edit').find("textarea").last().focusout(function () {
         var divParent = $(this).parent();
         var inputImpactIndicator = $(divParent).find('[id$="__Text"]');
         $(inputImpactIndicator).attr("value", $(this).val());
      });

      resizeIframeCloud();
   });

   $('#newMitigationMeasureRisks').click(function () {
      //jQuery("Select").addClass("kendoDropDown");
      //jQuery("Select").removeClass("optionSelectYearsPlanNew");

      var htmlContent = '';
      var ope = $('table#tableSortUIRI002_edit tbody tr:last').index() + 1;
      htmlContent += '<tr class="new">';
      htmlContent += '<td>';

      htmlContent += '<input data-val="true" data-val-required="The RiskId field is required." id="RiskMitigations_' + ope + '__RiskId" name="RiskMitigations[' + ope + '].RiskId" type="hidden" value="' + $('#RiskId').val() + '">';
      htmlContent += '<input data-val="true" data-val-required="The RiskMitigationId field is required." id="RiskMitigations_' + ope + '__RiskMitigationId" name="RiskMitigations[' + ope + '].RiskMitigationId" type="hidden" value="-1">';
      htmlContent += '<textarea rows="1" class="txtDescription input-validation-error" id="RiskMitigations_' + ope + '__Description"  Name=RiskMitigations[' + ope + '].Description title=' + ope + ' data-val="true" data-val-required="The Description field is required."></textarea>';

      htmlContent += '</td>';
      htmlContent += '<td>';

      htmlContent += DropDownBaseLineYear(ope);

      htmlContent += '</td>';
      htmlContent += '</tr>';

      $('#tableSortUIRI002_edit').append(htmlContent);

      $('#tableSortUIRI002_edit tbody tr:last').find(".optionSelectYearsPlanNew").kendoDropDownList({ enable: true });

      var ddd = htmlContent;

      $('#tableSortUIRI002_edit').find("td").last().focusout(function () {
         var divParent = $(this).parent();
         var inputImpactIndicator = $(divParent).find('[id$="__Text"]');
         $(inputImpactIndicator).attr("value", $(this).val());
      });

      resizeIframeCloud();
   });

   function setSelectedValue(dropDown) {
      var yearsPlanList = $("#listBoxYearsPlan").val();

      var array = $.parseJSON(yearsPlanList);

      $.each($.parseJSON(yearsPlanList), function (index, yearPlan) {

         console.log(yearPlan.Item1 + ", " + yearPlan.Item2);
      });
   }

   function DropDownBaseLineYear(index) {
      var yearsPlanList = $("#listBoxYearsPlan").val();

      var htmlContent = "";

      htmlContent += '<fieldset>';
      htmlContent += '<legend class="hide">Dropdown con opciones</legend>';
      htmlContent += '<ul class="optionList">';
      htmlContent += '<li class="small">';

      htmlContent += '<span class="k-widget k-dropdown k-header optionSelect optionSelectYearsPlan" unselectable="on" role="listbox" aria-haspopup="true" aria-expanded="false" tabindex="0" aria-owns="" aria-disabled="false" aria-readonly="false" aria-busy="false" aria-activedescendant="" style="">';
      htmlContent += '<span unselectable="on" class="k-dropdown-wrap k-state-default k-state-hover">';
      htmlContent += '<span unselectable="on" class="k-input"></span>';
      htmlContent += '<span unselectable="on" class="k-select">';
      htmlContent += '<span unselectable="on" class="k-icon k-i-arrow-s">select</span>';
      htmlContent += '</span>';
      htmlContent += '</span>';
      htmlContent += '<select class="optionSelect optionSelectYearsPlanNew" data-val="true" data-val-required="The TargetAudienceId field is required." id="RiskMitigations_' + index + '__TargetAudienceId" Name="RiskMitigations[' + index + '].TargetAudienceId" data-role="dropdownlist" style="display: none;">';

      var count = 0;
      $.each($.parseJSON(yearsPlanList), function (index, yearPlan) {
         if (count == 0) {
            htmlContent += "<option value='" + yearPlan.TargetAudienceId + "' selected = 'selected'>" + yearPlan.Description + "</option>";
         } else {
            htmlContent += "<option value='" + yearPlan.TargetAudienceId + "'>" + yearPlan.Description + "</option>";
         }
         count++;
      });

      htmlContent += '</select>';
      htmlContent += '</span>';
      htmlContent += '</li>';
      htmlContent += '</ul>';
      htmlContent += '</fieldset>';

      return htmlContent;
   }

   function eventChangeStatusRisk(select) {
      if ($("#StatusInicial").val() != $(select).val()) {
         $("#StatusDescription").show();
         $('#RiskStatusDescription').attr('data-val', 'true');
      }
      else {
         $("#StatusDescription").hide();
         $('#RiskStatusDescription').attr('data-val', 'false');
      }

      var form = $("#target").removeData("validator").removeData("unobtrusiveValidation");
      $.validator.unobtrusive.parse(form);
      
   }

   function eventChangeRiskLevel(select) {

      var impactList = $("#listImpact").val();
      var arrayImpact = $.parseJSON(impactList);

      var probabilityList = $("#listProbability").val();
      var arrayProbability = $.parseJSON(probabilityList);

      var probabilityOption = $('#probabilityIdOption').find('option:selected');
      var ProbabilityIdOption = $(probabilityOption).val();

      var impactOption = $('#impactIdOption').find('option:selected');
      var impactIdOption = $(impactOption).val();

      var ValueImpactOption = 0;
      var ValueProbabilityOption = 0;

      for (var i = 0; i < arrayImpact.length; i++) {
         if (arrayImpact[i].Item1 == impactIdOption) {
            ValueImpactOption = arrayImpact[i].Item2;
            break;
         }
      }

      for (var i = 0; i < arrayProbability.length; i++) {
         if (arrayProbability[i].Item1 == ProbabilityIdOption) {
            ValueProbabilityOption = arrayProbability[i].Item2;
            break;
         }
      }

      var risklevelValue = ValueProbabilityOption * ValueImpactOption
      if (parseFloat(risklevelValue) >= $("#minValueLow").val() && parseFloat(risklevelValue) <= $("#maxValueLow").val()) {
         $("#riskLevel").val($("#nameValueLow").val());
         removeIcon();
         $("#IconRiskLeven").addClass("riskLowIcon");
         $("#IconRiskLeven").text("Low");
         //$("#RiskStatusId").attr("value", "Low");
      }
      else if (parseFloat(risklevelValue) >= $("#minValueMiddle").val() && parseFloat(risklevelValue) <= $("#maxValueMiddle").val()) {
         $("#riskLevel").val($("#nameValueMiddle").val());
         removeIcon();
         $("#IconRiskLeven").addClass("riskMediumIcon");
         $("#IconRiskLeven").text("Medium");
         //$("#RiskStatusId").attr("value", "Medium");
      }
      else if (parseFloat(risklevelValue) >= $("#minValueHigh").val() && parseFloat(risklevelValue) <= $("#maxValueHigh").val()) {
         $("#riskLevel").val($("#nameValueHigh").val());
         removeIcon();
         $("#IconRiskLeven").addClass("riskHighIcon");
         $("#IconRiskLeven").text("High");
         //$("#RiskStatusId").attr("value", "High");
      }
   }

   $("#tab1").click(function () {
      changeTab(false)
   });

   $("#tab2").click(function () {
      changeTab(true)
   });

   function removeIcon() {
      $("#IconRiskLeven").removeClass("riskLowIcon");
      $("#IconRiskLeven").removeClass("riskMediumIcon");
      $("#IconRiskLeven").removeClass("riskHighIcon");
   }

   function changeTab(state) {
      if (state) {
         $("#table2").css('display', 'none');
         $("#table3").css('display', 'block');
         $("#tab1").removeClass('active');
         $("#tab2").addClass('active');
         $("#newMitigationMeasureRisks").css('display', 'none');
      }
      else {
         $("#table2").css('display', 'block');
         $("#table3").css('display', 'none');
         $("#tab1").addClass('active');
         $("#tab2").removeClass('active');
         $("#newMitigationMeasureRisks").css('display', 'block');
      }
   }

   $("#EditFormRisk").submit(function () {
      var form = $("#EditFormRisk")
     .removeData("validator") /* added by the raw jquery.validate plugin */
     .removeData("unobtrusiveValidation");  /* added by the jquery unobtrusive plugin */
      $.validator.unobtrusive.parse(form);

      if (!form.valid()) {
          $('.loading-container').remove();
      }

      return true;
   });

   $(document).on('click', '.noBorder.operationButton.arrow.cursorPointer', function () {
       setTimeout(function () { resizeIframeCloud(); }, 500);
   });

</script>
